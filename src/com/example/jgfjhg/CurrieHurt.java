package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieHurt {

static String TextureName = "CurrieHurt.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 0.470634f, 7.003146f, 2.277375f,
 0.159971f, 4.345450f, 3.664627f,
 0.942755f, 6.307540f, 1.091320f,
 0.633025f, 3.650295f, 2.478563f,
 0.393743f, 5.174070f, -0.086430f,
 1.856286f, 4.722596f, -0.602330f,
 -0.783851f, 4.737687f, -1.600361f,
 0.958793f, 4.664481f, -2.363155f,
 -0.064611f, 4.856842f, -0.868421f,
 0.891396f, 4.677296f, -0.560979f,
 1.024412f, 4.446317f, -1.279247f,
 -0.492453f, 5.474700f, -0.867784f,
 0.784169f, 5.555274f, -0.131141f,
 1.573135f, 5.822173f, -1.446869f,
 -0.414688f, 6.532830f, -0.877780f,
 0.639023f, 6.479505f, -0.274810f,
 1.300392f, 6.722885f, -1.387648f,
 0.616717f, 6.491435f, -1.172931f,
 1.042566f, 6.294457f, -0.835757f,
 1.224041f, 5.990645f, -1.346725f,
 0.903437f, 7.153406f, -1.254980f,
 1.510431f, 6.712563f, -0.784577f,
 1.767892f, 6.230748f, -1.531876f,
 1.392118f, 7.343668f, -1.411205f,
 1.758300f, 7.013385f, -1.054455f,
 1.998591f, 6.684232f, -1.604751f,
 -0.528164f, 2.893892f, 0.852466f,
 0.542522f, 2.076697f, -0.003586f,
 -1.222511f, 0.000158f, 1.332224f,
 1.067574f, 0.000197f, -0.957802f,
 -0.518659f, 4.910224f, -0.254133f,
 1.137718f, 3.871982f, -1.308793f,
 0.036719f, 4.964585f, -0.944292f,
 1.134614f, 4.751668f, -1.405800f,
 0.856098f, 4.936020f, -0.686094f,
 0.489087f, 4.991672f, -0.800606f,
 1.081137f, 4.741544f, -1.079509f,
 0.060994f, 2.901242f, 1.210580f,
 0.619247f, 2.733668f, 1.001844f,
 1.486753f, 0.000165f, 1.332478f,
 0.132117f, -0.000168f, 1.960319f,
 0.766635f, 2.234790f, 0.503172f,
 1.695522f, -0.000151f, 0.397032f,
 0.273429f, 5.060369f, 0.198835f,
 1.422041f, 4.890385f, 0.029518f,
 1.638542f, 4.356753f, -0.462399f,
 0.108361f, 5.166488f, 2.340747f,
 0.667047f, 4.534822f, 1.291535f,
 0.656653f, 4.931627f, 1.151730f,
 0.098010f, 5.562900f, 2.200587f,
 0.978638f, 4.111632f, -0.145123f,
 0.707055f, 4.397502f, -0.018360f,
 0.905474f, 5.195203f, 1.297097f,
 0.269594f, 6.002333f, 2.625980f,
 0.747139f, 4.894879f, -0.321941f,
 1.209954f, 4.994291f, 1.357938f,
 0.877665f, 5.746395f, 2.686393f,
 1.538186f, 4.871459f, 0.116664f,
 1.217614f, 4.601916f, 1.498487f,
 0.888097f, 5.349867f, 2.826527f,
 1.680092f, 4.443660f, 0.149939f,
 0.925250f, 4.389325f, 1.582164f,
 0.290837f, 5.192770f, 2.912131f,
 1.376212f, 4.415408f, -0.689100f,
 -0.758429f, 2.711048f, 0.145228f,
 -1.850556f, -0.000160f, -0.022533f,
 -1.222759f, 0.000165f, -1.377033f,
 -0.391834f, 2.272321f, -0.513188f,
 -0.287187f, -0.000162f, -1.585892f,
 0.117573f, 2.111189f, -0.379550f,
 -0.403340f, 4.061635f, -2.014177f,
 -0.886586f, 4.529653f, -1.100716f,
 0.295793f, 3.758998f, -1.999774f,
 0.276767f, 4.797022f, -1.645946f,
 0.166730f, 4.888128f, -1.341611f,
 0.705159f, 4.626040f, -1.588280f,
 -1.496187f, 2.337389f, -1.708309f,
 -1.583043f, 2.742615f, -1.638002f,
 -0.402458f, 2.773798f, -1.977624f,
 -0.207828f, 2.410560f, -2.091287f,
 -0.307365f, 3.925286f, -1.163542f,
 -0.035166f, 3.644957f, -1.287837f,
 -2.146420f, 2.938761f, -1.856606f,
 -0.678994f, 2.875980f, -2.213103f,
 -0.215952f, 4.458112f, -1.392102f,
 -1.984455f, 2.794812f, -2.482787f,
 -0.570365f, 2.870418f, -2.532253f,
 -0.562013f, 4.089285f, -2.056506f,
 -1.898170f, 2.389909f, -2.553020f,
 -0.344207f, 2.463266f, -2.664816f,
 -0.175397f, 4.159905f, -2.274728f,
 -1.969670f, 2.110629f, -2.000308f,
 -0.344967f, 2.187000f, -2.413865f,
 0.417583f, 3.980036f, -1.762697f,
 0.210025f, 4.522646f, -1.613761f,
 0.178666f, 5.551236f, -2.148537f,
 0.159046f, 6.479077f, -1.948330f,
 0.797992f, 6.292367f, -1.688805f,
 1.161804f, 6.709014f, -1.989007f,
 1.506580f, 7.023433f, -1.900908f,
 -1.780936f, 1.407015f, 0.267826f,
 -1.585197f, 0.991012f, 1.295262f,
 -0.735646f, 0.923892f, 2.032324f,
 0.239921f, 1.565855f, 1.658057f,
 0.505631f, 1.073839f, 0.864098f,
 0.130062f, 0.998064f, -0.129813f,
 -0.695572f, 1.208630f, -0.654837f,
 -1.415273f, 1.532829f, -0.562529f,
 0.108361f, 5.166488f, 2.340747f,
 0.108361f, 5.166488f, 2.340747f,
 0.667047f, 4.534822f, 1.291535f,
 0.667047f, 4.534822f, 1.291535f,
 0.978638f, 4.111632f, -0.145123f,
 0.978638f, 4.111632f, -0.145123f,
 0.290837f, 5.192770f, 2.912131f,
 0.290837f, 5.192770f, 2.912131f,
 0.130062f, 0.998064f, -0.129813f,
 0.130062f, 0.998064f, -0.129813f,
 0.542522f, 2.076697f, -0.003586f,
 -1.585197f, 0.991012f, 1.295262f,
 -1.585197f, 0.991012f, 1.295262f,
 -0.528164f, 2.893892f, 0.852466f,
 -0.528164f, 2.893892f, 0.852466f,
 -0.518659f, 4.910224f, -0.254133f,
 -0.518659f, 4.910224f, -0.254133f,
 0.542522f, 2.076697f, -0.003586f,
 1.137718f, 3.871982f, -1.308793f,
 1.137718f, 3.871982f, -1.308793f,
 -0.518659f, 4.910224f, -0.254133f,
 0.036719f, 4.964585f, -0.944292f,
 0.036719f, 4.964585f, -0.944292f,
 1.137718f, 3.871982f, -1.308793f,
 1.137718f, 3.871982f, -1.308793f,
 1.134614f, 4.751668f, -1.405800f,
 -1.496187f, 2.337389f, -1.708309f,
 -1.496187f, 2.337389f, -1.708309f,
 -0.207828f, 2.410560f, -2.091287f,
 -0.035166f, 3.644957f, -1.287837f,
 -0.035166f, 3.644957f, -1.287837f,
 -0.207828f, 2.410560f, -2.091287f,
 -1.969670f, 2.110629f, -2.000308f,
 -1.969670f, 2.110629f, -2.000308f,
 -0.492453f, 5.474700f, -0.867784f,
 -0.064611f, 4.856842f, -0.868421f,
 -0.064611f, 4.856842f, -0.868421f,
 1.573135f, 5.822173f, -1.446869f,
 1.024412f, 4.446317f, -1.279247f,
 1.024412f, 4.446317f, -1.279247f,
 -0.414688f, 6.532830f, -0.877780f,
 -0.492453f, 5.474700f, -0.867784f,
 -0.492453f, 5.474700f, -0.867784f,
 1.573135f, 5.822173f, -1.446869f,
 1.573135f, 5.822173f, -1.446869f,
 1.300392f, 6.722885f, -1.387648f,
 1.300392f, 6.722885f, -1.387648f,
 -0.414688f, 6.532830f, -0.877780f,
 0.903437f, 7.153406f, -1.254980f,
 0.903437f, 7.153406f, -1.254980f,
 0.616717f, 6.491435f, -1.172931f,
 1.767892f, 6.230748f, -1.531876f,
 1.224041f, 5.990645f, -1.346725f,
 1.224041f, 5.990645f, -1.346725f,
 1.392118f, 7.343668f, -1.411205f,
 0.903437f, 7.153406f, -1.254980f,
 0.903437f, 7.153406f, -1.254980f,
 1.998591f, 6.684232f, -1.604751f,
 1.767892f, 6.230748f, -1.531876f,
 1.767892f, 6.230748f, -1.531876f,
 1.998591f, 6.684232f, -1.604751f,
 1.392118f, 7.343668f, -1.411205f,
 -1.585197f, 0.991012f, 1.295262f,
 -1.222511f, 0.000158f, 1.332224f,
 -1.222511f, 0.000158f, 1.332224f,
 1.067574f, 0.000197f, -0.957802f,
 1.067574f, 0.000197f, -0.957802f,
 0.130062f, 0.998064f, -0.129813f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.939695f, 0.065388f, 0.335706f},
{ 0.939573f, 0.065783f, 0.335970f},
{ 0.939646f, 0.065545f, 0.335811f},
{ 0.939524f, 0.065940f, 0.336076f},
{ 0.148397f, 0.913525f, -0.378748f},
{ 0.080903f, 0.976604f, -0.199248f},
{ 0.072143f, 0.981744f, -0.175997f},
{ 0.022506f, 0.998759f, -0.044435f},
{ -0.268292f, 0.176569f, 0.947018f},
{ 0.496804f, 0.213705f, 0.841140f},
{ -0.116607f, 0.445252f, 0.887780f},
{ 0.698809f, 0.109714f, 0.706844f},
{ 0.855762f, 0.475546f, -0.203782f},
{ 0.953240f, -0.294793f, 0.066568f},
{ 0.771781f, -0.451972f, -0.447299f},
{ 0.691597f, 0.512125f, -0.509334f},
{ -0.819768f, 0.231112f, 0.523992f},
{ -0.720814f, 0.417704f, 0.553127f},
{ 0.568979f, 0.428350f, 0.701983f},
{ -0.110390f, 0.586049f, 0.802721f},
{ -0.731518f, 0.521556f, 0.439160f},
{ 0.753546f, -0.434127f, -0.493663f},
{ 0.985679f, -0.168630f, -0.000914f},
{ 0.340238f, 0.931526f, -0.128441f},
{ 0.047323f, 0.997175f, -0.058330f},
{ -0.262219f, 0.948822f, -0.176008f},
{ 0.821096f, -0.059700f, -0.567660f},
{ 0.861251f, 0.404478f, -0.307644f},
{ -0.802483f, 0.434772f, -0.408649f},
{ -0.870068f, 0.266092f, -0.414942f},
{ -0.842261f, -0.537774f, 0.037348f},
{ -0.844069f, -0.531758f, -0.069138f},
{ 0.510862f, -0.843272f, 0.167071f},
{ -0.962259f, -0.211614f, 0.171106f},
{ -0.163139f, 0.985570f, 0.045131f},
{ 0.058735f, 0.932617f, -0.356056f},
{ -0.250013f, 0.944639f, -0.212487f},
{ 0.654160f, 0.741776f, 0.147795f},
{ 0.886301f, 0.449597f, 0.111056f},
{ 0.531188f, 0.802947f, -0.270398f},
{ 0.654665f, -0.389025f, 0.648131f},
{ 0.869701f, -0.336959f, 0.360665f},
{ 0.661357f, -0.745669f, -0.081150f},
{ -0.242229f, -0.601737f, 0.761076f},
{ 0.050764f, -0.938625f, 0.341183f},
{ 0.985908f, -0.072765f, -0.150635f},
{ -0.951447f, -0.192178f, 0.240450f},
{ -0.814212f, -0.486870f, 0.316252f},
{ 0.376688f, -0.115238f, 0.919145f},
{ 0.439790f, -0.351006f, 0.826668f},
{ 0.955232f, -0.094049f, -0.280511f},
{ 0.843235f, -0.393725f, -0.365973f},
{ -0.726213f, 0.653662f, 0.212933f},
{ 0.131528f, 0.620276f, 0.773278f},
{ 0.567948f, 0.805400f, -0.169608f},
{ -0.876908f, 0.410756f, 0.249625f},
{ -0.060683f, -0.095656f, 0.993563f},
{ -0.686902f, 0.697102f, 0.205460f},
{ 0.267710f, 0.034660f, 0.962876f},
{ 0.399325f, -0.912091f, -0.092899f},
{ 0.608034f, -0.771376f, -0.187813f},
{ 0.140079f, 0.989500f, -0.035616f},
{ 0.688753f, 0.483822f, 0.539941f},
{ 0.956554f, 0.028455f, -0.290163f},
{ -0.557679f, -0.218333f, -0.800828f},
{ -0.680954f, 0.403150f, -0.611369f},
{ -0.967332f, 0.252883f, -0.017831f},
{ -0.942350f, 0.328658f, 0.062927f},
{ 0.417009f, -0.493778f, -0.763077f},
{ 0.295735f, 0.488251f, -0.821068f},
{ -0.979128f, 0.123957f, -0.161069f},
{ -0.676498f, -0.157880f, -0.719322f},
{ 0.250427f, -0.496998f, -0.830831f},
{ -0.156758f, 0.600860f, -0.783833f},
{ -0.372362f, 0.860538f, -0.347594f},
{ 0.473724f, 0.112454f, -0.873464f},
{ 0.610093f, -0.542354f, 0.577614f},
{ -0.249219f, -0.220354f, 0.943045f},
{ 0.122754f, -0.638796f, 0.759520f},
{ 0.017100f, 0.444411f, 0.895660f},
{ 0.560791f, -0.571506f, 0.599078f},
{ -0.949852f, 0.064503f, 0.305975f},
{ -0.607800f, 0.765580f, 0.210872f},
{ -0.575107f, 0.783081f, 0.236719f},
{ -0.731264f, 0.678136f, 0.073383f},
{ -0.395147f, 0.687187f, -0.609617f},
{ -0.275764f, 0.409272f, -0.869742f},
{ -0.939880f, 0.338270f, -0.046901f},
{ -0.255058f, -0.547429f, -0.797036f},
{ 0.507198f, -0.197875f, -0.838806f},
{ 0.420111f, 0.358708f, -0.833568f},
{ 0.567290f, -0.785167f, -0.248386f},
{ -0.367685f, -0.929348f, 0.033478f},
{ 0.933719f, -0.036265f, -0.356167f},
{ -0.149585f, -0.127422f, -0.980504f},
{ -0.394802f, -0.433265f, -0.810193f},
{ -0.290610f, 0.618598f, -0.729988f},
{ -0.316514f, 0.031725f, -0.948057f},
{ -0.588504f, -0.100735f, -0.802194f},
{ 0.253922f, 0.501661f, -0.826958f},
{ -0.996655f, 0.060620f, -0.054816f},
{ -0.758552f, -0.244720f, 0.603914f},
{ 0.189138f, 0.101510f, 0.976690f},
{ 0.719948f, 0.492568f, 0.488930f},
{ 0.661922f, 0.735284f, -0.145660f},
{ 0.490572f, 0.746350f, -0.449779f},
{ 0.179559f, 0.608550f, -0.772933f},
{ -0.545644f, 0.344620f, -0.763878f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieHurt.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73