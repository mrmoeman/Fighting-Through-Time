package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeathd {

static String TextureName = "CurrieDeath4.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 0.848569f, 1.422860f, -7.510251f,
 0.172076f, 1.421915f, -4.574568f,
 -0.144910f, 2.466125f, -7.718254f,
 -0.827096f, 2.470394f, -4.786804f,
 0.443524f, 4.098168f, -8.577548f,
 -1.460870f, 4.277113f, -8.487639f,
 0.790998f, 5.303231f, -7.163698f,
 -1.157276f, 5.220763f, -7.251233f,
 0.435509f, 4.705521f, -7.884658f,
 -0.367598f, 4.247060f, -8.229307f,
 -0.810298f, 4.498270f, -7.704208f,
 0.490351f, 5.670442f, -8.005872f,
 -0.578653f, 5.351636f, -8.944211f,
 -1.658341f, 5.098408f, -7.835043f,
 -0.139501f, 6.668954f, -7.909147f,
 -0.910933f, 6.236499f, -8.743791f,
 -1.810371f, 6.046411f, -7.859435f,
 -1.075752f, 6.145549f, -7.863283f,
 -1.288908f, 5.826672f, -8.298192f,
 -1.411255f, 5.412743f, -7.846848f,
 -1.641074f, 6.600292f, -7.835590f,
 -1.873385f, 6.004760f, -8.456899f,
 -2.037275f, 5.422157f, -7.856931f,
 -2.175813f, 6.552927f, -7.838063f,
 -2.277087f, 6.142230f, -8.267593f,
 -2.456731f, 5.727120f, -7.848751f,
 1.042366f, 3.850029f, -5.301964f,
 -0.458343f, 3.828320f, -5.288595f,
 1.736565f, 2.101728f, -2.313752f,
 -1.476423f, 1.712490f, -2.195487f,
 0.871872f, 4.315457f, -7.265874f,
 -1.299777f, 4.795350f, -7.370371f,
 0.300947f, 4.791323f, -7.942649f,
 -0.977301f, 4.724148f, -7.872248f,
 -0.401866f, 4.485182f, -8.313623f,
 -0.083345f, 4.613829f, -8.145938f,
 -0.803667f, 4.555931f, -8.034231f,
 0.795589f, 3.236723f, -5.626613f,
 0.088732f, 3.047975f, -5.703741f,
 -0.035433f, 0.430167f, -3.499478f,
 1.320798f, 0.985000f, -3.213604f,
 -0.317947f, 3.349477f, -5.522831f,
 -0.872588f, 0.719265f, -3.132885f,
 0.409848f, 3.587596f, -7.595569f,
 -0.667826f, 3.335348f, -7.985262f,
 -1.249658f, 3.789813f, -7.775992f,
 0.309353f, 2.222118f, -5.903376f,
 -0.696233f, 3.091068f, -6.116967f,
 -0.469705f, 3.005492f, -6.488763f,
 0.473260f, 2.191151f, -6.289429f,
 -0.738494f, 3.759314f, -7.177984f,
 -0.335696f, 3.705539f, -7.271765f,
 -0.514623f, 2.650418f, -6.636778f,
 0.626469f, 1.601633f, -6.469607f,
 -0.201006f, 3.907666f, -7.804363f,
 -0.864540f, 2.582352f, -6.621471f,
 -0.000485f, 1.393075f, -6.417171f,
 -0.790121f, 3.132671f, -7.771947f,
 -1.090004f, 2.663982f, -6.230706f,
 -0.164644f, 1.424178f, -6.031035f,
 -1.182355f, 3.352210f, -7.712144f,
 -0.921111f, 2.798299f, -5.927177f,
 0.291827f, 1.664714f, -5.681074f,
 -1.059551f, 4.071112f, -7.762814f,
 0.724478f, 4.448155f, -5.038269f,
 1.132859f, 3.094534f, -1.375832f,
 -0.292189f, 3.312864f, -0.988097f,
 -0.053425f, 4.615257f, -4.983062f,
 -1.060550f, 2.828815f, -1.295078f,
 -0.390736f, 4.313827f, -5.072128f,
 -0.125832f, 5.996194f, -7.077173f,
 0.754443f, 5.278478f, -7.017713f,
 -0.847570f, 5.758205f, -7.111463f,
 -0.225927f, 5.071291f, -7.529443f,
 0.005755f, 4.959373f, -7.729176f,
 -0.682685f, 5.038076f, -7.721016f,
 -0.416161f, 5.112918f, -4.697993f,
 -0.043460f, 5.215377f, -4.864259f,
 -0.801275f, 5.353452f, -5.853182f,
 -1.225020f, 5.264384f, -5.763865f,
 -0.035454f, 5.186507f, -6.769904f,
 -0.439268f, 5.240993f, -6.671398f,
 0.320293f, 5.585863f, -4.498407f,
 -0.659154f, 5.675072f, -5.692082f,
 0.086906f, 5.307459f, -7.323932f,
 -0.127382f, 6.074263f, -4.499838f,
 -0.901611f, 5.927574f, -5.742249f,
 -0.158455f, 6.061598f, -6.770827f,
 -0.499545f, 5.971499f, -4.333963f,
 -1.345124f, 5.830108f, -5.637625f,
 -0.511703f, 6.146083f, -7.038675f,
 -0.440453f, 5.375978f, -4.159408f,
 -1.443765f, 5.498534f, -5.499194f,
 -0.774300f, 5.468543f, -7.286805f,
 -0.152114f, 4.947749f, -7.348819f,
 -0.461218f, 5.398698f, -6.862067f,
 -0.824486f, 6.238505f, -7.007640f,
 -1.242831f, 5.828742f, -7.419892f,
 -1.804196f, 6.014746f, -7.225113f,
 -2.227359f, 6.156702f, -7.389290f,
 0.708663f, 3.917258f, -3.064889f,
 1.360199f, 3.128037f, -3.534049f,
 1.243278f, 2.189033f, -4.145777f,
 0.305436f, 1.892408f, -4.655299f,
 -0.505297f, 2.122215f, -4.379229f,
 -1.042907f, 2.829324f, -3.858131f,
 -0.917368f, 3.616844f, -3.289931f,
 -0.339822f, 4.021682f, -3.067717f,
 0.309353f, 2.222118f, -5.903376f,
 0.309353f, 2.222118f, -5.903376f,
 -0.696233f, 3.091068f, -6.116967f,
 -0.696233f, 3.091068f, -6.116967f,
 -0.738494f, 3.759314f, -7.177984f,
 -0.738494f, 3.759314f, -7.177984f,
 0.291827f, 1.664714f, -5.681074f,
 0.291827f, 1.664714f, -5.681074f,
 -1.042907f, 2.829324f, -3.858131f,
 -1.042907f, 2.829324f, -3.858131f,
 -0.458343f, 3.828320f, -5.288595f,
 1.360199f, 3.128037f, -3.534049f,
 1.360199f, 3.128037f, -3.534049f,
 1.042366f, 3.850029f, -5.301964f,
 1.042366f, 3.850029f, -5.301964f,
 0.871872f, 4.315457f, -7.265874f,
 0.871872f, 4.315457f, -7.265874f,
 -0.458343f, 3.828320f, -5.288595f,
 -1.299777f, 4.795350f, -7.370371f,
 -1.299777f, 4.795350f, -7.370371f,
 0.871872f, 4.315457f, -7.265874f,
 0.300947f, 4.791323f, -7.942649f,
 0.300947f, 4.791323f, -7.942649f,
 -1.299777f, 4.795350f, -7.370371f,
 -1.299777f, 4.795350f, -7.370371f,
 -0.977301f, 4.724148f, -7.872248f,
 -0.416161f, 5.112918f, -4.697993f,
 -0.416161f, 5.112918f, -4.697993f,
 -1.225020f, 5.264384f, -5.763865f,
 -0.439268f, 5.240993f, -6.671398f,
 -0.439268f, 5.240993f, -6.671398f,
 -1.225020f, 5.264384f, -5.763865f,
 -0.440453f, 5.375978f, -4.159408f,
 -0.440453f, 5.375978f, -4.159408f,
 0.490351f, 5.670442f, -8.005872f,
 0.435509f, 4.705521f, -7.884658f,
 0.435509f, 4.705521f, -7.884658f,
 -1.658341f, 5.098408f, -7.835043f,
 -0.810298f, 4.498270f, -7.704208f,
 -0.810298f, 4.498270f, -7.704208f,
 -0.139501f, 6.668954f, -7.909147f,
 0.490351f, 5.670442f, -8.005872f,
 0.490351f, 5.670442f, -8.005872f,
 -1.658341f, 5.098408f, -7.835043f,
 -1.658341f, 5.098408f, -7.835043f,
 -1.810371f, 6.046411f, -7.859435f,
 -1.810371f, 6.046411f, -7.859435f,
 -0.139501f, 6.668954f, -7.909147f,
 -1.641074f, 6.600292f, -7.835590f,
 -1.641074f, 6.600292f, -7.835590f,
 -1.075752f, 6.145549f, -7.863283f,
 -2.037275f, 5.422157f, -7.856931f,
 -1.411255f, 5.412743f, -7.846848f,
 -1.411255f, 5.412743f, -7.846848f,
 -2.175813f, 6.552927f, -7.838063f,
 -1.641074f, 6.600292f, -7.835590f,
 -1.641074f, 6.600292f, -7.835590f,
 -2.456731f, 5.727120f, -7.848751f,
 -2.037275f, 5.422157f, -7.856931f,
 -2.037275f, 5.422157f, -7.856931f,
 -2.456731f, 5.727120f, -7.848751f,
 -2.175813f, 6.552927f, -7.838063f,
 1.360199f, 3.128037f, -3.534049f,
 1.736565f, 2.101728f, -2.313752f,
 1.736565f, 2.101728f, -2.313752f,
 -1.476423f, 1.712490f, -2.195487f,
 -1.476423f, 1.712490f, -2.195487f,
 -1.042907f, 2.829324f, -3.858131f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.698460f, -0.697263f, -0.161176f},
{ -0.698068f, -0.697619f, -0.161334f},
{ -0.698302f, -0.697406f, -0.161240f},
{ -0.697912f, -0.697761f, -0.161397f},
{ 0.040127f, 0.755561f, -0.653848f},
{ 0.018951f, 0.774391f, -0.632423f},
{ 0.021915f, 0.771816f, -0.635468f},
{ -0.006467f, 0.795676f, -0.605688f},
{ 0.827139f, -0.297752f, -0.476640f},
{ 0.143662f, -0.673750f, -0.724860f},
{ 0.760471f, -0.528382f, -0.377487f},
{ -0.128454f, -0.909074f, -0.396339f},
{ -0.703434f, -0.415273f, -0.576826f},
{ -0.874259f, -0.470533f, -0.119453f},
{ -0.996419f, -0.080792f, 0.024920f},
{ -0.952304f, -0.026482f, -0.303999f},
{ 0.942422f, 0.333696f, -0.022081f},
{ 0.987632f, 0.125509f, -0.093970f},
{ -0.158420f, -0.880776f, -0.446248f},
{ 0.558923f, -0.707014f, -0.433285f},
{ 0.962701f, -0.085191f, -0.256808f},
{ -0.969000f, 0.117319f, 0.217431f},
{ -0.909862f, -0.414904f, -0.002455f},
{ 0.136479f, -0.250790f, -0.958372f},
{ 0.522091f, -0.194448f, -0.830428f},
{ 0.663880f, 0.157422f, -0.731082f},
{ -0.749621f, 0.387427f, -0.536627f},
{ -0.674214f, 0.134987f, -0.726095f},
{ 0.798661f, 0.508602f, -0.321660f},
{ 0.840310f, 0.535890f, 0.081858f},
{ 0.472067f, 0.522102f, 0.710326f},
{ 0.194406f, 0.760375f, 0.619707f},
{ -0.087991f, 0.791528f, 0.604765f},
{ 0.869164f, 0.242577f, 0.430941f},
{ 0.626123f, -0.349401f, -0.697057f},
{ 0.470348f, -0.304172f, -0.828404f},
{ 0.595922f, -0.400120f, -0.696262f},
{ -0.184006f, -0.680569f, -0.709203f},
{ -0.527901f, -0.704812f, -0.473878f},
{ 0.330144f, -0.658178f, -0.676614f},
{ -0.598176f, -0.658240f, 0.457063f},
{ -0.951176f, -0.265762f, 0.156955f},
{ -0.963724f, -0.051439f, -0.261897f},
{ 0.093558f, -0.295878f, 0.950633f},
{ -0.559372f, 0.169988f, 0.811300f},
{ -0.876159f, 0.245685f, -0.414709f},
{ 0.962268f, 0.252582f, -0.101210f},
{ 0.937926f, -0.198044f, -0.284733f},
{ 0.004280f, -0.161330f, -0.986891f},
{ -0.051106f, -0.549500f, -0.833929f},
{ -0.860832f, -0.508848f, 0.006477f},
{ -0.631359f, -0.774814f, 0.032387f},
{ 0.416865f, 0.908966f, -0.001976f},
{ -0.230120f, 0.578027f, -0.782898f},
{ -0.890812f, 0.453167f, 0.033082f},
{ 0.625418f, 0.779558f, -0.033788f},
{ 0.304084f, 0.064970f, -0.950427f},
{ 0.333088f, 0.942769f, -0.015448f},
{ -0.014930f, 0.055048f, -0.998372f},
{ -0.018209f, -0.999170f, 0.036447f},
{ -0.268009f, -0.963360f, 0.010453f},
{ -0.548402f, 0.836200f, 0.004941f},
{ -0.659131f, 0.237519f, -0.713534f},
{ -0.915200f, -0.399918f, 0.049752f},
{ -0.059591f, 0.906199f, 0.418631f},
{ -0.230818f, 0.932423f, 0.278048f},
{ 0.614820f, 0.755431f, 0.226539f},
{ 0.485469f, 0.837663f, 0.250281f},
{ -0.890299f, 0.389758f, 0.235491f},
{ -0.871623f, 0.489105f, 0.032409f},
{ 0.817155f, 0.568676f, 0.094158f},
{ 0.214827f, 0.954768f, 0.205588f},
{ -0.703348f, 0.657762f, 0.269540f},
{ 0.202516f, 0.562907f, -0.801326f},
{ 0.085555f, 0.872367f, -0.481307f},
{ -0.299782f, 0.616091f, -0.728398f},
{ -0.471897f, -0.858744f, -0.199681f},
{ 0.462198f, -0.885883f, 0.039802f},
{ -0.222615f, -0.954944f, 0.196275f},
{ 0.675842f, -0.657714f, -0.332642f},
{ -0.312374f, -0.947014f, -0.074748f},
{ 0.900298f, 0.233015f, 0.367652f},
{ 0.955686f, 0.275944f, -0.102566f},
{ 0.984767f, 0.173316f, 0.013957f},
{ 0.919585f, 0.343747f, -0.190270f},
{ 0.470698f, 0.882282f, 0.004700f},
{ 0.072441f, 0.994807f, 0.071496f},
{ 0.849170f, 0.461493f, 0.256778f},
{ -0.578985f, 0.568543f, 0.584411f},
{ -0.749254f, 0.661463f, -0.032948f},
{ -0.470196f, 0.743949f, -0.474823f},
{ -0.966803f, -0.203634f, 0.154353f},
{ -0.464143f, -0.314092f, 0.828201f},
{ -0.770707f, 0.104334f, -0.628590f},
{ 0.125453f, -0.038550f, 0.991350f},
{ 0.248067f, -0.627031f, 0.738441f},
{ -0.143797f, 0.584512f, 0.798542f},
{ 0.032449f, 0.024115f, 0.999182f},
{ 0.371045f, 0.059148f, 0.926729f},
{ -0.622624f, 0.201829f, 0.756046f},
{ 0.586779f, 0.776186f, 0.230707f},
{ 0.961053f, 0.262701f, -0.085820f},
{ 0.699580f, -0.408731f, -0.586111f},
{ -0.062942f, -0.584504f, -0.808946f},
{ -0.780208f, -0.277973f, -0.560364f},
{ -0.978824f, 0.086464f, -0.185547f},
{ -0.830191f, 0.534817f, 0.157331f},
{ -0.160748f, 0.922237f, 0.351624f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath4.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73