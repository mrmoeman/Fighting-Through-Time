package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieBlocke {

static String TextureName = "CurrieBlock5.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -0.190800f, 6.228385f, 1.730259f,
 0.759267f, 4.550345f, 4.044650f,
 0.709283f, 5.494987f, 0.856975f,
 1.665098f, 3.817517f, 3.158577f,
 0.594594f, 4.719024f, 0.938748f,
 1.054486f, 5.376370f, -0.574940f,
 -1.123525f, 4.689721f, 0.710380f,
 -1.191669f, 5.459723f, -0.888442f,
 -0.267491f, 4.628035f, 0.742277f,
 0.518108f, 4.783670f, 0.076889f,
 -0.076833f, 4.973452f, -0.478101f,
 -0.193329f, 5.326555f, 1.414492f,
 0.866314f, 5.688399f, 0.400121f,
 -0.222366f, 6.204465f, -0.615282f,
 -0.155711f, 6.427770f, 1.558485f,
 0.688578f, 6.567827f, 0.696135f,
 -0.199366f, 7.035082f, -0.125822f,
 -0.188132f, 6.630533f, 0.504702f,
 0.244111f, 6.511263f, 0.139995f,
 -0.210541f, 6.285903f, -0.223697f,
 -0.192452f, 7.342862f, 0.364288f,
 0.418712f, 7.020779f, -0.190116f,
 -0.200920f, 6.688756f, -0.709833f,
 -0.199355f, 7.657917f, -0.079281f,
 0.235113f, 7.393715f, -0.412646f,
 -0.199814f, 7.192111f, -0.836954f,
 -0.058102f, 2.451491f, -0.020959f,
 0.360375f, 1.801851f, -0.950291f,
 -1.222498f, 0.000176f, 1.332233f,
 1.067565f, 0.000166f, -0.957830f,
 -0.396489f, 3.815892f, 0.816796f,
 0.212748f, 5.141081f, -0.859080f,
 -0.264215f, 4.800357f, 0.711087f,
 -0.085686f, 5.338232f, -0.457750f,
 0.408984f, 5.070745f, 0.214358f,
 0.095620f, 4.971207f, 0.486321f,
 0.271468f, 5.215971f, -0.176595f,
 0.579942f, 2.399997f, 0.207085f,
 0.947268f, 2.235386f, 0.047383f,
 1.486753f, 0.000160f, 1.332480f,
 0.132201f, -0.000065f, 1.960302f,
 0.808218f, 1.905568f, -0.544444f,
 1.695557f, -0.000130f, 0.396955f,
 0.494496f, 4.032686f, 0.908484f,
 1.266440f, 4.776748f, 0.431677f,
 1.143730f, 5.035440f, -0.248646f,
 0.444881f, 4.658771f, 2.527434f,
 1.369379f, 4.069703f, 1.746622f,
 1.107176f, 4.350357f, 1.529248f,
 0.247568f, 4.903839f, 2.248534f,
 0.839091f, 4.326972f, -0.232489f,
 0.702992f, 4.187269f, 0.129235f,
 1.161743f, 4.715740f, 1.610768f,
 0.114968f, 5.490736f, 2.453298f,
 0.523916f, 4.615005f, 0.479719f,
 1.511083f, 4.771795f, 1.606789f,
 0.756224f, 5.633166f, 2.543038f,
 1.155365f, 5.065562f, 0.419460f,
 1.776460f, 4.486488f, 1.850891f,
 0.953865f, 5.387839f, 2.821762f,
 1.529379f, 4.885024f, 0.248606f,
 1.629052f, 4.202489f, 2.041990f,
 0.518072f, 4.989966f, 3.022950f,
 0.780655f, 5.064345f, -0.220033f,
 -0.557823f, 2.380501f, -0.508577f,
 -1.850546f, -0.000156f, -0.022527f,
 -1.222759f, 0.000160f, -1.377032f,
 -0.567672f, 2.163814f, -0.954726f,
 -0.287188f, -0.000169f, -1.585892f,
 -0.165839f, 1.894537f, -1.138992f,
 -1.423021f, 4.776782f, -0.543331f,
 -1.210993f, 4.036168f, 0.285158f,
 -0.878881f, 5.065040f, -0.985141f,
 -0.757067f, 5.098425f, 0.029126f,
 -0.545074f, 4.975105f, 0.370432f,
 -0.402973f, 5.238000f, -0.355524f,
 -0.575389f, 3.504519f, 1.263236f,
 -0.499959f, 3.903169f, 1.150472f,
 -1.284723f, 3.512161f, 0.292429f,
 -1.448896f, 3.123036f, 0.315581f,
 -0.792847f, 4.191205f, -0.419389f,
 -0.662876f, 4.331169f, -0.788635f,
 -0.483776f, 4.322031f, 1.628126f,
 -1.395355f, 3.730940f, 0.570170f,
 -0.886268f, 4.617029f, -0.035740f,
 -1.112433f, 4.196067f, 1.795887f,
 -1.728383f, 3.730418f, 0.602631f,
 -1.290494f, 4.805608f, -0.011702f,
 -1.186982f, 3.799206f, 1.910894f,
 -1.920582f, 3.286008f, 0.633609f,
 -1.646769f, 4.790387f, -0.299316f,
 -0.636849f, 3.510063f, 1.862507f,
 -1.674694f, 3.005149f, 0.644188f,
 -0.632806f, 5.065258f, -0.734224f,
 -0.809087f, 4.839049f, -0.156317f,
 -1.246580f, 5.691837f, 0.453882f,
 -1.051784f, 6.568063f, 0.748760f,
 -0.642079f, 6.511573f, 0.165365f,
 -0.835344f, 7.022107f, -0.156626f,
 -0.660509f, 7.399242f, -0.387748f,
 -1.593536f, 1.633936f, -0.007134f,
 -1.148103f, 1.679342f, 1.025406f,
 -0.135495f, 1.801939f, 1.503874f,
 0.501857f, 1.725340f, 1.427723f,
 0.568095f, 1.178186f, 0.758792f,
 -0.024907f, 0.953986f, -0.022306f,
 -0.782629f, 1.173104f, -0.514757f,
 -1.134335f, 1.666452f, -0.417553f,
 0.444881f, 4.658771f, 2.527434f,
 0.444881f, 4.658771f, 2.527434f,
 1.369379f, 4.069703f, 1.746622f,
 1.369379f, 4.069703f, 1.746622f,
 0.839091f, 4.326972f, -0.232489f,
 0.839091f, 4.326972f, -0.232489f,
 0.518072f, 4.989966f, 3.022950f,
 0.518072f, 4.989966f, 3.022950f,
 -0.024907f, 0.953986f, -0.022306f,
 -0.024907f, 0.953986f, -0.022306f,
 0.360375f, 1.801851f, -0.950291f,
 -1.148103f, 1.679342f, 1.025406f,
 -1.148103f, 1.679342f, 1.025406f,
 -0.058102f, 2.451491f, -0.020959f,
 -0.058102f, 2.451491f, -0.020959f,
 -0.396489f, 3.815892f, 0.816796f,
 -0.396489f, 3.815892f, 0.816796f,
 0.360375f, 1.801851f, -0.950291f,
 0.212748f, 5.141081f, -0.859080f,
 0.212748f, 5.141081f, -0.859080f,
 -0.396489f, 3.815892f, 0.816796f,
 -0.264215f, 4.800357f, 0.711087f,
 -0.264215f, 4.800357f, 0.711087f,
 0.212748f, 5.141081f, -0.859080f,
 0.212748f, 5.141081f, -0.859080f,
 -0.085686f, 5.338232f, -0.457750f,
 -0.575389f, 3.504519f, 1.263236f,
 -0.575389f, 3.504519f, 1.263236f,
 -1.448896f, 3.123036f, 0.315581f,
 -0.662876f, 4.331169f, -0.788635f,
 -0.662876f, 4.331169f, -0.788635f,
 -1.448896f, 3.123036f, 0.315581f,
 -0.636849f, 3.510063f, 1.862507f,
 -0.636849f, 3.510063f, 1.862507f,
 -0.193329f, 5.326555f, 1.414492f,
 -0.267491f, 4.628035f, 0.742277f,
 -0.267491f, 4.628035f, 0.742277f,
 -0.222366f, 6.204465f, -0.615282f,
 -0.076833f, 4.973452f, -0.478101f,
 -0.076833f, 4.973452f, -0.478101f,
 -0.155711f, 6.427770f, 1.558485f,
 -0.193329f, 5.326555f, 1.414492f,
 -0.193329f, 5.326555f, 1.414492f,
 -0.222366f, 6.204465f, -0.615282f,
 -0.222366f, 6.204465f, -0.615282f,
 -0.199366f, 7.035082f, -0.125822f,
 -0.199366f, 7.035082f, -0.125822f,
 -0.155711f, 6.427770f, 1.558485f,
 -0.192452f, 7.342862f, 0.364288f,
 -0.192452f, 7.342862f, 0.364288f,
 -0.188132f, 6.630533f, 0.504702f,
 -0.200920f, 6.688756f, -0.709833f,
 -0.210541f, 6.285903f, -0.223697f,
 -0.210541f, 6.285903f, -0.223697f,
 -0.199355f, 7.657917f, -0.079281f,
 -0.192452f, 7.342862f, 0.364288f,
 -0.192452f, 7.342862f, 0.364288f,
 -0.199814f, 7.192111f, -0.836954f,
 -0.200920f, 6.688756f, -0.709833f,
 -0.200920f, 6.688756f, -0.709833f,
 -0.199814f, 7.192111f, -0.836954f,
 -0.199355f, 7.657917f, -0.079281f,
 -1.148103f, 1.679342f, 1.025406f,
 -1.222498f, 0.000176f, 1.332233f,
 -1.222498f, 0.000176f, 1.332233f,
 1.067565f, 0.000166f, -0.957830f,
 1.067565f, 0.000166f, -0.957830f,
 -0.024907f, 0.953986f, -0.022306f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.722750f, 0.665632f, 0.185922f},
{ 0.721944f, 0.666435f, 0.186172f},
{ 0.722426f, 0.665955f, 0.186023f},
{ 0.721623f, 0.666756f, 0.186272f},
{ -0.066299f, 0.922427f, 0.380437f},
{ -0.043652f, 0.910047f, 0.412200f},
{ -0.040454f, 0.908180f, 0.416621f},
{ -0.027266f, 0.900168f, 0.434689f},
{ -0.161523f, 0.550071f, 0.819348f},
{ 0.587959f, 0.431298f, 0.684315f},
{ 0.034025f, 0.291418f, 0.955991f},
{ 0.983314f, -0.126999f, 0.130247f},
{ 0.847437f, 0.393208f, -0.356704f},
{ 0.811009f, -0.213635f, -0.544632f},
{ 0.507485f, -0.213891f, -0.834692f},
{ 0.647743f, 0.405967f, -0.644686f},
{ -0.649504f, 0.490297f, 0.581165f},
{ -0.509774f, 0.242663f, 0.825376f},
{ 0.904792f, 0.122611f, 0.407822f},
{ 0.358980f, -0.127310f, 0.924622f},
{ -0.362542f, -0.309377f, 0.879119f},
{ 0.343606f, 0.171569f, -0.923309f},
{ 0.755539f, 0.152420f, -0.637126f},
{ 0.174939f, 0.742902f, 0.646138f},
{ 0.381930f, 0.509238f, 0.771237f},
{ -0.265849f, 0.293257f, 0.918327f},
{ 0.035079f, 0.907073f, -0.419510f},
{ 0.233391f, 0.972311f, -0.011850f},
{ -0.855024f, -0.234707f, -0.462436f},
{ -0.886004f, -0.461532f, -0.044555f},
{ -0.433230f, -0.834710f, 0.339957f},
{ -0.021376f, -0.999771f, -0.000725f},
{ 0.947125f, -0.027564f, -0.319678f},
{ 0.116406f, -0.980484f, 0.158434f},
{ -0.663755f, 0.683710f, -0.303266f},
{ -0.579530f, 0.718230f, -0.385084f},
{ -0.782228f, 0.325335f, 0.531298f},
{ 0.161257f, 0.961663f, -0.221813f},
{ 0.516564f, 0.855177f, -0.042822f},
{ -0.214856f, 0.973233f, -0.081580f},
{ 0.680185f, 0.281127f, 0.676990f},
{ 0.989245f, 0.091192f, 0.114358f},
{ 0.171869f, -0.855783f, -0.487952f},
{ 0.015060f, -0.299381f, 0.954015f},
{ 0.668210f, -0.659714f, 0.343907f},
{ 0.961665f, 0.085637f, -0.260514f},
{ 0.033714f, -0.426620f, 0.903802f},
{ -0.093086f, -0.720573f, 0.687103f},
{ 0.996765f, -0.069464f, -0.040432f},
{ 0.930347f, -0.366006f, 0.022226f},
{ -0.065530f, 0.186900f, -0.980191f},
{ 0.062092f, -0.032287f, -0.997548f},
{ 0.035641f, 0.451647f, 0.891485f},
{ 0.795641f, 0.569265f, 0.207105f},
{ -0.009048f, 0.919617f, -0.392713f},
{ 0.028477f, 0.193485f, 0.980690f},
{ 0.944943f, -0.174533f, 0.276805f},
{ 0.021278f, 0.505268f, 0.862700f},
{ 0.999596f, 0.022453f, 0.017435f},
{ -0.034407f, -0.765334f, -0.642713f},
{ -0.016352f, -0.575912f, -0.817348f},
{ 0.008952f, 0.993272f, 0.115455f},
{ 0.725316f, 0.588374f, -0.357397f},
{ -0.022634f, 0.280938f, -0.959459f},
{ -0.712410f, -0.115808f, -0.692142f},
{ -0.541515f, 0.371297f, -0.754255f},
{ -0.887991f, 0.180362f, 0.423016f},
{ -0.903570f, 0.427898f, 0.021549f},
{ 0.085589f, -0.179438f, -0.980039f},
{ 0.445315f, 0.376164f, -0.812524f},
{ -0.891428f, -0.266293f, 0.366666f},
{ -0.938060f, 0.045020f, -0.343536f},
{ -0.202428f, 0.201680f, -0.958305f},
{ -0.641988f, 0.648056f, 0.409725f},
{ -0.647168f, 0.400051f, 0.648948f},
{ -0.191578f, 0.968850f, -0.156931f},
{ 0.219035f, -0.780859f, -0.585050f},
{ 0.973331f, -0.213258f, -0.084550f},
{ 0.681625f, -0.716494f, -0.148402f},
{ 0.783052f, 0.306538f, -0.541169f},
{ -0.838938f, 0.057521f, -0.541179f},
{ 0.889589f, -0.307201f, 0.338023f},
{ 0.364224f, 0.926908f, 0.090453f},
{ 0.397275f, 0.914727f, 0.073809f},
{ 0.483903f, 0.482903f, 0.729824f},
{ -0.441144f, 0.848739f, 0.291605f},
{ -0.704771f, 0.583950f, 0.402864f},
{ -0.119211f, 0.723906f, 0.679521f},
{ -0.594267f, -0.317181f, 0.739083f},
{ -0.957711f, -0.281106f, -0.061388f},
{ -0.447212f, -0.266118f, -0.853922f},
{ -0.393923f, -0.882641f, -0.256456f},
{ 0.234480f, -0.716155f, 0.657375f},
{ -0.609827f, -0.081029f, -0.788382f},
{ -0.993095f, -0.111926f, -0.035153f},
{ -0.905866f, -0.196078f, -0.375446f},
{ -0.776387f, 0.580843f, 0.244634f},
{ -0.998668f, 0.020804f, 0.047224f},
{ -0.927202f, -0.172792f, 0.332324f},
{ -0.732794f, 0.585371f, -0.346920f},
{ -0.987850f, 0.155392f, -0.002483f},
{ -0.678727f, 0.160759f, 0.716580f},
{ 0.039753f, 0.250887f, 0.967200f},
{ 0.712912f, 0.421504f, 0.560439f},
{ 0.735969f, 0.658350f, -0.157878f},
{ 0.460891f, 0.757307f, -0.462672f},
{ 0.149473f, 0.664587f, -0.732108f},
{ -0.545169f, 0.393520f, -0.740224f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieBlock5.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73