package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarwalkc {

static String TextureName = "RagWalk3.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -1.556547f, 10.250036f, 4.048838f,
 -0.114729f, 11.047288f, 5.240192f,
 -1.496374f, 14.941011f, 6.227344f,
 -2.940237f, 12.834387f, 3.820474f,
 2.036385f, 10.238963f, 4.175350f,
 0.510156f, 11.045757f, 5.262506f,
 1.818276f, 14.934600f, 6.345777f,
 3.423406f, 12.826225f, 4.039628f,
 -1.321678f, 11.228543f, 5.015052f,
 -1.335411f, 9.958905f, 5.388916f,
 -0.973823f, 7.899883f, 4.549242f,
 -0.008413f, 6.210906f, 3.970302f,
 0.172113f, 9.718672f, 5.979029f,
 0.191415f, 12.025270f, 5.415602f,
 -1.539893f, 9.950950f, 3.759936f,
 -1.581901f, 11.336689f, 3.113534f,
 0.210788f, 12.336196f, 3.075309f,
 0.101008f, 6.067029f, 0.570312f,
 -1.132625f, 7.598213f, 2.148118f,
 -2.127448f, 4.604024f, 0.869994f,
 -1.824479f, 5.480181f, -1.837410f,
 -2.373082f, 9.705722f, 4.184297f,
 -4.413887f, 9.063850f, 0.157536f,
 0.390210f, 10.064568f, 5.077291f,
 0.198675f, 11.422856f, -0.840435f,
 0.188596f, 3.789604f, -1.971112f,
 0.068638f, 3.745659f, 2.511459f,
 -4.623303f, 10.540375f, 2.911834f,
 0.157086f, 13.198056f, 2.859616f,
 -1.577410f, 6.417363f, 0.904911f,
 -0.005536f, 6.024216f, 1.457118f,
 0.388408f, 7.426573f, -1.224387f,
 -1.295914f, 7.308897f, -0.902522f,
 -1.904183f, 7.011290f, 0.091576f,
 -2.666987f, 4.328645f, -0.646421f,
 0.055682f, 2.748167f, -0.104413f,
 -4.034048f, 8.434348f, 3.071517f,
 -2.584347f, 6.840096f, 2.605056f,
 -3.842850f, 6.007440f, 1.541548f,
 -5.176103f, 7.100706f, 1.656626f,
 -3.585412f, 5.207032f, 4.847873f,
 -2.628976f, 4.422913f, 4.322126f,
 -3.446032f, 3.877760f, 3.628368f,
 -4.410217f, 4.656457f, 4.154912f,
 -2.866504f, 10.744710f, 0.995887f,
 -2.782316f, 10.670641f, 3.297745f,
 -2.482257f, 9.193862f, 0.817019f,
 -2.456121f, 8.584121f, 2.563031f,
 -1.007703f, 2.383289f, -0.533974f,
 -1.041367f, 2.288935f, 1.444379f,
 -2.122366f, 2.420335f, -0.200104f,
 -2.149285f, 2.364104f, 1.302807f,
 -1.030584f, -0.005046f, -1.808417f,
 -0.889387f, -0.006623f, 2.474327f,
 -2.384636f, -0.005010f, -1.647097f,
 -2.384432f, -0.006651f, 2.419571f,
 -0.238099f, 4.924933f, -0.847930f,
 -1.252102f, 5.143257f, -0.853427f,
 -1.431944f, 4.995205f, 0.220901f,
 -0.360073f, 4.654357f, 0.306296f,
 -2.167677f, 1.164035f, 0.066408f,
 -2.197263f, 0.823444f, -1.187057f,
 -1.104394f, 0.823989f, -1.425463f,
 -1.076426f, 1.138178f, 0.162627f,
 1.731716f, 11.223601f, 5.121572f,
 1.718277f, 9.956884f, 5.494165f,
 1.412223f, 7.899773f, 4.631219f,
 2.249736f, 10.160722f, 3.651819f,
 2.101705f, 11.539814f, 3.009272f,
 1.605495f, 7.597558f, 2.259626f,
 2.276701f, 4.818854f, 1.299255f,
 2.303967f, 4.962020f, -1.411248f,
 4.041728f, 9.388680f, 3.876420f,
 4.798831f, 10.488993f, -0.719626f,
 5.349484f, 11.564559f, 2.136503f,
 1.685887f, 6.227582f, 1.285042f,
 1.923211f, 7.106903f, -0.544047f,
 2.256810f, 6.768631f, 0.577550f,
 2.918193f, 4.151465f, 0.041367f,
 5.751550f, 10.054109f, 1.226699f,
 5.320512f, 8.030457f, 0.490574f,
 6.047242f, 8.466267f, -1.147101f,
 6.454044f, 10.129699f, -0.911018f,
 8.007836f, 7.134078f, 1.301953f,
 7.474768f, 6.017872f, 0.770970f,
 7.954664f, 6.298755f, -0.302682f,
 8.491118f, 7.413306f, 0.229660f,
 3.321053f, 11.087569f, 0.819310f,
 3.399092f, 10.975689f, 3.136936f,
 3.101002f, 9.502994f, 0.657673f,
 3.249695f, 8.892995f, 2.400067f,
 1.108857f, 2.850328f, 0.913729f,
 1.115707f, 2.911662f, 2.793425f,
 2.225078f, 2.874166f, 1.243791f,
 2.230017f, 2.949374f, 2.661765f,
 1.029881f, 1.255036f, -0.835271f,
 0.889386f, -0.360198f, 3.127258f,
 2.383930f, 1.194231f, -0.685093f,
 2.384403f, -0.339168f, 3.076745f,
 0.606780f, 4.869415f, -0.725801f,
 1.626776f, 4.932827f, -0.528123f,
 1.654126f, 4.993954f, 0.470156f,
 0.490562f, 4.689809f, 0.437776f,
 2.165711f, 1.719438f, 1.367227f,
 2.197264f, 1.791426f, 0.051786f,
 1.104488f, 1.880029f, -0.169740f,
 1.073302f, 1.725305f, 1.441156f,
 9.018019f, 9.597463f, -4.797423f,
 11.686038f, 6.179644f, -4.723046f,
 5.281556f, 7.181294f, 3.933313f,
 8.086653f, 3.699769f, 4.048507f,
 -2.009076f, 9.393815f, 5.010775f,
 -1.513680f, 4.361625f, 8.258884f,
 -5.908004f, 1.509289f, 4.413904f,
 -6.465864f, 6.487960f, 1.203907f,
 -4.623303f, 10.540375f, 2.911834f,
 0.157086f, 13.198056f, 2.859616f,
 0.157086f, 13.198056f, 2.859616f,
 -1.904183f, 7.011290f, 0.091576f,
 -1.904183f, 7.011290f, 0.091576f,
 -4.623303f, 10.540375f, 2.911834f,
 -2.666987f, 4.328645f, -0.646421f,
 -1.904183f, 7.011290f, 0.091576f,
 -1.904183f, 7.011290f, 0.091576f,
 -2.666987f, 4.328645f, -0.646421f,
 0.055682f, 2.748167f, -0.104413f,
 -3.446032f, 3.877760f, 3.628368f,
 -4.410217f, 4.656457f, 4.154912f,
 -4.410217f, 4.656457f, 4.154912f,
 -3.446032f, 3.877760f, 3.628368f,
 -3.446032f, 3.877760f, 3.628368f,
 -3.842850f, 6.007440f, 1.541548f,
 -4.410217f, 4.656457f, 4.154912f,
 -4.410217f, 4.656457f, 4.154912f,
 -3.842850f, 6.007440f, 1.541548f,
 -2.482257f, 9.193862f, 0.817019f,
 -2.482257f, 9.193862f, 0.817019f,
 -1.007703f, 2.383289f, -0.533974f,
 -1.007703f, 2.383289f, -0.533974f,
 -1.104394f, 0.823989f, -1.425463f,
 -0.238099f, 4.924933f, -0.847930f,
 -1.007703f, 2.383289f, -0.533974f,
 -1.007703f, 2.383289f, -0.533974f,
 -2.197263f, 0.823444f, -1.187057f,
 -2.167677f, 1.164035f, 0.066408f,
 -2.167677f, 1.164035f, 0.066408f,
 -1.030584f, -0.005046f, -1.808417f,
 -1.104394f, 0.823989f, -1.425463f,
 -1.104394f, 0.823989f, -1.425463f,
 -2.197263f, 0.823444f, -1.187057f,
 -0.889387f, -0.006623f, 2.474327f,
 -1.030584f, -0.005046f, -1.808417f,
 -1.076426f, 1.138178f, 0.162627f,
 -1.076426f, 1.138178f, 0.162627f,
 -1.030584f, -0.005046f, -1.808417f,
 -1.104394f, 0.823989f, -1.425463f,
 -2.167677f, 1.164035f, 0.066408f,
 -1.076426f, 1.138178f, 0.162627f,
 -1.076426f, 1.138178f, 0.162627f,
 -0.889387f, -0.006623f, 2.474327f,
 -0.008413f, 6.210906f, 3.970302f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.191415f, 12.025270f, 5.415602f,
 0.210788f, 12.336196f, 3.075309f,
 0.210788f, 12.336196f, 3.075309f,
 0.191415f, 12.025270f, 5.415602f,
 -0.008413f, 6.210906f, 3.970302f,
 -0.008413f, 6.210906f, 3.970302f,
 0.101008f, 6.067029f, 0.570312f,
 0.157086f, 13.198056f, 2.859616f,
 0.198675f, 11.422856f, -0.840435f,
 0.198675f, 11.422856f, -0.840435f,
 5.349484f, 11.564559f, 2.136503f,
 0.157086f, 13.198056f, 2.859616f,
 0.157086f, 13.198056f, 2.859616f,
 0.390210f, 10.064568f, 5.077291f,
 0.388408f, 7.426573f, -1.224387f,
 0.198675f, 11.422856f, -0.840435f,
 0.198675f, 11.422856f, -0.840435f,
 -0.005536f, 6.024216f, 1.457118f,
 -0.005536f, 6.024216f, 1.457118f,
 0.068638f, 3.745659f, 2.511459f,
 5.349484f, 11.564559f, 2.136503f,
 2.256810f, 6.768631f, 0.577550f,
 2.256810f, 6.768631f, 0.577550f,
 0.388408f, 7.426573f, -1.224387f,
 0.388408f, 7.426573f, -1.224387f,
 0.188596f, 3.789604f, -1.971112f,
 0.390210f, 10.064568f, 5.077291f,
 -0.005536f, 6.024216f, 1.457118f,
 -0.005536f, 6.024216f, 1.457118f,
 2.918193f, 4.151465f, 0.041367f,
 2.256810f, 6.768631f, 0.577550f,
 2.256810f, 6.768631f, 0.577550f,
 0.068638f, 3.745659f, 2.511459f,
 0.055682f, 2.748167f, -0.104413f,
 0.055682f, 2.748167f, -0.104413f,
 2.918193f, 4.151465f, 0.041367f,
 0.055682f, 2.748167f, -0.104413f,
 0.188596f, 3.789604f, -1.971112f,
 0.188596f, 3.789604f, -1.971112f,
 8.491118f, 7.413306f, 0.229660f,
 8.491118f, 7.413306f, 0.229660f,
 7.954664f, 6.298755f, -0.302682f,
 7.954664f, 6.298755f, -0.302682f,
 7.954664f, 6.298755f, -0.302682f,
 6.047242f, 8.466267f, -1.147101f,
 8.491118f, 7.413306f, 0.229660f,
 8.491118f, 7.413306f, 0.229660f,
 3.101002f, 9.502994f, 0.657673f,
 3.101002f, 9.502994f, 0.657673f,
 6.047242f, 8.466267f, -1.147101f,
 1.104488f, 1.880029f, -0.169740f,
 1.108857f, 2.850328f, 0.913729f,
 1.108857f, 2.850328f, 0.913729f,
 1.108857f, 2.850328f, 0.913729f,
 1.108857f, 2.850328f, 0.913729f,
 0.606780f, 4.869415f, -0.725801f,
 2.165711f, 1.719438f, 1.367227f,
 2.165711f, 1.719438f, 1.367227f,
 2.197264f, 1.791426f, 0.051786f,
 2.197264f, 1.791426f, 0.051786f,
 1.104488f, 1.880029f, -0.169740f,
 1.104488f, 1.880029f, -0.169740f,
 1.029881f, 1.255036f, -0.835271f,
 1.104488f, 1.880029f, -0.169740f,
 1.029881f, 1.255036f, -0.835271f,
 1.073302f, 1.725305f, 1.441156f,
 1.073302f, 1.725305f, 1.441156f,
 1.029881f, 1.255036f, -0.835271f,
 0.889386f, -0.360198f, 3.127258f,
 2.165711f, 1.719438f, 1.367227f,
 1.073302f, 1.725305f, 1.441156f,
 1.073302f, 1.725305f, 1.441156f,
 0.889386f, -0.360198f, 3.127258f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.545798f, -0.220801f, 0.808302f},
{ -0.583437f, -0.334521f, 0.740065f},
{ -0.590460f, -0.359527f, 0.722563f},
{ -0.598298f, -0.389785f, 0.700076f},
{ 0.487625f, -0.217053f, 0.845642f},
{ 0.539263f, -0.359209f, 0.761685f},
{ 0.530920f, -0.333696f, 0.778955f},
{ 0.548897f, -0.390509f, 0.739064f},
{ -0.015492f, -0.929180f, 0.369303f},
{ -0.025992f, -0.189117f, 0.981610f},
{ -0.753110f, -0.441486f, 0.487766f},
{ -0.748325f, -0.140432f, 0.648297f},
{ -0.684470f, 0.553317f, 0.474702f},
{ -0.014377f, 0.788224f, 0.615220f},
{ -0.983765f, -0.136630f, 0.116358f},
{ -0.725149f, 0.674702f, 0.137610f},
{ -0.002761f, 0.987153f, 0.159752f},
{ -0.857020f, -0.512649f, 0.052047f},
{ 0.032158f, -0.998545f, 0.043290f},
{ -0.073956f, 0.995657f, 0.056556f},
{ -0.127347f, 0.659390f, -0.740937f},
{ -0.878115f, 0.458129f, 0.137957f},
{ -0.789619f, 0.204319f, -0.578581f},
{ -0.420075f, -0.232406f, 0.877225f},
{ 0.055916f, -0.118549f, 0.991373f},
{ 0.136383f, 0.183350f, -0.973541f},
{ -0.342339f, 0.135245f, -0.929792f},
{ -0.885639f, -0.461122f, 0.054865f},
{ -0.018973f, -0.511639f, 0.858991f},
{ -0.097290f, -0.421833f, 0.901439f},
{ -0.742707f, -0.326235f, 0.584771f},
{ -0.672608f, -0.417518f, 0.610964f},
{ -0.411019f, 0.104881f, -0.905573f},
{ -0.860557f, -0.459191f, -0.220421f},
{ 0.067565f, -0.444753f, -0.893101f},
{ -0.003984f, -0.999330f, -0.036377f},
{ 0.056336f, 0.317803f, 0.946482f},
{ -0.922377f, -0.268914f, 0.277318f},
{ 0.941237f, -0.244363f, 0.233152f},
{ 0.145461f, -0.851099f, -0.504452f},
{ 0.077267f, -0.559726f, -0.825067f},
{ -0.961783f, 0.072829f, -0.263949f},
{ -0.627267f, 0.480047f, 0.613263f},
{ -0.842276f, 0.439958f, -0.311463f},
{ -0.837018f, 0.434919f, 0.332035f},
{ 0.996170f, -0.080627f, 0.033839f},
{ 0.009007f, -0.106367f, -0.994286f},
{ 0.714869f, -0.150780f, 0.682809f},
{ -0.862873f, 0.211588f, -0.459000f},
{ -0.587344f, 0.057415f, -0.807299f},
{ 0.747965f, -0.097302f, -0.656567f},
{ 0.619351f, -0.278225f, -0.734163f},
{ -0.775413f, 0.454483f, 0.438383f},
{ -0.729290f, 0.092784f, 0.677885f},
{ 0.653338f, -0.150959f, 0.741863f},
{ 0.865139f, -0.020536f, 0.501112f},
{ 0.949170f, 0.198288f, 0.244457f},
{ 0.575639f, 0.407802f, -0.708758f},
{ -0.620920f, 0.458158f, -0.636042f},
{ -0.935164f, 0.253345f, 0.247559f},
{ -0.000070f, -1.000000f, -0.000366f},
{ 0.000013f, -1.000000f, -0.000396f},
{ -0.000048f, -1.000000f, -0.000374f},
{ 0.000034f, -1.000000f, -0.000403f},
{ -0.868702f, 0.343271f, -0.357103f},
{ -0.368429f, 0.845229f, 0.387101f},
{ 0.839177f, 0.283885f, -0.463887f},
{ 0.349345f, 0.850607f, 0.392972f},
{ 0.678044f, -0.518032f, 0.521440f},
{ 0.716177f, -0.150845f, 0.681423f},
{ 0.634109f, 0.568385f, 0.524256f},
{ 0.623158f, 0.750092f, 0.221441f},
{ 0.973362f, -0.118229f, 0.196439f},
{ 0.788986f, -0.607052f, 0.094808f},
{ 0.813998f, 0.560630f, 0.151991f},
{ 0.672248f, 0.170516f, -0.720421f},
{ 0.597363f, -0.239509f, 0.765371f},
{ 0.420842f, -0.050353f, -0.905735f},
{ 0.900121f, -0.433965f, -0.038176f},
{ 0.389263f, -0.552883f, 0.736746f},
{ 0.625957f, -0.310438f, 0.715407f},
{ 0.832787f, -0.553589f, 0.002179f},
{ 0.580756f, -0.001177f, -0.814077f},
{ 0.294644f, 0.021862f, 0.955357f},
{ -0.398492f, -0.848918f, 0.347191f},
{ 0.912201f, 0.376701f, -0.161199f},
{ 0.071771f, -0.620272f, -0.781096f},
{ 0.417895f, 0.745109f, -0.519785f},
{ -0.227852f, -0.251047f, -0.940775f},
{ 0.669270f, 0.351352f, 0.654698f},
{ 0.578492f, 0.495975f, 0.647577f},
{ 0.074661f, 0.889279f, -0.451229f},
{ -0.453480f, -0.820907f, 0.347085f},
{ -0.594232f, -0.327308f, -0.734682f},
{ 0.292320f, -0.675552f, 0.676889f},
{ -0.232058f, -0.647283f, -0.726068f},
{ 0.537110f, -0.441939f, -0.718473f},
{ -0.805821f, -0.268990f, -0.527538f},
{ 0.930355f, 0.090038f, -0.355433f},
{ 0.561089f, 0.707654f, 0.429425f},
{ 0.584583f, 0.275493f, 0.763130f},
{ -0.911400f, 0.225313f, 0.344360f},
{ -0.520659f, 0.173744f, 0.835899f},
{ -0.569143f, 0.638002f, -0.518682f},
{ -0.919048f, 0.136585f, 0.369725f},
{ 0.640600f, 0.624232f, -0.447175f},
{ 0.904409f, 0.147135f, 0.400495f},
{ 0.000272f, -0.926024f, -0.377465f},
{ 0.000274f, -0.926024f, -0.377465f},
{ 0.000278f, -0.926024f, -0.377463f},
{ 0.000280f, -0.926025f, -0.377463f},
{ 0.404676f, 0.601156f, 0.689093f},
{ 0.886261f, 0.424181f, -0.186044f},
{ -0.874299f, 0.389577f, -0.289536f},
{ -0.406974f, 0.595725f, 0.692447f},
{ -0.701122f, -0.556997f, -0.445177f},
{ -0.690982f, -0.565762f, -0.449953f},
{ -0.697350f, -0.560285f, -0.446972f},
{ -0.687410f, -0.568795f, -0.451598f},
{ -0.727300f, 0.320222f, 0.607036f},
{ -0.729745f, 0.314581f, 0.607051f},
{ -0.729488f, 0.315176f, 0.607051f},
{ -0.731972f, 0.309375f, 0.607046f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagWalk3.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105