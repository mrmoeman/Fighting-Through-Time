package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannarune {

static String TextureName = "joannarun5.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.293293f, 0.863107f, -0.730913f,
 0.867029f, 0.889324f, -0.863350f,
 1.000721f, 0.862025f, -0.255298f,
 0.424255f, 0.843741f, -0.137655f,
 0.282650f, 0.257735f, -0.881554f,
 0.862169f, 0.252716f, -0.985752f,
 1.226378f, 0.224013f, 1.106781f,
 0.646102f, 0.224201f, 1.206459f,
 0.063619f, 3.818694f, -0.472216f,
 0.831725f, 3.869922f, -0.484220f,
 1.000648f, 4.013786f, 0.360391f,
 0.256046f, 3.982741f, 0.482959f,
 0.566782f, 2.614748f, 0.637242f,
 1.071631f, 2.627508f, 0.535994f,
 0.947538f, 2.684651f, -0.043725f,
 0.432212f, 2.690188f, 0.051924f,
 1.141171f, 8.537184f, 0.890318f,
 0.543858f, 6.715630f, 0.812296f,
 0.033385f, 7.712414f, 0.362930f,
 0.497269f, 8.480086f, 0.496602f,
 0.484787f, 8.186627f, 1.943248f,
 0.894465f, 7.266192f, 0.143844f,
 0.413647f, 7.612520f, -0.387605f,
 -0.070693f, 5.920703f, -0.123314f,
 0.645158f, 5.785483f, -0.076096f,
 0.801375f, 5.454517f, 0.397403f,
 0.163580f, 5.207815f, 0.751292f,
 0.472163f, 9.477447f, 2.072885f,
 1.115413f, 9.246979f, 1.725645f,
 1.117807f, 8.393530f, 1.632300f,
 0.894528f, 7.990188f, 1.078434f,
 1.501799f, 7.216846f, -0.105386f,
 0.517707f, 9.603701f, 0.652508f,
 1.139215f, 9.313422f, 0.968605f,
 0.730360f, 8.177037f, 0.625983f,
 1.339077f, 7.214486f, -0.491951f,
 1.454115f, 7.962780f, -0.018867f,
 1.222261f, 8.050775f, -0.422832f,
 1.355751f, 6.251466f, -0.291771f,
 1.701368f, 6.299197f, -0.460647f,
 1.627159f, 6.096056f, -0.741936f,
 1.289776f, 6.023541f, -0.612472f,
 0.515379f, 7.778988f, 1.464683f,
 0.521764f, 8.101810f, 0.503381f,
 2.201859f, 6.226455f, 1.362103f,
 2.566366f, 6.347291f, 0.754046f,
 2.601886f, 5.867418f, 0.564914f,
 2.267970f, 5.513542f, 0.958800f,
 -0.323890f, 3.157449f, -1.081730f,
 1.401050f, 3.832867f, 0.502235f,
 1.250634f, 3.566537f, -0.821187f,
 0.110817f, 3.645971f, 0.927006f,
 0.122036f, 8.000443f, 1.668051f,
 0.634977f, 7.483853f, 1.692309f,
 0.041281f, 7.894760f, 2.108264f,
 0.606530f, 7.398426f, 2.101543f,
 -0.148037f, 9.246444f, 1.686501f,
 -0.124217f, 9.312734f, 0.930309f,
 -0.567284f, 5.449925f, 0.769736f,
 -0.665931f, 5.784913f, 0.276027f,
 -0.078281f, 7.012354f, 1.385024f,
 -0.480311f, 7.261943f, 1.656878f,
 -0.090963f, 8.060598f, 1.044536f,
 0.084510f, 7.890050f, 1.416603f,
 -0.145568f, 8.393183f, 1.592590f,
 -0.121994f, 8.536571f, 0.851823f,
 2.078978f, 6.963569f, 0.147936f,
 2.584693f, 6.556386f, 0.652477f,
 2.232489f, 7.391171f, 0.707582f,
 2.565725f, 7.099852f, 0.979007f,
 1.289608f, 6.703876f, 1.814567f,
 1.416777f, 6.513476f, 2.178856f,
 1.619762f, 6.805649f, 2.276475f,
 1.518962f, 6.987669f, 1.956393f,
 -1.318910f, 4.307007f, 1.109503f,
 -1.514039f, 3.540863f, -0.002394f,
 -0.304281f, 1.507786f, 0.452946f,
 -0.885698f, 1.508730f, 0.371077f,
 -0.982248f, 1.465699f, 0.985194f,
 -0.400154f, 1.484963f, 1.069715f,
 -0.277593f, 0.903227f, 0.301710f,
 -0.857041f, 0.903566f, 0.207386f,
 -1.220659f, 0.780052f, 2.296570f,
 -0.640382f, 0.780064f, 2.395595f,
 -0.158410f, 3.704700f, 0.216439f,
 -0.923029f, 3.788282f, 0.228067f,
 -1.033287f, 4.383663f, 0.856170f,
 -0.283056f, 4.384909f, 0.943856f,
 -0.614095f, 3.276146f, 1.831620f,
 -1.123370f, 3.267098f, 1.771118f,
 -1.043948f, 3.164723f, 1.252080f,
 -0.526986f, 3.164130f, 1.251467f,
 2.206531f, 12.093369f, 1.017391f,
 2.104395f, 11.805764f, 2.128932f,
 2.219072f, 4.867801f, -0.130056f,
 2.059517f, 4.704072f, 0.914734f,
 0.432212f, 2.690188f, 0.051924f,
 0.432212f, 2.690188f, 0.051924f,
 0.063619f, 3.818694f, -0.472216f,
 0.293293f, 0.863107f, -0.730913f,
 0.282650f, 0.257735f, -0.881554f,
 0.282650f, 0.257735f, -0.881554f,
 0.293293f, 0.863107f, -0.730913f,
 0.282650f, 0.257735f, -0.881554f,
 0.424255f, 0.843741f, -0.137655f,
 0.424255f, 0.843741f, -0.137655f,
 0.282650f, 0.257735f, -0.881554f,
 0.646102f, 0.224201f, 1.206459f,
 0.424255f, 0.843741f, -0.137655f,
 0.646102f, 0.224201f, 1.206459f,
 0.646102f, 0.224201f, 1.206459f,
 1.000721f, 0.862025f, -0.255298f,
 1.000721f, 0.862025f, -0.255298f,
 1.000721f, 0.862025f, -0.255298f,
 1.000721f, 0.862025f, -0.255298f,
 0.867029f, 0.889324f, -0.863350f,
 0.867029f, 0.889324f, -0.863350f,
 0.432212f, 2.690188f, 0.051924f,
 0.432212f, 2.690188f, 0.051924f,
 0.867029f, 0.889324f, -0.863350f,
 0.293293f, 0.863107f, -0.730913f,
 0.894528f, 7.990188f, 1.078434f,
 0.894528f, 7.990188f, 1.078434f,
 0.894465f, 7.266192f, 0.143844f,
 0.894465f, 7.266192f, 0.143844f,
 0.894528f, 7.990188f, 1.078434f,
 0.894528f, 7.990188f, 1.078434f,
 0.730360f, 8.177037f, 0.625983f,
 0.730360f, 8.177037f, 0.625983f,
 0.730360f, 8.177037f, 0.625983f,
 0.894528f, 7.990188f, 1.078434f,
 0.894528f, 7.990188f, 1.078434f,
 0.894465f, 7.266192f, 0.143844f,
 0.413647f, 7.612520f, -0.387605f,
 1.355751f, 6.251466f, -0.291771f,
 1.355751f, 6.251466f, -0.291771f,
 0.413647f, 7.612520f, -0.387605f,
 0.413647f, 7.612520f, -0.387605f,
 0.894465f, 7.266192f, 0.143844f,
 2.201859f, 6.226455f, 1.362103f,
 2.201859f, 6.226455f, 1.362103f,
 1.355751f, 6.251466f, -0.291771f,
 2.267970f, 5.513542f, 0.958800f,
 2.267970f, 5.513542f, 0.958800f,
 1.355751f, 6.251466f, -0.291771f,
 0.413647f, 7.612520f, -0.387605f,
 0.413647f, 7.612520f, -0.387605f,
 0.730360f, 8.177037f, 0.625983f,
 0.730360f, 8.177037f, 0.625983f,
 2.267970f, 5.513542f, 0.958800f,
 -0.323890f, 3.157449f, -1.081730f,
 1.250634f, 3.566537f, -0.821187f,
 0.110817f, 3.645971f, 0.927006f,
 0.110817f, 3.645971f, 0.927006f,
 1.250634f, 3.566537f, -0.821187f,
 1.401050f, 3.832867f, 0.502235f,
 0.472163f, 9.477447f, 2.072885f,
 0.517707f, 9.603701f, 0.652508f,
 0.517707f, 9.603701f, 0.652508f,
 0.543858f, 6.715630f, 0.812296f,
 0.084510f, 7.890050f, 1.416603f,
 0.543858f, 6.715630f, 0.812296f,
 0.515379f, 7.778988f, 1.464683f,
 0.084510f, 7.890050f, 1.416603f,
 -0.078281f, 7.012354f, 1.385024f,
 -0.078281f, 7.012354f, 1.385024f,
 0.515379f, 7.778988f, 1.464683f,
 0.484787f, 8.186627f, 1.943248f,
 0.084510f, 7.890050f, 1.416603f,
 0.484787f, 8.186627f, 1.943248f,
 0.084510f, 7.890050f, 1.416603f,
 0.521764f, 8.101810f, 0.503381f,
 -0.090963f, 8.060598f, 1.044536f,
 0.497269f, 8.480086f, 0.496602f,
 -0.090963f, 8.060598f, 1.044536f,
 0.497269f, 8.480086f, 0.496602f,
 -0.090963f, 8.060598f, 1.044536f,
 0.084510f, 7.890050f, 1.416603f,
 0.084510f, 7.890050f, 1.416603f,
 0.163580f, 5.207815f, 0.751292f,
 0.543858f, 6.715630f, 0.812296f,
 0.543858f, 6.715630f, 0.812296f,
 -0.078281f, 7.012354f, 1.385024f,
 1.289608f, 6.703876f, 1.814567f,
 -0.480311f, 7.261943f, 1.656878f,
 1.289608f, 6.703876f, 1.814567f,
 -0.480311f, 7.261943f, 1.656878f,
 -0.480311f, 7.261943f, 1.656878f,
 -0.078281f, 7.012354f, 1.385024f,
 2.078978f, 6.963569f, 0.147936f,
 2.078978f, 6.963569f, 0.147936f,
 2.584693f, 6.556386f, 0.652477f,
 1.289608f, 6.703876f, 1.814567f,
 2.584693f, 6.556386f, 0.652477f,
 1.289608f, 6.703876f, 1.814567f,
 -0.480311f, 7.261943f, 1.656878f,
 -0.480311f, 7.261943f, 1.656878f,
 -0.090963f, 8.060598f, 1.044536f,
 0.033385f, 7.712414f, 0.362930f,
 -0.090963f, 8.060598f, 1.044536f,
 0.521764f, 8.101810f, 0.503381f,
 0.033385f, 7.712414f, 0.362930f,
 2.584693f, 6.556386f, 0.652477f,
 0.497269f, 8.480086f, 0.496602f,
 0.517707f, 9.603701f, 0.652508f,
 0.497269f, 8.480086f, 0.496602f,
 0.472163f, 9.477447f, 2.072885f,
 0.484787f, 8.186627f, 1.943248f,
 0.484787f, 8.186627f, 1.943248f,
 -0.070693f, 5.920703f, -0.123314f,
 0.033385f, 7.712414f, 0.362930f,
 -0.070693f, 5.920703f, -0.123314f,
 -0.323890f, 3.157449f, -1.081730f,
 -0.070693f, 5.920703f, -0.123314f,
 -0.070693f, 5.920703f, -0.123314f,
 0.110817f, 3.645971f, 0.927006f,
 0.163580f, 5.207815f, 0.751292f,
 0.163580f, 5.207815f, 0.751292f,
 -0.323890f, 3.157449f, -1.081730f,
 0.110817f, 3.645971f, 0.927006f,
 -1.514039f, 3.540863f, -0.002394f,
 0.110817f, 3.645971f, 0.927006f,
 -1.318910f, 4.307007f, 1.109503f,
 -1.514039f, 3.540863f, -0.002394f,
 -0.526986f, 3.164130f, 1.251467f,
 -0.158410f, 3.704700f, 0.216439f,
 -0.526986f, 3.164130f, 1.251467f,
 -0.304281f, 1.507786f, 0.452946f,
 -0.277593f, 0.903227f, 0.301710f,
 -0.277593f, 0.903227f, 0.301710f,
 -0.304281f, 1.507786f, 0.452946f,
 -0.400154f, 1.484963f, 1.069715f,
 -0.277593f, 0.903227f, 0.301710f,
 -0.400154f, 1.484963f, 1.069715f,
 -0.640382f, 0.780064f, 2.395595f,
 -0.277593f, 0.903227f, 0.301710f,
 -0.400154f, 1.484963f, 1.069715f,
 -0.640382f, 0.780064f, 2.395595f,
 -0.640382f, 0.780064f, 2.395595f,
 -0.982248f, 1.465699f, 0.985194f,
 -0.982248f, 1.465699f, 0.985194f,
 -0.982248f, 1.465699f, 0.985194f,
 -0.885698f, 1.508730f, 0.371077f,
 -0.982248f, 1.465699f, 0.985194f,
 -0.526986f, 3.164130f, 1.251467f,
 -0.885698f, 1.508730f, 0.371077f,
 -0.526986f, 3.164130f, 1.251467f,
 -0.304281f, 1.507786f, 0.452946f,
 -0.885698f, 1.508730f, 0.371077f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.547186f, -0.817378f, -0.180225f},
{ 0.464149f, -0.811244f, -0.355597f},
{ -0.413897f, -0.667049f, 0.619463f},
{ 0.609569f, -0.658563f, 0.441271f},
{ -0.611670f, -0.058725f, 0.788930f},
{ -0.474515f, -0.179074f, 0.861840f},
{ 0.826649f, 0.118255f, 0.550151f},
{ 0.817393f, -0.112177f, 0.565053f},
{ -0.768567f, -0.458340f, -0.446350f},
{ -0.922329f, -0.062602f, -0.381301f},
{ 0.719753f, 0.102140f, -0.686676f},
{ 0.643641f, -0.249028f, -0.723679f},
{ -0.792749f, 0.259097f, -0.551740f},
{ 0.475713f, 0.299756f, -0.826948f},
{ 0.974223f, 0.106438f, 0.198900f},
{ -0.818044f, 0.104518f, 0.565579f},
{ 0.934993f, 0.191745f, 0.298365f},
{ 0.801292f, -0.031337f, 0.597453f},
{ -0.025231f, 0.728890f, -0.684165f},
{ 0.221542f, 0.163970f, -0.961266f},
{ -0.026140f, 0.636538f, 0.770802f},
{ 0.733561f, 0.454679f, 0.505129f},
{ 0.026237f, 0.742932f, -0.668853f},
{ 0.796437f, 0.432325f, -0.422828f},
{ 0.824958f, 0.126687f, 0.550813f},
{ 0.593572f, 0.184786f, -0.783279f},
{ 0.836609f, -0.460664f, 0.296436f},
{ -0.524151f, 0.297365f, -0.798022f},
{ 0.165582f, 0.902096f, -0.398504f},
{ 0.872346f, -0.371039f, 0.318343f},
{ 0.701454f, -0.231984f, 0.673904f},
{ 0.375895f, -0.554844f, 0.742194f},
{ 0.031512f, -0.362796f, 0.931336f},
{ 0.810066f, -0.329988f, 0.484666f},
{ -0.411023f, 0.284778f, -0.866003f},
{ -0.062491f, 0.049361f, -0.996824f},
{ 0.895465f, -0.091207f, -0.435688f},
{ 0.244979f, 0.074215f, 0.966684f},
{ -0.615687f, 0.300687f, 0.728366f},
{ -0.415450f, -0.855888f, 0.307988f},
{ 0.443659f, 0.895757f, 0.028062f},
{ 0.736158f, -0.501159f, -0.454875f},
{ -0.721890f, -0.146398f, 0.676346f},
{ -0.539414f, -0.685527f, -0.488964f},
{ 0.268970f, -0.514303f, -0.814339f},
{ 0.720414f, 0.664554f, -0.198423f},
{ -0.867848f, 0.313198f, -0.385677f},
{ 0.902974f, -0.224474f, 0.366401f},
{ 0.604460f, -0.228672f, -0.763111f},
{ -0.414393f, 0.296526f, -0.860436f},
{ -0.254837f, -0.354166f, -0.899791f},
{ 0.141139f, -0.655003f, 0.742328f},
{ 0.559745f, 0.737472f, -0.377917f},
{ -0.515178f, 0.344446f, 0.784824f},
{ 0.476754f, 0.438251f, -0.761999f},
{ -0.148744f, 0.037293f, 0.988172f},
{ -0.762969f, 0.452177f, 0.461968f},
{ -0.771481f, 0.440760f, -0.458855f},
{ -0.321686f, 0.208763f, 0.923545f},
{ 0.317742f, -0.671758f, 0.669164f},
{ -0.797827f, 0.444867f, -0.406898f},
{ -0.991047f, -0.004770f, 0.133432f},
{ -0.915883f, 0.342306f, -0.209728f},
{ 0.023717f, -0.610069f, 0.791993f},
{ -0.873925f, -0.209140f, 0.438766f},
{ -0.843310f, -0.095477f, -0.528879f},
{ -0.599865f, -0.321299f, -0.732754f},
{ -0.244423f, 0.947256f, -0.207277f},
{ 0.277162f, -0.949546f, -0.146777f},
{ 0.849119f, 0.203578f, 0.487394f},
{ -0.425558f, -0.610567f, -0.667913f},
{ -0.022428f, -0.874346f, 0.484784f},
{ 0.552065f, -0.031732f, 0.833197f},
{ 0.085164f, 0.995263f, 0.046897f},
{ -0.734359f, -0.043906f, 0.677340f},
{ -0.865425f, -0.319887f, -0.385633f},
{ 0.563209f, -0.800581f, -0.204611f},
{ 0.435470f, -0.688867f, 0.579507f},
{ -0.451895f, -0.806322f, -0.381623f},
{ -0.594159f, -0.696723f, 0.401934f},
{ 0.617803f, 0.347657f, 0.705304f},
{ -0.739932f, 0.462262f, 0.488687f},
{ 0.432159f, 0.058648f, 0.899888f},
{ -0.655819f, 0.022633f, 0.754579f},
{ 0.706818f, -0.698310f, -0.113012f},
{ 0.944127f, -0.122282f, -0.306059f},
{ -0.856396f, -0.043760f, -0.514462f},
{ -0.687066f, -0.595375f, -0.416495f},
{ 0.738643f, 0.324811f, -0.590681f},
{ -0.540812f, 0.298129f, -0.786538f},
{ -0.957151f, 0.109945f, 0.267908f},
{ 0.827277f, 0.102886f, 0.552293f},
{ 0.996015f, -0.012300f, 0.088338f},
{ 0.995561f, -0.013857f, 0.093098f},
{ 0.989742f, -0.029177f, 0.139854f},
{ 0.988776f, -0.031229f, 0.146107f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannarun5.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117