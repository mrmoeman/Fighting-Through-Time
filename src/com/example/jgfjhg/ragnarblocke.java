package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarblocke {

static String TextureName = "RagBlock5.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.282423f, 9.589572f, 5.108990f,
 1.406976f, 10.373853f, 5.882257f,
 0.347688f, 14.256423f, 7.235988f,
 -1.635210f, 12.186612f, 5.306116f,
 3.194837f, 9.589903f, 4.264638f,
 2.015099f, 10.373575f, 5.740613f,
 3.573470f, 14.254377f, 6.480501f,
 4.483243f, 12.195999f, 3.724453f,
 0.193984f, 10.557192f, 5.982174f,
 0.258366f, 9.283590f, 6.331753f,
 0.383188f, 7.234467f, 5.403708f,
 1.350494f, 5.459987f, 4.573898f,
 1.861643f, 9.036654f, 6.511065f,
 1.746531f, 11.349886f, 5.985765f,
 0.736866f, 9.174726f, 5.357362f,
 0.156951f, 10.554411f, 5.038034f,
 1.263588f, 11.683607f, 3.729347f,
 -0.294148f, 5.278967f, 1.627967f,
 -0.252910f, 6.792577f, 3.751700f,
 -2.426959f, 3.941645f, 3.176832f,
 -2.947021f, 4.320879f, 0.581447f,
 0.245041f, 9.480548f, 6.481661f,
 -3.721904f, 8.097894f, 5.333634f,
 2.969029f, 9.428715f, 4.804984f,
 -1.565645f, 10.747220f, 1.034762f,
 -0.909461f, 2.755011f, -0.025347f,
 1.634909f, 3.092229f, 2.407468f,
 -2.511383f, 10.234914f, 6.913350f,
 1.025147f, 12.539147f, 3.673652f,
 -1.454258f, 5.525258f, 2.910441f,
 0.151897f, 5.220556f, 2.400773f,
 -1.185565f, 6.667182f, 0.088416f,
 -2.329733f, 6.432152f, 1.323298f,
 -2.225595f, 6.106996f, 2.478904f,
 -3.276970f, 3.352769f, 2.024670f,
 0.476618f, 1.964015f, 1.023668f,
 -2.034956f, 8.736892f, 7.080267f,
 -0.527617f, 7.184029f, 6.731497f,
 -1.666949f, 5.925621f, 7.439616f,
 -3.071103f, 6.886673f, 7.755642f,
 0.537875f, 7.582751f, 9.454163f,
 1.313370f, 6.601149f, 8.967752f,
 0.575722f, 5.780715f, 9.437764f,
 -0.210828f, 6.759815f, 9.921663f,
 -2.249491f, 9.871445f, 4.566211f,
 -0.498285f, 9.829897f, 5.995213f,
 -2.055736f, 8.353560f, 4.073459f,
 -0.699493f, 7.747558f, 5.178425f,
 -1.213485f, 2.138433f, 2.357328f,
 -1.067926f, 2.014544f, 4.279777f,
 -2.306980f, 1.983976f, 2.810374f,
 -2.190066f, 1.913655f, 4.243639f,
 -1.029522f, -0.001080f, 0.870844f,
 -0.889299f, -0.006621f, 5.156826f,
 -2.383745f, -0.004569f, 1.034580f,
 -2.383952f, -0.006663f, 5.102016f,
 -1.312524f, 4.132751f, 0.701624f,
 -2.155788f, 4.268482f, 1.241132f,
 -1.948750f, 4.260969f, 2.232160f,
 -0.744835f, 3.919928f, 1.805218f,
 -2.123464f, 1.025240f, 2.800415f,
 -2.197340f, 0.823099f, 1.495849f,
 -1.104777f, 0.826622f, 1.255803f,
 -1.022881f, 1.120351f, 2.824064f,
 3.158798f, 10.557621f, 5.277884f,
 3.233052f, 9.282919f, 5.642510f,
 2.708693f, 7.234744f, 4.866019f,
 3.145361f, 9.664257f, 2.463243f,
 2.499723f, 11.029509f, 2.227403f,
 1.801865f, 6.977269f, 1.999210f,
 1.891860f, 4.243975f, -0.118702f,
 -0.172847f, 4.520123f, -0.722997f,
 4.249856f, 9.287826f, 1.832798f,
 1.975716f, 9.670206f, -2.267601f,
 4.189761f, 11.038699f, -0.551591f,
 1.396443f, 5.525244f, 1.266909f,
 0.451128f, 6.435080f, -0.238502f,
 1.407692f, 6.107151f, 0.382587f,
 0.941900f, 3.957898f, -1.217151f,
 4.896990f, 8.226412f, -1.091098f,
 3.848288f, 6.362344f, -1.724769f,
 2.726435f, 7.384238f, -2.790995f,
 3.327982f, 8.952530f, -2.546398f,
 5.571656f, 6.077183f, -4.127363f,
 4.735097f, 5.029922f, -4.247165f,
 3.997851f, 5.700269f, -4.935688f,
 4.839721f, 6.744637f, -4.816251f,
 1.682975f, 10.671084f, -0.159453f,
 3.467972f, 10.576619f, 1.336415f,
 1.492535f, 9.074878f, -0.190717f,
 2.925328f, 8.477294f, 0.823237f,
 1.316819f, 1.861581f, -1.258518f,
 3.182076f, 2.459015f, -1.300070f,
 1.413661f, 2.540587f, -2.150332f,
 2.820570f, 3.038363f, -2.187149f,
 0.398702f, -0.012277f, -1.984181f,
 4.675199f, -0.006598f, -1.835636f,
 0.556337f, -0.002247f, -3.335546f,
 4.620333f, -0.006220f, -3.330466f,
 -0.517559f, 4.076220f, 0.284841f,
 0.327577f, 4.234397f, -0.098892f,
 1.136374f, 4.210953f, 0.387023f,
 0.353742f, 3.764190f, 1.164583f,
 2.149912f, 1.444480f, -3.002922f,
 1.013597f, 0.824203f, -3.143257f,
 0.777771f, 0.816457f, -2.052022f,
 2.353028f, 1.138044f, -2.010011f,
 0.797655f, 10.199437f, -6.228076f,
 1.620726f, 7.651810f, -9.816104f,
 6.834377f, 4.676553f, -0.833922f,
 7.673424f, 2.211668f, -4.417782f,
 0.061355f, 10.654124f, 6.230574f,
 4.176720f, 9.111803f, 10.341102f,
 0.075885f, 4.772280f, 12.736979f,
 -4.029832f, 6.215393f, 8.657002f,
 -2.511383f, 10.234914f, 6.913350f,
 1.025147f, 12.539147f, 3.673652f,
 1.025147f, 12.539147f, 3.673652f,
 -2.225595f, 6.106996f, 2.478904f,
 -2.225595f, 6.106996f, 2.478904f,
 -2.511383f, 10.234914f, 6.913350f,
 -3.276970f, 3.352769f, 2.024670f,
 -2.225595f, 6.106996f, 2.478904f,
 -2.225595f, 6.106996f, 2.478904f,
 -3.276970f, 3.352769f, 2.024670f,
 0.476618f, 1.964015f, 1.023668f,
 0.575722f, 5.780715f, 9.437764f,
 -0.210828f, 6.759815f, 9.921663f,
 -0.210828f, 6.759815f, 9.921663f,
 0.575722f, 5.780715f, 9.437764f,
 0.575722f, 5.780715f, 9.437764f,
 -1.666949f, 5.925621f, 7.439616f,
 -0.210828f, 6.759815f, 9.921663f,
 -0.210828f, 6.759815f, 9.921663f,
 -1.666949f, 5.925621f, 7.439616f,
 -2.055736f, 8.353560f, 4.073459f,
 -2.055736f, 8.353560f, 4.073459f,
 -1.213485f, 2.138433f, 2.357328f,
 -1.213485f, 2.138433f, 2.357328f,
 -1.104777f, 0.826622f, 1.255803f,
 -1.312524f, 4.132751f, 0.701624f,
 -1.213485f, 2.138433f, 2.357328f,
 -1.213485f, 2.138433f, 2.357328f,
 -2.197340f, 0.823099f, 1.495849f,
 -2.123464f, 1.025240f, 2.800415f,
 -2.123464f, 1.025240f, 2.800415f,
 -1.029522f, -0.001080f, 0.870844f,
 -1.104777f, 0.826622f, 1.255803f,
 -1.104777f, 0.826622f, 1.255803f,
 -2.197340f, 0.823099f, 1.495849f,
 -0.889299f, -0.006621f, 5.156826f,
 -1.029522f, -0.001080f, 0.870844f,
 -1.022881f, 1.120351f, 2.824064f,
 -1.022881f, 1.120351f, 2.824064f,
 -1.029522f, -0.001080f, 0.870844f,
 -1.104777f, 0.826622f, 1.255803f,
 -2.123464f, 1.025240f, 2.800415f,
 -1.022881f, 1.120351f, 2.824064f,
 -1.022881f, 1.120351f, 2.824064f,
 -0.889299f, -0.006621f, 5.156826f,
 1.350494f, 5.459987f, 4.573898f,
 1.861643f, 9.036654f, 6.511065f,
 1.861643f, 9.036654f, 6.511065f,
 1.861643f, 9.036654f, 6.511065f,
 1.861643f, 9.036654f, 6.511065f,
 1.746531f, 11.349886f, 5.985765f,
 1.263588f, 11.683607f, 3.729347f,
 1.263588f, 11.683607f, 3.729347f,
 1.746531f, 11.349886f, 5.985765f,
 1.350494f, 5.459987f, 4.573898f,
 1.350494f, 5.459987f, 4.573898f,
 -0.294148f, 5.278967f, 1.627967f,
 1.025147f, 12.539147f, 3.673652f,
 -1.565645f, 10.747220f, 1.034762f,
 -1.565645f, 10.747220f, 1.034762f,
 4.189761f, 11.038699f, -0.551591f,
 1.025147f, 12.539147f, 3.673652f,
 1.025147f, 12.539147f, 3.673652f,
 2.969029f, 9.428715f, 4.804984f,
 -1.185565f, 6.667182f, 0.088416f,
 -1.565645f, 10.747220f, 1.034762f,
 -1.565645f, 10.747220f, 1.034762f,
 0.151897f, 5.220556f, 2.400773f,
 0.151897f, 5.220556f, 2.400773f,
 1.634909f, 3.092229f, 2.407468f,
 4.189761f, 11.038699f, -0.551591f,
 1.407692f, 6.107151f, 0.382587f,
 1.407692f, 6.107151f, 0.382587f,
 -1.185565f, 6.667182f, 0.088416f,
 -1.185565f, 6.667182f, 0.088416f,
 -0.909461f, 2.755011f, -0.025347f,
 2.969029f, 9.428715f, 4.804984f,
 0.151897f, 5.220556f, 2.400773f,
 0.151897f, 5.220556f, 2.400773f,
 0.941900f, 3.957898f, -1.217151f,
 1.407692f, 6.107151f, 0.382587f,
 1.407692f, 6.107151f, 0.382587f,
 1.634909f, 3.092229f, 2.407468f,
 0.476618f, 1.964015f, 1.023668f,
 0.476618f, 1.964015f, 1.023668f,
 0.941900f, 3.957898f, -1.217151f,
 0.476618f, 1.964015f, 1.023668f,
 -0.909461f, 2.755011f, -0.025347f,
 -0.909461f, 2.755011f, -0.025347f,
 4.839721f, 6.744637f, -4.816251f,
 4.839721f, 6.744637f, -4.816251f,
 3.997851f, 5.700269f, -4.935688f,
 3.997851f, 5.700269f, -4.935688f,
 3.997851f, 5.700269f, -4.935688f,
 2.726435f, 7.384238f, -2.790995f,
 4.839721f, 6.744637f, -4.816251f,
 4.839721f, 6.744637f, -4.816251f,
 1.492535f, 9.074878f, -0.190717f,
 1.492535f, 9.074878f, -0.190717f,
 2.726435f, 7.384238f, -2.790995f,
 0.777771f, 0.816457f, -2.052022f,
 1.316819f, 1.861581f, -1.258518f,
 1.316819f, 1.861581f, -1.258518f,
 1.316819f, 1.861581f, -1.258518f,
 1.316819f, 1.861581f, -1.258518f,
 -0.517559f, 4.076220f, 0.284841f,
 2.149912f, 1.444480f, -3.002922f,
 2.149912f, 1.444480f, -3.002922f,
 1.013597f, 0.824203f, -3.143257f,
 1.013597f, 0.824203f, -3.143257f,
 0.777771f, 0.816457f, -2.052022f,
 0.777771f, 0.816457f, -2.052022f,
 0.398702f, -0.012277f, -1.984181f,
 0.777771f, 0.816457f, -2.052022f,
 0.398702f, -0.012277f, -1.984181f,
 2.353028f, 1.138044f, -2.010011f,
 2.353028f, 1.138044f, -2.010011f,
 0.398702f, -0.012277f, -1.984181f,
 4.675199f, -0.006598f, -1.835636f,
 2.149912f, 1.444480f, -3.002922f,
 2.353028f, 1.138044f, -2.010011f,
 2.353028f, 1.138044f, -2.010011f,
 4.675199f, -0.006598f, -1.835636f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.313214f, -0.233033f, 0.920648f},
{ -0.367379f, -0.341597f, 0.865069f},
{ -0.379634f, -0.367230f, 0.849129f},
{ -0.393372f, -0.396534f, 0.829469f},
{ 0.706646f, -0.209250f, 0.675919f},
{ 0.735747f, -0.366058f, 0.569805f},
{ 0.732537f, -0.339061f, 0.590277f},
{ 0.738616f, -0.400046f, 0.542595f},
{ 0.307863f, -0.913960f, 0.264381f},
{ 0.224876f, -0.196040f, 0.954463f},
{ -0.574232f, -0.353286f, 0.738543f},
{ -0.610343f, -0.141379f, 0.779419f},
{ -0.565430f, 0.487952f, 0.664975f},
{ 0.141757f, 0.777559f, 0.612623f},
{ -0.979396f, 0.047494f, -0.196283f},
{ -0.923213f, 0.382684f, 0.035085f},
{ 0.299651f, 0.951334f, 0.071928f},
{ -0.765079f, -0.483654f, 0.425128f},
{ 0.245989f, -0.966132f, -0.077963f},
{ -0.024078f, 0.997466f, 0.066952f},
{ -0.645377f, 0.622188f, -0.443137f},
{ -0.639332f, 0.353520f, 0.682846f},
{ -0.989534f, 0.051495f, 0.134800f},
{ 0.280294f, -0.232632f, 0.931299f},
{ 0.747414f, -0.185969f, 0.637800f},
{ -0.442559f, 0.165671f, -0.881303f},
{ -0.901817f, 0.139355f, -0.409032f},
{ -0.693912f, -0.452197f, 0.560361f},
{ 0.642862f, -0.321765f, 0.695123f},
{ 0.501335f, -0.382937f, 0.775901f},
{ -0.262616f, -0.396708f, 0.879577f},
{ -0.134148f, -0.438348f, 0.888738f},
{ -0.715817f, -0.025483f, -0.697822f},
{ -0.774151f, -0.598457f, 0.206249f},
{ -0.364706f, -0.641609f, -0.674779f},
{ 0.167443f, -0.978817f, 0.117811f},
{ 0.393256f, 0.873330f, 0.287479f},
{ -0.444893f, 0.039902f, 0.894695f},
{ 0.929660f, -0.070024f, -0.361703f},
{ 0.207428f, -0.972546f, 0.105485f},
{ -0.172726f, -0.955588f, -0.238784f},
{ -0.930073f, -0.179323f, 0.320637f},
{ -0.243815f, 0.800126f, 0.548044f},
{ -0.917067f, 0.398087f, 0.022713f},
{ 0.237985f, 0.495001f, 0.835666f},
{ 0.808305f, -0.087486f, -0.582228f},
{ -0.817737f, -0.366935f, -0.443468f},
{ 0.775295f, -0.562352f, 0.287537f},
{ -0.953973f, 0.040803f, -0.297103f},
{ -0.763095f, -0.394899f, -0.511606f},
{ 0.705869f, -0.195392f, -0.680860f},
{ -0.077883f, -0.639112f, -0.765160f},
{ -0.402875f, 0.681629f, 0.610798f},
{ -0.544213f, 0.144945f, 0.826331f},
{ 0.535566f, 0.187826f, 0.823341f},
{ 0.967934f, 0.216269f, 0.127796f},
{ 0.962053f, 0.204977f, 0.180108f},
{ 0.517856f, 0.511764f, -0.685509f},
{ -0.618068f, 0.527345f, -0.583009f},
{ -0.932954f, 0.248465f, 0.260503f},
{ 0.002410f, -0.999996f, -0.001372f},
{ 0.000526f, -1.000000f, -0.000689f},
{ 0.001907f, -0.999997f, -0.001189f},
{ 0.000046f, -1.000000f, -0.000515f},
{ -0.831824f, 0.395920f, -0.388994f},
{ -0.322826f, 0.868294f, 0.376629f},
{ 0.837330f, 0.261377f, -0.480167f},
{ 0.335323f, 0.855675f, 0.394181f},
{ 0.853841f, -0.487046f, 0.183690f},
{ 0.932288f, -0.154097f, 0.327252f},
{ 0.817201f, 0.513127f, 0.262458f},
{ 0.734387f, 0.676579f, -0.054007f},
{ 0.983537f, -0.084628f, -0.159664f},
{ 0.780932f, -0.565526f, -0.265189f},
{ 0.628862f, 0.608566f, -0.483921f},
{ -0.053670f, 0.172084f, -0.983619f},
{ 0.973826f, -0.152796f, 0.168275f},
{ -0.314715f, -0.119926f, -0.941579f},
{ 0.731904f, -0.400593f, -0.551219f},
{ 0.773229f, -0.503703f, 0.385227f},
{ 0.975212f, -0.078277f, -0.206965f},
{ 0.317913f, -0.245040f, -0.915908f},
{ -0.402679f, 0.140668f, -0.904468f},
{ 0.987740f, -0.131963f, 0.083402f},
{ 0.041413f, -0.986081f, 0.161028f},
{ 0.284076f, 0.644306f, -0.710049f},
{ -0.754991f, -0.355365f, -0.551094f},
{ 0.127375f, 0.823859f, -0.552297f},
{ -0.903913f, -0.256600f, -0.342197f},
{ 0.735245f, 0.648994f, -0.195505f},
{ 0.939078f, 0.276893f, 0.203623f},
{ 0.168385f, 0.782953f, -0.598858f},
{ -0.026352f, -0.858108f, 0.512793f},
{ -0.915259f, -0.344516f, -0.208828f},
{ 0.159135f, -0.676174f, 0.719350f},
{ -0.783231f, -0.620399f, -0.040679f},
{ -0.227731f, 0.532182f, -0.815427f},
{ -0.328927f, -0.734378f, 0.593714f},
{ -0.625310f, 0.518855f, -0.582904f},
{ 0.688351f, 0.672773f, 0.271200f},
{ 0.392684f, 0.756354f, -0.523190f},
{ -0.128654f, -0.734436f, 0.666372f},
{ 0.820365f, -0.224084f, 0.526106f},
{ -0.743807f, 0.279062f, 0.607352f},
{ 0.423183f, 0.153467f, 0.892953f},
{ -0.623821f, 0.497071f, -0.603132f},
{ 0.202877f, 0.449716f, -0.869825f},
{ -0.000977f, -1.000000f, -0.000217f},
{ -0.000460f, -0.999999f, -0.001637f},
{ 0.001032f, -0.999983f, -0.005735f},
{ 0.001579f, -0.999973f, -0.007238f},
{ 0.366161f, 0.813514f, -0.451798f},
{ -0.265340f, 0.336866f, -0.903392f},
{ -0.464774f, 0.270336f, 0.843151f},
{ 0.393052f, 0.850604f, 0.349259f},
{ -0.761089f, -0.598409f, 0.250302f},
{ -0.761974f, -0.601520f, 0.239935f},
{ -0.761427f, -0.599569f, 0.246467f},
{ -0.762283f, -0.602670f, 0.236036f},
{ -0.370449f, 0.684607f, 0.627758f},
{ -0.370910f, 0.688658f, 0.623038f},
{ -0.370867f, 0.688277f, 0.623484f},
{ -0.371329f, 0.692432f, 0.618590f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagBlock5.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105