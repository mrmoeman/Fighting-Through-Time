package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeathb {

static String TextureName = "CurrieDeath2.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 3.391308f, 5.083718f, -1.311740f,
 2.653624f, 2.213178f, -1.855908f,
 2.733428f, 5.467604f, -2.551219f,
 1.994869f, 2.597678f, -3.097041f,
 1.411145f, 6.475905f, -3.443322f,
 1.622945f, 5.175795f, -4.904192f,
 -0.649469f, 6.498917f, -3.921042f,
 -0.282546f, 5.209045f, -5.422800f,
 0.366696f, 6.294835f, -3.791700f,
 1.119951f, 5.700896f, -4.068022f,
 0.556386f, 5.248497f, -4.570302f,
 0.502852f, 7.161160f, -4.319039f,
 1.681523f, 6.281476f, -4.643022f,
 0.862831f, 5.386286f, -5.651302f,
 0.779290f, 7.549401f, -5.347135f,
 1.708729f, 6.773672f, -5.444494f,
 1.043175f, 6.083836f, -6.315082f,
 0.899699f, 6.576713f, -5.785316f,
 1.318750f, 6.208181f, -5.639446f,
 0.858375f, 5.785818f, -5.634933f,
 1.091818f, 6.614693f, -6.484454f,
 1.646155f, 6.021803f, -6.145861f,
 0.991938f, 5.444656f, -6.141256f,
 1.200196f, 6.279325f, -6.886019f,
 1.580214f, 5.900937f, -6.600307f,
 1.128523f, 5.452791f, -6.645654f,
 -0.203622f, 4.368747f, -1.918363f,
 0.140054f, 3.417046f, -3.080054f,
 -0.834774f, 1.346519f, 1.504042f,
 0.760103f, 0.890028f, -1.277433f,
 0.178872f, 5.926598f, -3.032032f,
 0.648358f, 4.940433f, -4.971815f,
 0.409787f, 6.318344f, -3.964542f,
 0.639460f, 5.426235f, -4.891221f,
 1.097763f, 5.903141f, -4.280880f,
 0.795857f, 6.103568f, -4.139513f,
 0.917820f, 5.609846f, -4.663675f,
 0.563449f, 4.291549f, -1.963354f,
 0.979882f, 3.863106f, -2.427876f,
 1.769314f, 1.059254f, 0.814003f,
 0.633632f, 1.261225f, 1.761612f,
 0.666958f, 3.551323f, -2.854477f,
 1.722358f, 0.949492f, -0.137178f,
 1.091948f, 5.819011f, -3.110759f,
 1.872234f, 5.518388f, -3.933955f,
 1.624934f, 5.113296f, -4.537595f,
 2.291477f, 3.722943f, -1.985382f,
 1.798487f, 4.062277f, -3.191199f,
 1.917659f, 4.439995f, -3.017818f,
 2.399203f, 4.099862f, -1.832727f,
 1.207427f, 4.890625f, -3.914955f,
 1.138176f, 5.174929f, -3.618319f,
 2.298937f, 4.523072f, -2.986154f,
 2.960558f, 4.118603f, -1.536285f,
 1.147865f, 5.722637f, -3.822325f,
 2.437232f, 4.379507f, -3.294429f,
 3.287201f, 3.938400f, -2.083605f,
 2.003865f, 5.359981f, -4.000725f,
 2.321157f, 4.001421f, -3.462211f,
 3.179451f, 3.561445f, -2.236340f,
 1.886733f, 5.104246f, -4.356445f,
 2.063793f, 3.772105f, -3.324302f,
 2.740626f, 3.349030f, -1.847899f,
 1.320234f, 5.259850f, -4.544580f,
 -0.816178f, 4.134670f, -2.286390f,
 -1.797104f, 1.286404f, 0.363810f,
 -1.552237f, 1.093825f, -1.096235f,
 -0.882848f, 3.668358f, -2.894799f,
 -0.708315f, 0.974816f, -1.535036f,
 -0.431583f, 3.424893f, -3.122516f,
 -0.906908f, 5.547760f, -4.622915f,
 -0.673814f, 5.838784f, -3.549062f,
 -0.426055f, 5.142364f, -5.053266f,
 -0.044341f, 5.907226f, -4.582299f,
 0.153207f, 6.106455f, -4.306917f,
 0.280163f, 5.612578f, -4.832938f,
 -2.079190f, 3.695104f, -2.949786f,
 -2.116668f, 4.029360f, -2.696414f,
 -1.391826f, 4.547620f, -3.699874f,
 -1.351607f, 4.213758f, -3.956783f,
 -0.410776f, 5.194340f, -4.001972f,
 -0.340906f, 4.905181f, -4.302672f,
 -2.694848f, 4.113305f, -2.447480f,
 -1.736734f, 4.731422f, -3.670493f,
 -0.312950f, 5.737742f, -4.184812f,
 -2.971974f, 4.186893f, -3.044512f,
 -1.868955f, 4.705178f, -4.014057f,
 -1.070653f, 5.585583f, -4.518539f,
 -2.934436f, 3.853024f, -3.297665f,
 -1.829473f, 4.371941f, -4.268253f,
 -1.001937f, 5.367259f, -4.909325f,
 -2.618238f, 3.431655f, -2.964371f,
 -1.655319f, 4.053751f, -4.190198f,
 -0.138888f, 5.275538f, -4.906638f,
 -0.163696f, 5.695207f, -4.416582f,
 -0.357898f, 6.283637f, -5.200590f,
 0.029884f, 6.774052f, -5.905469f,
 0.464397f, 6.209694f, -5.873700f,
 0.440164f, 6.025682f, -6.476505f,
 0.727477f, 5.900827f, -6.834992f,
 -1.242138f, 2.744374f, -1.030637f,
 -0.359090f, 3.272611f, -0.572541f,
 0.766025f, 3.226555f, -0.609025f,
 1.459480f, 2.805428f, -0.667540f,
 1.254422f, 2.448865f, -1.290183f,
 0.485979f, 2.205219f, -1.860221f,
 -0.541689f, 2.191662f, -1.928924f,
 -1.199158f, 2.396111f, -1.577664f,
 2.291477f, 3.722943f, -1.985382f,
 2.291477f, 3.722943f, -1.985382f,
 1.798487f, 4.062277f, -3.191199f,
 1.798487f, 4.062277f, -3.191199f,
 1.207427f, 4.890625f, -3.914955f,
 1.207427f, 4.890625f, -3.914955f,
 2.740626f, 3.349030f, -1.847899f,
 2.740626f, 3.349030f, -1.847899f,
 0.485979f, 2.205219f, -1.860221f,
 0.485979f, 2.205219f, -1.860221f,
 0.140054f, 3.417046f, -3.080054f,
 -0.359090f, 3.272611f, -0.572541f,
 -0.359090f, 3.272611f, -0.572541f,
 -0.203622f, 4.368747f, -1.918363f,
 -0.203622f, 4.368747f, -1.918363f,
 0.178872f, 5.926598f, -3.032032f,
 0.178872f, 5.926598f, -3.032032f,
 0.140054f, 3.417046f, -3.080054f,
 0.648358f, 4.940433f, -4.971815f,
 0.648358f, 4.940433f, -4.971815f,
 0.178872f, 5.926598f, -3.032032f,
 0.409787f, 6.318344f, -3.964542f,
 0.409787f, 6.318344f, -3.964542f,
 0.648358f, 4.940433f, -4.971815f,
 0.648358f, 4.940433f, -4.971815f,
 0.639460f, 5.426235f, -4.891221f,
 -2.079190f, 3.695104f, -2.949786f,
 -2.079190f, 3.695104f, -2.949786f,
 -1.351607f, 4.213758f, -3.956783f,
 -0.340906f, 4.905181f, -4.302672f,
 -0.340906f, 4.905181f, -4.302672f,
 -1.351607f, 4.213758f, -3.956783f,
 -2.618238f, 3.431655f, -2.964371f,
 -2.618238f, 3.431655f, -2.964371f,
 0.502852f, 7.161160f, -4.319039f,
 0.366696f, 6.294835f, -3.791700f,
 0.366696f, 6.294835f, -3.791700f,
 0.862831f, 5.386286f, -5.651302f,
 0.556386f, 5.248497f, -4.570302f,
 0.556386f, 5.248497f, -4.570302f,
 0.779290f, 7.549401f, -5.347135f,
 0.502852f, 7.161160f, -4.319039f,
 0.502852f, 7.161160f, -4.319039f,
 0.862831f, 5.386286f, -5.651302f,
 0.862831f, 5.386286f, -5.651302f,
 1.043175f, 6.083836f, -6.315082f,
 1.043175f, 6.083836f, -6.315082f,
 0.779290f, 7.549401f, -5.347135f,
 1.091818f, 6.614693f, -6.484454f,
 1.091818f, 6.614693f, -6.484454f,
 0.899699f, 6.576713f, -5.785316f,
 0.991938f, 5.444656f, -6.141256f,
 0.858375f, 5.785818f, -5.634933f,
 0.858375f, 5.785818f, -5.634933f,
 1.200196f, 6.279325f, -6.886019f,
 1.091818f, 6.614693f, -6.484454f,
 1.091818f, 6.614693f, -6.484454f,
 1.128523f, 5.452791f, -6.645654f,
 0.991938f, 5.444656f, -6.141256f,
 0.991938f, 5.444656f, -6.141256f,
 1.128523f, 5.452791f, -6.645654f,
 1.200196f, 6.279325f, -6.886019f,
 -0.359090f, 3.272611f, -0.572541f,
 -0.834774f, 1.346519f, 1.504042f,
 -0.834774f, 1.346519f, 1.504042f,
 0.760103f, 0.890028f, -1.277433f,
 0.760103f, 0.890028f, -1.277433f,
 0.485979f, 2.205219f, -1.860221f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.859333f, -0.126919f, -0.495418f},
{ 0.859330f, -0.126919f, -0.495423f},
{ 0.859332f, -0.126919f, -0.495420f},
{ 0.859329f, -0.126920f, -0.495424f},
{ 0.157584f, 0.748916f, -0.643655f},
{ 0.168601f, 0.757870f, -0.630243f},
{ 0.169007f, 0.758196f, -0.629743f},
{ 0.180784f, 0.767494f, -0.615037f},
{ 0.229406f, 0.744408f, 0.627080f},
{ 0.859189f, 0.454806f, 0.234404f},
{ 0.464673f, 0.614156f, 0.637881f},
{ 0.994065f, -0.007968f, 0.108493f},
{ 0.834533f, -0.187676f, -0.518008f},
{ 0.619654f, -0.629269f, -0.469094f},
{ 0.218521f, -0.741377f, -0.634514f},
{ 0.363034f, -0.491823f, -0.791401f},
{ -0.286763f, 0.741319f, 0.606805f},
{ -0.257192f, 0.687817f, 0.678794f},
{ 0.974223f, 0.097703f, 0.203331f},
{ 0.550165f, 0.508462f, 0.662409f},
{ -0.171816f, 0.712495f, 0.680316f},
{ 0.172778f, -0.678275f, -0.714206f},
{ 0.681679f, -0.550520f, -0.481914f},
{ 0.531756f, 0.818804f, -0.216324f},
{ 0.540694f, 0.837769f, 0.076110f},
{ -0.044485f, 0.978850f, 0.199684f},
{ 0.257529f, 0.162731f, -0.952469f},
{ 0.431933f, 0.382091f, -0.816970f},
{ -0.564094f, 0.537016f, 0.627226f},
{ -0.680938f, 0.330191f, 0.653680f},
{ -0.816302f, -0.463864f, 0.344211f},
{ -0.888154f, -0.386012f, 0.249353f},
{ -0.694697f, -0.677017f, -0.242990f},
{ -0.512655f, 0.093632f, 0.853474f},
{ 0.387432f, 0.641340f, 0.662253f},
{ 0.338814f, 0.881984f, 0.327582f},
{ 0.263109f, 0.851749f, 0.453097f},
{ 0.889722f, 0.456128f, -0.018483f},
{ 0.899254f, 0.261558f, -0.350614f},
{ 0.645740f, 0.756348f, 0.104682f},
{ 0.613775f, -0.687587f, -0.387950f},
{ 0.589355f, -0.417176f, -0.691827f},
{ 0.449738f, -0.142438f, -0.881729f},
{ -0.041835f, -0.978721f, 0.200883f},
{ -0.231641f, -0.879701f, -0.415293f},
{ 0.074444f, -0.081502f, -0.993889f},
{ -0.168110f, 0.774311f, 0.610066f},
{ -0.226426f, 0.502881f, 0.834171f},
{ 0.940561f, -0.038101f, 0.337479f},
{ 0.810830f, -0.269982f, 0.519293f},
{ 0.117738f, -0.899352f, -0.421075f},
{ 0.038915f, -0.985536f, -0.164941f},
{ 0.056751f, 0.975784f, -0.211248f},
{ 0.893926f, 0.356020f, -0.272299f},
{ 0.261066f, -0.151294f, -0.953391f},
{ -0.012385f, 0.998630f, 0.050847f},
{ 0.840203f, 0.249347f, 0.481545f},
{ 0.073804f, 0.962705f, -0.260291f},
{ 0.968979f, 0.031473f, 0.245130f},
{ -0.145147f, -0.833602f, 0.532954f},
{ -0.089430f, -0.945776f, 0.312268f},
{ 0.245073f, 0.378288f, -0.892658f},
{ 0.879233f, -0.196273f, -0.434082f},
{ 0.136254f, -0.854924f, -0.500540f},
{ -0.941664f, -0.195036f, -0.274281f},
{ -0.852661f, -0.100862f, -0.512637f},
{ -0.850480f, 0.424509f, 0.310605f},
{ -0.810674f, 0.523851f, 0.261513f},
{ -0.268556f, -0.704482f, -0.656949f},
{ -0.173326f, -0.509101f, -0.843074f},
{ -0.798891f, 0.499192f, 0.335529f},
{ -0.950540f, 0.117704f, -0.287436f},
{ -0.385745f, -0.512216f, -0.767356f},
{ -0.342158f, 0.821117f, -0.456830f},
{ -0.475220f, 0.852569f, -0.217469f},
{ 0.019296f, 0.379522f, -0.924982f},
{ 0.676632f, -0.695322f, 0.242274f},
{ 0.600589f, -0.052712f, 0.797818f},
{ 0.627263f, -0.740611f, 0.240909f},
{ 0.577417f, 0.170836f, 0.798377f},
{ 0.574134f, -0.816892f, -0.055305f},
{ 0.304041f, 0.022963f, 0.952382f},
{ -0.155255f, 0.845119f, 0.511537f},
{ -0.316961f, 0.516169f, 0.795679f},
{ -0.118936f, 0.941633f, 0.314931f},
{ -0.743661f, 0.665566f, 0.063178f},
{ -0.734017f, 0.604993f, -0.308549f},
{ -0.496197f, 0.862136f, 0.102521f},
{ -0.695427f, -0.361861f, -0.620836f},
{ -0.607782f, -0.046277f, -0.792754f},
{ -0.221323f, 0.001559f, -0.975199f},
{ 0.048078f, -0.772983f, -0.632602f},
{ -0.217977f, -0.970085f, -0.106866f},
{ 0.200284f, -0.127853f, -0.971360f},
{ -0.982450f, -0.029738f, -0.184140f},
{ -0.967659f, -0.246215f, 0.054899f},
{ -0.631039f, 0.357106f, -0.688669f},
{ -0.958574f, 0.040859f, -0.281899f},
{ -0.968086f, 0.250270f, -0.013225f},
{ -0.537895f, -0.189594f, -0.821415f},
{ -0.761484f, 0.575356f, 0.298508f},
{ -0.245364f, 0.757571f, 0.604882f},
{ 0.205540f, 0.747740f, 0.631378f},
{ 0.698073f, 0.553863f, 0.453794f},
{ 0.948682f, -0.024351f, -0.315293f},
{ 0.540227f, -0.289710f, -0.790078f},
{ -0.119505f, -0.283847f, -0.951394f},
{ -0.897230f, 0.080032f, -0.434250f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath2.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73