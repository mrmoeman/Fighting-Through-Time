package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieWalke {

static String TextureName = "CurrieWalk5.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 3.144679f, 4.498129f, 3.107420f,
 3.101077f, 1.978801f, 1.451803f,
 2.411899f, 5.180851f, 2.053713f,
 2.368738f, 2.663372f, 0.396910f,
 1.155591f, 5.528653f, 1.447800f,
 1.133972f, 5.974565f, -0.389493f,
 -0.918435f, 5.295352f, 1.544284f,
 -0.843314f, 6.181713f, -0.214296f,
 0.130967f, 5.401437f, 1.319153f,
 0.783390f, 5.510516f, 0.513430f,
 0.116028f, 5.601371f, 0.007538f,
 0.127111f, 6.176715f, 1.870661f,
 1.184243f, 6.418970f, 0.839179f,
 0.133082f, 6.813332f, -0.260394f,
 0.121361f, 7.278582f, 1.875730f,
 0.996491f, 7.324319f, 1.033931f,
 0.130957f, 7.697744f, 0.133906f,
 0.127243f, 7.362074f, 0.805395f,
 0.571963f, 7.204495f, 0.471861f,
 0.131011f, 6.938047f, 0.119812f,
 0.128448f, 8.054205f, 0.586076f,
 0.756293f, 7.675287f, 0.091896f,
 0.132266f, 7.291493f, -0.410842f,
 0.131153f, 8.321563f, 0.110527f,
 0.575249f, 8.022390f, -0.178994f,
 0.133121f, 7.779594f, -0.594461f,
 0.194555f, 3.096849f, 0.757669f,
 -0.133478f, 2.784139f, -0.652226f,
 0.622816f, 0.000164f, 1.769571f,
 -0.395875f, 0.000178f, -1.304691f,
 0.103036f, 4.650550f, 1.538860f,
 0.122775f, 5.644474f, -0.451375f,
 0.132080f, 5.571690f, 1.255886f,
 0.120011f, 5.977492f, 0.002978f,
 0.716660f, 5.786938f, 0.618053f,
 0.462571f, 5.706893f, 0.931407f,
 0.445469f, 5.882208f, 0.196637f,
 0.828411f, 3.081227f, 0.439844f,
 0.936964f, 2.978770f, -0.103619f,
 1.838948f, 0.000165f, -0.651395f,
 1.792069f, -0.000155f, 0.840867f,
 0.454874f, 2.827122f, -0.608152f,
 1.096648f, -0.000153f, -1.257861f,
 0.975403f, 4.806455f, 1.281528f,
 1.550728f, 5.400103f, 0.448790f,
 1.184717f, 5.563096f, -0.195585f,
 2.394357f, 3.302824f, 1.874821f,
 1.832724f, 3.968328f, 0.848320f,
 1.849338f, 4.269706f, 1.141582f,
 2.410636f, 3.604292f, 2.167689f,
 0.904036f, 4.889377f, 0.055433f,
 0.903361f, 4.819473f, 0.463460f,
 2.192404f, 4.431596f, 1.234314f,
 2.952459f, 3.627931f, 2.498359f,
 0.869384f, 5.312324f, 0.775655f,
 2.371134f, 4.433446f, 0.910463f,
 3.311129f, 3.750797f, 1.955086f,
 1.681088f, 5.387248f, 0.383343f,
 2.354668f, 4.132662f, 0.622447f,
 3.294846f, 3.449337f, 1.662095f,
 1.666058f, 5.207870f, -0.031211f,
 2.158601f, 3.818129f, 0.639636f,
 2.919221f, 3.012411f, 1.900233f,
 0.875133f, 5.622020f, -0.039618f,
 -0.559682f, 3.065876f, 0.625419f,
 -0.869714f, -0.000163f, 1.722799f,
 -1.798387f, 0.000165f, 0.553886f,
 -0.973820f, 3.008541f, -0.076355f,
 -1.565148f, -0.000164f, -0.375908f,
 -0.664495f, 2.850912f, -0.447966f,
 -1.311184f, 5.471192f, 0.455440f,
 -0.844538f, 4.849872f, 1.283647f,
 -0.939991f, 5.645484f, -0.186519f,
 -0.456534f, 5.781939f, 0.687609f,
 -0.199585f, 5.708339f, 0.946457f,
 -0.209888f, 5.900230f, 0.255284f,
 -2.332328f, 3.807387f, -0.217487f,
 -2.215932f, 3.931373f, 0.167034f,
 -1.677347f, 4.764847f, -0.557817f,
 -1.740979f, 4.747092f, -0.980219f,
 -0.697074f, 4.858458f, 0.457736f,
 -0.692681f, 4.931111f, 0.052394f,
 -2.674127f, 3.908122f, 0.606491f,
 -1.989830f, 4.844857f, -0.361574f,
 -0.634897f, 5.343801f, 0.781463f,
 -3.049576f, 4.344039f, 0.277777f,
 -2.143648f, 5.115706f, -0.490474f,
 -1.435201f, 5.436865f, 0.561042f,
 -3.165903f, 4.220787f, -0.106449f,
 -2.213371f, 5.103536f, -0.970207f,
 -1.315053f, 5.815628f, 0.350844f,
 -2.911902f, 3.656196f, -0.179445f,
 -2.122999f, 4.783738f, -1.140093f,
 -0.628054f, 5.659614f, -0.036254f,
 -0.533619f, 5.490612f, 0.603462f,
 -0.928646f, 6.417644f, 0.842362f,
 -0.744287f, 7.324139f, 1.025429f,
 -0.313442f, 7.204388f, 0.468915f,
 -0.492772f, 7.676424f, 0.092629f,
 -0.308816f, 8.026690f, -0.172206f,
 -0.580500f, 1.601121f, 1.610778f,
 0.537309f, 1.497883f, 1.707915f,
 1.451768f, 1.560887f, 1.053184f,
 1.494271f, 1.556051f, 0.272829f,
 0.892149f, 1.296443f, -0.371113f,
 -0.134393f, 1.186307f, -0.393225f,
 -0.994093f, 1.317589f, 0.125749f,
 -1.276303f, 1.570602f, 0.748553f,
 2.394357f, 3.302824f, 1.874821f,
 2.394357f, 3.302824f, 1.874821f,
 1.832724f, 3.968328f, 0.848320f,
 1.832724f, 3.968328f, 0.848320f,
 0.904036f, 4.889377f, 0.055433f,
 0.904036f, 4.889377f, 0.055433f,
 2.919221f, 3.012411f, 1.900233f,
 2.919221f, 3.012411f, 1.900233f,
 -0.134393f, 1.186307f, -0.393225f,
 -0.134393f, 1.186307f, -0.393225f,
 -0.133478f, 2.784139f, -0.652226f,
 0.537309f, 1.497883f, 1.707915f,
 0.537309f, 1.497883f, 1.707915f,
 0.194555f, 3.096849f, 0.757669f,
 0.194555f, 3.096849f, 0.757669f,
 0.103036f, 4.650550f, 1.538860f,
 0.103036f, 4.650550f, 1.538860f,
 -0.133478f, 2.784139f, -0.652226f,
 0.122775f, 5.644474f, -0.451375f,
 0.122775f, 5.644474f, -0.451375f,
 0.103036f, 4.650550f, 1.538860f,
 0.132080f, 5.571690f, 1.255886f,
 0.132080f, 5.571690f, 1.255886f,
 0.122775f, 5.644474f, -0.451375f,
 0.122775f, 5.644474f, -0.451375f,
 0.120011f, 5.977492f, 0.002978f,
 -2.332328f, 3.807387f, -0.217487f,
 -2.332328f, 3.807387f, -0.217487f,
 -1.740979f, 4.747092f, -0.980219f,
 -0.692681f, 4.931111f, 0.052394f,
 -0.692681f, 4.931111f, 0.052394f,
 -1.740979f, 4.747092f, -0.980219f,
 -2.911902f, 3.656196f, -0.179445f,
 -2.911902f, 3.656196f, -0.179445f,
 0.127111f, 6.176715f, 1.870661f,
 0.130967f, 5.401437f, 1.319153f,
 0.130967f, 5.401437f, 1.319153f,
 0.133082f, 6.813332f, -0.260394f,
 0.116028f, 5.601371f, 0.007538f,
 0.116028f, 5.601371f, 0.007538f,
 0.121361f, 7.278582f, 1.875730f,
 0.127111f, 6.176715f, 1.870661f,
 0.127111f, 6.176715f, 1.870661f,
 0.133082f, 6.813332f, -0.260394f,
 0.133082f, 6.813332f, -0.260394f,
 0.130957f, 7.697744f, 0.133906f,
 0.130957f, 7.697744f, 0.133906f,
 0.121361f, 7.278582f, 1.875730f,
 0.128448f, 8.054205f, 0.586076f,
 0.128448f, 8.054205f, 0.586076f,
 0.127243f, 7.362074f, 0.805395f,
 0.132266f, 7.291493f, -0.410842f,
 0.131011f, 6.938047f, 0.119812f,
 0.131011f, 6.938047f, 0.119812f,
 0.131153f, 8.321563f, 0.110527f,
 0.128448f, 8.054205f, 0.586076f,
 0.128448f, 8.054205f, 0.586076f,
 0.133121f, 7.779594f, -0.594461f,
 0.132266f, 7.291493f, -0.410842f,
 0.132266f, 7.291493f, -0.410842f,
 0.133121f, 7.779594f, -0.594461f,
 0.131153f, 8.321563f, 0.110527f,
 0.537309f, 1.497883f, 1.707915f,
 0.622816f, 0.000164f, 1.769571f,
 0.622816f, 0.000164f, 1.769571f,
 -0.395875f, 0.000178f, -1.304691f,
 -0.395875f, 0.000178f, -1.304691f,
 -0.134393f, 1.186307f, -0.393225f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.863630f, 0.266338f, -0.428028f},
{ 0.863974f, 0.266287f, -0.427363f},
{ 0.863767f, 0.266318f, -0.427763f},
{ 0.864112f, 0.266267f, -0.427098f},
{ -0.097790f, 0.966867f, 0.235809f},
{ 0.012912f, 0.939052f, 0.343533f},
{ 0.021085f, 0.936077f, 0.351163f},
{ 0.132417f, 0.882838f, 0.450625f},
{ 0.788941f, 0.291340f, 0.541011f},
{ 0.903202f, 0.312638f, -0.294083f},
{ 0.774378f, 0.128012f, 0.619638f},
{ 0.917409f, -0.017853f, -0.397545f},
{ 0.316823f, 0.341707f, -0.884793f},
{ 0.360952f, -0.009596f, -0.932535f},
{ -0.146705f, -0.010655f, -0.989123f},
{ -0.238141f, 0.299603f, -0.923865f},
{ 0.248197f, 0.290981f, 0.923974f},
{ 0.131145f, 0.068087f, 0.989022f},
{ 0.994929f, 0.039089f, 0.092678f},
{ 0.691230f, -0.197959f, 0.694991f},
{ 0.005984f, -0.219384f, 0.975620f},
{ 0.001174f, 0.211375f, -0.977404f},
{ 0.557402f, 0.191478f, -0.807861f},
{ 0.472279f, 0.767975f, 0.432627f},
{ 0.519294f, 0.550067f, 0.654034f},
{ 0.020424f, 0.440406f, 0.897567f},
{ -0.052215f, 0.805300f, -0.590563f},
{ 0.284656f, 0.912600f, -0.293484f},
{ -0.673170f, 0.116180f, 0.730305f},
{ -0.772803f, -0.002188f, 0.634642f},
{ -0.684178f, -0.726013f, 0.069321f},
{ -0.757730f, -0.650279f, 0.054618f},
{ 0.190784f, -0.309798f, -0.931465f},
{ -0.569570f, -0.704515f, 0.423378f},
{ 0.225851f, 0.410000f, 0.883681f},
{ 0.073942f, 0.768385f, 0.635702f},
{ -0.022648f, 0.523309f, 0.851842f},
{ 0.753395f, 0.613402f, 0.236926f},
{ 0.789369f, 0.598682f, -0.135926f},
{ 0.400901f, 0.873648f, 0.275713f},
{ 0.758223f, -0.330209f, -0.562192f},
{ 0.713149f, 0.001901f, -0.701010f},
{ 0.145556f, -0.012300f, -0.989274f},
{ 0.190319f, -0.963317f, -0.189208f},
{ -0.014983f, -0.707236f, -0.706819f},
{ 0.512088f, 0.551704f, -0.658323f},
{ 0.000106f, -0.298951f, 0.954269f},
{ 0.023870f, -0.603405f, 0.797078f},
{ 0.995590f, -0.088424f, -0.031345f},
{ 0.923322f, -0.354234f, -0.148305f},
{ 0.005286f, 0.082949f, -0.996540f},
{ -0.025116f, -0.180354f, -0.983281f},
{ -0.005698f, 0.555879f, 0.831244f},
{ 0.785379f, 0.597527f, 0.161681f},
{ 0.002336f, 0.869516f, -0.493900f},
{ -0.003555f, 0.302076f, 0.953277f},
{ 0.935521f, -0.137657f, 0.325348f},
{ 0.001838f, 0.598413f, 0.801185f},
{ 0.999118f, 0.026845f, 0.032291f},
{ 0.000345f, -0.829094f, -0.559109f},
{ -0.002443f, -0.658886f, -0.752239f},
{ 0.006506f, 0.999914f, 0.011432f},
{ 0.735292f, 0.540333f, -0.409129f},
{ -0.005912f, 0.172319f, -0.985023f},
{ -0.993482f, -0.014402f, -0.113073f},
{ -0.912315f, 0.288284f, 0.290816f},
{ -0.597636f, 0.062901f, 0.799296f},
{ -0.387431f, 0.322608f, 0.863610f},
{ -0.515553f, -0.019349f, -0.856639f},
{ -0.674824f, 0.257270f, -0.691682f},
{ -0.705569f, -0.122502f, 0.697973f},
{ -0.987376f, 0.144847f, 0.064100f},
{ -0.528217f, 0.239619f, -0.814598f},
{ -0.425446f, 0.780570f, 0.457936f},
{ -0.438368f, 0.594211f, 0.674350f},
{ -0.238652f, 0.942326f, -0.234665f},
{ 0.633468f, -0.384789f, -0.671309f},
{ 0.428963f, -0.890581f, 0.151186f},
{ 0.414381f, -0.801987f, -0.430239f},
{ 0.771054f, -0.374729f, 0.514833f},
{ 0.607347f, -0.439824f, -0.661577f},
{ -0.384064f, -0.644945f, 0.660712f},
{ -0.014010f, -0.041164f, 0.999054f},
{ 0.030298f, -0.032933f, 0.998998f},
{ -0.217798f, -0.051342f, 0.974643f},
{ -0.472416f, 0.589355f, 0.655350f},
{ -0.660788f, 0.680868f, 0.315876f},
{ -0.539730f, -0.251493f, 0.803395f},
{ -0.888044f, 0.134580f, -0.439620f},
{ -0.316514f, 0.724698f, -0.612072f},
{ -0.199327f, 0.972536f, -0.120180f},
{ -0.044316f, 0.035684f, -0.998380f},
{ -0.498291f, -0.696314f, -0.516578f},
{ 0.346419f, 0.687488f, -0.638243f},
{ -0.996093f, -0.077769f, -0.041848f},
{ -0.924354f, -0.371655f, -0.086267f},
{ -0.787811f, 0.596991f, 0.151512f},
{ -0.999414f, 0.025643f, 0.022685f},
{ -0.939332f, -0.138746f, 0.313696f},
{ -0.734049f, 0.541587f, -0.409701f},
{ -0.475104f, 0.146508f, 0.867647f},
{ 0.303869f, 0.055479f, 0.951097f},
{ 0.908948f, 0.144983f, 0.390888f},
{ 0.801873f, 0.428845f, -0.416043f},
{ 0.226018f, 0.568712f, -0.790874f},
{ -0.239397f, 0.576230f, -0.781440f},
{ -0.692250f, 0.462661f, -0.553836f},
{ -0.931177f, 0.281552f, 0.231599f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieWalk5.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73