package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannablockb {

static String TextureName = "joannablock2.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.236452f, 0.616320f, -1.672419f,
 0.680973f, 0.841630f, -2.012161f,
 1.068913f, 0.750784f, -1.532946f,
 0.619750f, 0.531937f, -1.221547f,
 0.182885f, 0.063535f, -1.838450f,
 0.704563f, 0.061373f, -2.121777f,
 1.682950f, 0.061372f, -0.236325f,
 1.159493f, 0.061365f, 0.034350f,
 -0.257937f, 3.443296f, -0.059324f,
 0.409669f, 3.685499f, -0.364671f,
 0.964386f, 3.451670f, 0.267472f,
 0.371343f, 3.175900f, 0.644591f,
 0.709951f, 2.061288f, -0.071951f,
 1.108122f, 2.246390f, -0.352196f,
 0.708631f, 2.458848f, -0.759254f,
 0.289145f, 2.292044f, -0.444771f,
 0.962385f, 8.009776f, 1.652163f,
 0.528342f, 6.207452f, 1.624898f,
 -0.189891f, 7.093441f, 1.263217f,
 0.314148f, 7.935386f, 1.268732f,
 0.338693f, 7.712118f, 2.713394f,
 0.547370f, 6.798632f, 0.951737f,
 0.209604f, 6.997989f, 0.444746f,
 -0.160077f, 5.434583f, 0.669144f,
 0.479999f, 5.291195f, 0.348686f,
 0.842155f, 4.939841f, 0.680052f,
 0.461795f, 4.689299f, 1.291927f,
 0.307563f, 9.004344f, 2.797405f,
 0.946493f, 8.757327f, 2.453976f,
 0.947050f, 7.900390f, 2.400139f,
 0.735029f, 7.492683f, 1.779343f,
 1.252517f, 6.902941f, 1.054601f,
 0.337589f, 9.065117f, 1.371975f,
 0.962026f, 8.788853f, 1.694597f,
 0.540619f, 7.634724f, 1.346829f,
 1.300398f, 6.813825f, 0.659105f,
 1.030714f, 7.604691f, 0.935776f,
 0.948214f, 7.586429f, 0.464476f,
 1.427172f, 5.911054f, 1.079841f,
 1.793395f, 6.039519f, 1.057276f,
 1.901054f, 5.802860f, 0.789612f,
 1.565656f, 5.650093f, 0.781695f,
 0.559555f, 7.289449f, 2.154428f,
 0.338552f, 7.557995f, 1.292635f,
 1.541107f, 6.029226f, 2.931717f,
 2.075449f, 6.254472f, 2.506351f,
 2.297098f, 5.804254f, 2.381978f,
 1.930529f, 5.367159f, 2.639943f,
 -0.929831f, 2.742232f, -0.197908f,
 1.375808f, 3.342511f, 0.113430f,
 0.596333f, 3.444750f, -0.869617f,
 0.354339f, 3.054434f, 1.436348f,
 0.362880f, 7.053674f, 2.769850f,
 0.409699f, 6.284546f, 2.905045f,
 0.095700f, 7.066219f, 3.148439f,
 0.188589f, 6.304220f, 3.249209f,
 -0.316023f, 8.756884f, 2.429011f,
 -0.300693f, 8.788405f, 1.670481f,
 -0.156308f, 4.938000f, 1.679028f,
 -0.480958f, 5.290723f, 1.309693f,
 -0.083004f, 6.315338f, 2.370299f,
 -0.720844f, 6.623029f, 2.637015f,
 -0.167912f, 7.550828f, 1.860059f,
 0.064430f, 7.397179f, 2.207278f,
 -0.315944f, 7.900080f, 2.374440f,
 -0.300416f, 8.009325f, 1.627754f,
 0.962032f, 6.907979f, 2.277947f,
 1.172128f, 6.166788f, 1.990539f,
 1.341280f, 6.566221f, 2.786901f,
 1.465436f, 6.121181f, 2.550190f,
 0.261693f, 5.383172f, 3.243101f,
 0.195421f, 5.171296f, 3.330140f,
 0.508287f, 5.223349f, 3.510891f,
 0.584132f, 5.411070f, 3.438982f,
 -1.211076f, 3.696574f, 2.063818f,
 -1.480326f, 3.060328f, 1.189170f,
 -0.302320f, 0.623804f, 1.716726f,
 -0.882476f, 0.624978f, 1.643429f,
 -0.990443f, 0.725732f, 2.248826f,
 -0.409478f, 0.731810f, 2.342686f,
 -0.284341f, 0.061952f, 1.591330f,
 -0.863753f, 0.061378f, 1.504707f,
 -1.227994f, 0.061375f, 3.597429f,
 -0.647555f, 0.061374f, 3.695825f,
 -0.056187f, 3.212545f, 1.138256f,
 -0.815147f, 3.298732f, 1.156880f,
 -0.932996f, 3.817778f, 1.847028f,
 -0.184405f, 3.806070f, 1.945460f,
 -0.530941f, 2.634857f, 2.694329f,
 -1.040437f, 2.637863f, 2.633982f,
 -0.947558f, 2.491733f, 2.070723f,
 -0.433504f, 2.477123f, 2.042715f,
 0.268158f, 11.719308f, 2.175761f,
 -0.200811f, 11.404121f, 3.186532f,
 2.473073f, 4.759314f, 1.670430f,
 1.957902f, 4.532827f, 2.577950f,
 0.289145f, 2.292044f, -0.444771f,
 0.289145f, 2.292044f, -0.444771f,
 -0.257937f, 3.443296f, -0.059324f,
 0.236452f, 0.616320f, -1.672419f,
 0.182885f, 0.063535f, -1.838450f,
 0.182885f, 0.063535f, -1.838450f,
 0.236452f, 0.616320f, -1.672419f,
 0.182885f, 0.063535f, -1.838450f,
 0.619750f, 0.531937f, -1.221547f,
 0.619750f, 0.531937f, -1.221547f,
 0.182885f, 0.063535f, -1.838450f,
 1.159493f, 0.061365f, 0.034350f,
 0.619750f, 0.531937f, -1.221547f,
 1.159493f, 0.061365f, 0.034350f,
 1.159493f, 0.061365f, 0.034350f,
 1.068913f, 0.750784f, -1.532946f,
 1.068913f, 0.750784f, -1.532946f,
 1.068913f, 0.750784f, -1.532946f,
 1.068913f, 0.750784f, -1.532946f,
 0.680973f, 0.841630f, -2.012161f,
 0.680973f, 0.841630f, -2.012161f,
 0.289145f, 2.292044f, -0.444771f,
 0.289145f, 2.292044f, -0.444771f,
 0.680973f, 0.841630f, -2.012161f,
 0.236452f, 0.616320f, -1.672419f,
 0.735029f, 7.492683f, 1.779343f,
 0.735029f, 7.492683f, 1.779343f,
 0.547370f, 6.798632f, 0.951737f,
 0.547370f, 6.798632f, 0.951737f,
 0.735029f, 7.492683f, 1.779343f,
 0.735029f, 7.492683f, 1.779343f,
 0.540619f, 7.634724f, 1.346829f,
 0.540619f, 7.634724f, 1.346829f,
 0.540619f, 7.634724f, 1.346829f,
 0.735029f, 7.492683f, 1.779343f,
 0.735029f, 7.492683f, 1.779343f,
 0.547370f, 6.798632f, 0.951737f,
 0.209604f, 6.997989f, 0.444746f,
 1.427172f, 5.911054f, 1.079841f,
 1.427172f, 5.911054f, 1.079841f,
 0.209604f, 6.997989f, 0.444746f,
 0.209604f, 6.997989f, 0.444746f,
 0.547370f, 6.798632f, 0.951737f,
 1.541107f, 6.029226f, 2.931717f,
 1.541107f, 6.029226f, 2.931717f,
 1.427172f, 5.911054f, 1.079841f,
 1.930529f, 5.367159f, 2.639943f,
 1.930529f, 5.367159f, 2.639943f,
 1.427172f, 5.911054f, 1.079841f,
 0.209604f, 6.997989f, 0.444746f,
 0.209604f, 6.997989f, 0.444746f,
 0.540619f, 7.634724f, 1.346829f,
 0.540619f, 7.634724f, 1.346829f,
 1.930529f, 5.367159f, 2.639943f,
 -0.929831f, 2.742232f, -0.197908f,
 0.596333f, 3.444750f, -0.869617f,
 0.354339f, 3.054434f, 1.436348f,
 0.354339f, 3.054434f, 1.436348f,
 0.596333f, 3.444750f, -0.869617f,
 1.375808f, 3.342511f, 0.113430f,
 0.307563f, 9.004344f, 2.797405f,
 0.337589f, 9.065117f, 1.371975f,
 0.337589f, 9.065117f, 1.371975f,
 0.528342f, 6.207452f, 1.624898f,
 0.064430f, 7.397179f, 2.207278f,
 0.528342f, 6.207452f, 1.624898f,
 0.559555f, 7.289449f, 2.154428f,
 0.064430f, 7.397179f, 2.207278f,
 -0.083004f, 6.315338f, 2.370299f,
 -0.083004f, 6.315338f, 2.370299f,
 0.559555f, 7.289449f, 2.154428f,
 0.338693f, 7.712118f, 2.713394f,
 0.064430f, 7.397179f, 2.207278f,
 0.338693f, 7.712118f, 2.713394f,
 0.064430f, 7.397179f, 2.207278f,
 0.338552f, 7.557995f, 1.292635f,
 -0.167912f, 7.550828f, 1.860059f,
 0.314148f, 7.935386f, 1.268732f,
 -0.167912f, 7.550828f, 1.860059f,
 0.314148f, 7.935386f, 1.268732f,
 -0.167912f, 7.550828f, 1.860059f,
 0.064430f, 7.397179f, 2.207278f,
 0.064430f, 7.397179f, 2.207278f,
 0.461795f, 4.689299f, 1.291927f,
 0.528342f, 6.207452f, 1.624898f,
 0.528342f, 6.207452f, 1.624898f,
 -0.083004f, 6.315338f, 2.370299f,
 0.261693f, 5.383172f, 3.243101f,
 -0.720844f, 6.623029f, 2.637015f,
 0.261693f, 5.383172f, 3.243101f,
 -0.720844f, 6.623029f, 2.637015f,
 -0.720844f, 6.623029f, 2.637015f,
 -0.083004f, 6.315338f, 2.370299f,
 0.962032f, 6.907979f, 2.277947f,
 0.962032f, 6.907979f, 2.277947f,
 1.172128f, 6.166788f, 1.990539f,
 0.261693f, 5.383172f, 3.243101f,
 1.172128f, 6.166788f, 1.990539f,
 0.261693f, 5.383172f, 3.243101f,
 -0.720844f, 6.623029f, 2.637015f,
 -0.720844f, 6.623029f, 2.637015f,
 -0.167912f, 7.550828f, 1.860059f,
 -0.189891f, 7.093441f, 1.263217f,
 -0.167912f, 7.550828f, 1.860059f,
 0.338552f, 7.557995f, 1.292635f,
 -0.189891f, 7.093441f, 1.263217f,
 1.172128f, 6.166788f, 1.990539f,
 0.314148f, 7.935386f, 1.268732f,
 0.337589f, 9.065117f, 1.371975f,
 0.314148f, 7.935386f, 1.268732f,
 0.307563f, 9.004344f, 2.797405f,
 0.338693f, 7.712118f, 2.713394f,
 0.338693f, 7.712118f, 2.713394f,
 -0.160077f, 5.434583f, 0.669144f,
 -0.189891f, 7.093441f, 1.263217f,
 -0.160077f, 5.434583f, 0.669144f,
 -0.929831f, 2.742232f, -0.197908f,
 -0.160077f, 5.434583f, 0.669144f,
 -0.160077f, 5.434583f, 0.669144f,
 0.354339f, 3.054434f, 1.436348f,
 0.461795f, 4.689299f, 1.291927f,
 0.461795f, 4.689299f, 1.291927f,
 -0.929831f, 2.742232f, -0.197908f,
 0.354339f, 3.054434f, 1.436348f,
 -1.480326f, 3.060328f, 1.189170f,
 0.354339f, 3.054434f, 1.436348f,
 -1.211076f, 3.696574f, 2.063818f,
 -1.480326f, 3.060328f, 1.189170f,
 -0.433504f, 2.477123f, 2.042715f,
 -0.056187f, 3.212545f, 1.138256f,
 -0.433504f, 2.477123f, 2.042715f,
 -0.302320f, 0.623804f, 1.716726f,
 -0.284341f, 0.061952f, 1.591330f,
 -0.284341f, 0.061952f, 1.591330f,
 -0.302320f, 0.623804f, 1.716726f,
 -0.409478f, 0.731810f, 2.342686f,
 -0.284341f, 0.061952f, 1.591330f,
 -0.409478f, 0.731810f, 2.342686f,
 -0.647555f, 0.061374f, 3.695825f,
 -0.284341f, 0.061952f, 1.591330f,
 -0.409478f, 0.731810f, 2.342686f,
 -0.647555f, 0.061374f, 3.695825f,
 -0.647555f, 0.061374f, 3.695825f,
 -0.990443f, 0.725732f, 2.248826f,
 -0.990443f, 0.725732f, 2.248826f,
 -0.990443f, 0.725732f, 2.248826f,
 -0.882476f, 0.624978f, 1.643429f,
 -0.990443f, 0.725732f, 2.248826f,
 -0.433504f, 2.477123f, 2.042715f,
 -0.882476f, 0.624978f, 1.643429f,
 -0.433504f, 2.477123f, 2.042715f,
 -0.302320f, 0.623804f, 1.716726f,
 -0.882476f, 0.624978f, 1.643429f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.512552f, -0.856128f, -0.065848f},
{ 0.377946f, -0.759944f, -0.528812f},
{ -0.125019f, -0.677460f, 0.724857f},
{ 0.776976f, -0.581120f, 0.242092f},
{ -0.179253f, -0.562788f, 0.806931f},
{ -0.032947f, -0.573510f, 0.818536f},
{ 0.992582f, 0.072723f, 0.097431f},
{ 0.998622f, 0.001843f, 0.052451f},
{ -0.903820f, -0.344531f, -0.253787f},
{ -0.984802f, -0.167517f, -0.045852f},
{ 0.191872f, 0.511515f, -0.837579f},
{ 0.212615f, 0.303565f, -0.928786f},
{ -0.981953f, 0.136336f, -0.131079f},
{ 0.028390f, 0.502858f, -0.863903f},
{ 0.960683f, 0.156093f, -0.229614f},
{ -0.580605f, 0.020757f, 0.813920f},
{ 0.893187f, 0.264469f, 0.363693f},
{ 0.327893f, 0.270624f, 0.905124f},
{ -0.031323f, 0.557532f, -0.829565f},
{ 0.446834f, 0.078457f, -0.891170f},
{ -0.021343f, 0.669410f, 0.742587f},
{ 0.739961f, 0.478390f, 0.472865f},
{ 0.019665f, 0.710876f, -0.703043f},
{ 0.792264f, 0.411000f, -0.450995f},
{ 0.978849f, 0.172500f, 0.109994f},
{ 0.270563f, 0.408034f, -0.871954f},
{ 0.958157f, -0.231157f, 0.168823f},
{ -0.443997f, 0.267393f, -0.855201f},
{ -0.140516f, 0.860140f, -0.490322f},
{ 0.935112f, -0.331167f, 0.126072f},
{ 0.893077f, -0.115433f, 0.434844f},
{ 0.570979f, -0.400756f, 0.716504f},
{ 0.026155f, -0.357614f, 0.933503f},
{ 0.809948f, -0.333195f, 0.482664f},
{ -0.538174f, 0.233997f, -0.809700f},
{ -0.083847f, 0.003059f, -0.996474f},
{ 0.895211f, -0.096623f, -0.435042f},
{ 0.661873f, -0.035817f, 0.748760f},
{ -0.904919f, 0.109779f, 0.411181f},
{ -0.289105f, -0.939145f, 0.185538f},
{ 0.176410f, 0.974205f, 0.140730f},
{ 0.954765f, -0.283268f, -0.090463f},
{ -0.874779f, -0.274121f, 0.399525f},
{ -0.173906f, -0.813339f, -0.555190f},
{ 0.721733f, -0.403778f, -0.562196f},
{ 0.560560f, 0.826588f, 0.050256f},
{ -0.888994f, 0.270171f, -0.369725f},
{ 0.918348f, -0.370574f, -0.138970f},
{ 0.052371f, -0.120803f, -0.991294f},
{ -0.734386f, 0.300296f, -0.608687f},
{ -0.605885f, -0.381605f, -0.698055f},
{ 0.496803f, -0.639327f, 0.586897f},
{ 0.928304f, 0.344013f, -0.141094f},
{ -0.333282f, 0.602617f, 0.725104f},
{ 0.930194f, -0.092078f, -0.355331f},
{ -0.266171f, 0.150419f, 0.952117f},
{ -0.756679f, 0.469323f, 0.455162f},
{ -0.776463f, 0.420134f, -0.469672f},
{ 0.147109f, -0.052885f, 0.987706f},
{ 0.463748f, -0.799443f, 0.381876f},
{ -0.955964f, 0.290270f, -0.043317f},
{ -0.978443f, 0.082167f, 0.189466f},
{ -0.877093f, 0.472126f, -0.088342f},
{ 0.199501f, -0.669025f, 0.715964f},
{ -0.857572f, -0.262531f, 0.442321f},
{ -0.846619f, -0.181396f, -0.500331f},
{ -0.730536f, 0.639636f, -0.239130f},
{ 0.221257f, 0.638797f, 0.736874f},
{ -0.319982f, -0.357815f, -0.877257f},
{ 0.818219f, -0.574294f, -0.026532f},
{ -0.547544f, -0.131070f, -0.826448f},
{ -0.397864f, -0.792558f, 0.462122f},
{ 0.215699f, -0.950214f, 0.224872f},
{ 0.334694f, 0.441851f, 0.832315f},
{ -0.513545f, -0.043741f, 0.856947f},
{ -0.947093f, -0.316489f, -0.053374f},
{ 0.576372f, -0.806240f, -0.133309f},
{ 0.470185f, -0.615938f, 0.632096f},
{ -0.490755f, -0.812223f, -0.315363f},
{ -0.650631f, -0.618744f, 0.440267f},
{ 0.642151f, 0.247418f, 0.725552f},
{ -0.770280f, 0.399657f, 0.496935f},
{ 0.542846f, 0.090222f, 0.834972f},
{ -0.744667f, 0.099525f, 0.659974f},
{ 0.747024f, -0.633021f, -0.203075f},
{ 0.912763f, -0.196340f, -0.358210f},
{ -0.833760f, -0.073194f, -0.547254f},
{ -0.708795f, -0.481668f, -0.515370f},
{ 0.776710f, 0.159030f, -0.609451f},
{ -0.550233f, 0.148557f, -0.821690f},
{ -0.952003f, 0.173519f, 0.252155f},
{ 0.820067f, 0.170701f, 0.546216f},
{ 0.851419f, 0.235710f, 0.468536f},
{ 0.849442f, 0.233893f, 0.473014f},
{ 0.828813f, 0.215722f, 0.516269f},
{ 0.825851f, 0.213218f, 0.522023f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannablock2.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117