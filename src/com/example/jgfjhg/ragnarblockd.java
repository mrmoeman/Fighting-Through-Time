package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarblockd {

static String TextureName = "RagBlock4.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.360567f, 9.368929f, 5.129286f,
 1.382581f, 10.155129f, 5.782024f,
 0.413797f, 14.039353f, 7.196864f,
 -1.716243f, 11.960457f, 5.406554f,
 3.051159f, 9.370766f, 4.044009f,
 1.979587f, 10.155097f, 5.597886f,
 3.583111f, 14.038781f, 6.217204f,
 4.296590f, 11.976724f, 3.409230f,
 0.177479f, 10.338142f, 5.966118f,
 0.269674f, 9.065526f, 6.314260f,
 0.330052f, 7.013979f, 5.384825f,
 1.179514f, 5.231122f, 4.523780f,
 1.882505f, 8.819502f, 6.380224f,
 1.728115f, 11.131493f, 5.859146f,
 0.722214f, 8.912237f, 5.291762f,
 0.083571f, 10.280350f, 5.041501f,
 1.053413f, 11.456675f, 3.667403f,
 -0.546090f, 5.042123f, 1.620584f,
 -0.417108f, 6.546464f, 3.722265f,
 -2.666131f, 3.705905f, 3.172823f,
 -3.200556f, 4.026878f, 0.589118f,
 0.149208f, 9.515618f, 6.242653f,
 -3.424302f, 7.725782f, 5.803817f,
 2.895306f, 9.233533f, 4.568041f,
 -1.931431f, 10.478203f, 1.176698f,
 -1.281596f, 2.473761f, -0.149276f,
 0.934677f, 2.753262f, 2.177864f,
 -2.483471f, 9.998367f, 7.027055f,
 0.789609f, 12.306079f, 3.644188f,
 -1.706434f, 5.288168f, 2.902823f,
 -0.100062f, 4.983709f, 2.393410f,
 -1.435519f, 6.430378f, 0.081981f,
 -2.583124f, 6.191243f, 1.314832f,
 -2.477634f, 5.870055f, 2.471529f,
 -3.474609f, 3.071925f, 2.060086f,
 0.047382f, 1.684496f, 0.664316f,
 -1.450471f, 8.889219f, 7.495153f,
 0.297381f, 7.573034f, 7.282655f,
 -0.678781f, 6.168400f, 7.974401f,
 -2.225004f, 6.904055f, 8.215077f,
 1.148264f, 8.173791f, 10.049651f,
 2.082138f, 7.310382f, 9.628098f,
 1.451601f, 6.398880f, 10.084131f,
 0.504227f, 7.258278f, 10.502125f,
 -2.334487f, 9.540270f, 4.751905f,
 -0.490787f, 9.534054f, 6.021329f,
 -2.142321f, 8.035192f, 4.221014f,
 -0.687314f, 7.453127f, 5.204025f,
 -1.277981f, 2.089740f, 2.405043f,
 -1.045210f, 1.951576f, 4.300983f,
 -2.337171f, 1.850316f, 2.902013f,
 -2.157415f, 1.765441f, 4.307755f,
 -1.029674f, 0.000383f, 0.869639f,
 -0.889291f, -0.006646f, 5.156817f,
 -2.383560f, -0.004665f, 1.034513f,
 -2.383888f, -0.006698f, 5.101976f,
 -1.565799f, 3.902161f, 0.689724f,
 -2.413252f, 4.029430f, 1.231572f,
 -2.220107f, 4.036538f, 2.209984f,
 -1.001698f, 3.697929f, 1.766537f,
 -2.095279f, 0.983381f, 2.811852f,
 -2.197386f, 0.822877f, 1.495977f,
 -1.105416f, 0.827500f, 1.255238f,
 -1.006528f, 1.128042f, 2.810028f,
 3.086896f, 10.339537f, 5.054956f,
 3.188298f, 9.064859f, 5.415902f,
 2.611554f, 7.014315f, 4.683341f,
 2.878556f, 9.505852f, 2.223508f,
 2.181777f, 10.856613f, 2.061680f,
 1.544830f, 6.770681f, 1.901712f,
 1.424481f, 3.798730f, -0.308160f,
 -0.392582f, 4.412736f, -0.553123f,
 3.857236f, 9.158417f, 1.579122f,
 1.355831f, 9.445577f, -2.367706f,
 3.690748f, 10.803881f, -0.812667f,
 1.145788f, 5.287919f, 1.259454f,
 0.214907f, 6.201518f, -0.236294f,
 1.156416f, 5.870305f, 0.375507f,
 0.472779f, 3.769904f, -1.221294f,
 4.273119f, 7.817638f, -1.217839f,
 3.084647f, 5.990108f, -1.696078f,
 1.989462f, 7.017976f, -2.784659f,
 2.698642f, 8.555099f, -2.659972f,
 4.691206f, 5.447852f, -4.134280f,
 3.786980f, 4.452313f, -4.159962f,
 3.066788f, 5.127174f, -4.862274f,
 3.977513f, 6.119032f, -4.838017f,
 1.186256f, 10.509956f, -0.258155f,
 3.086897f, 10.440513f, 1.090845f,
 1.034415f, 8.909871f, -0.299717f,
 2.557080f, 8.336884f, 0.588404f,
 0.452586f, 1.446374f, -1.925414f,
 1.781484f, 2.355311f, -1.429642f,
 0.405980f, 2.241164f, -2.658479f,
 1.455315f, 2.977171f, -2.316546f,
 0.398327f, 0.013738f, -2.967437f,
 4.662951f, 0.019346f, -2.811120f,
 0.554150f, 0.026541f, -4.315812f,
 4.607820f, 0.019855f, -4.305745f,
 -0.767449f, 3.830119f, 0.268236f,
 0.096958f, 4.004228f, -0.089690f,
 0.924598f, 3.868128f, 0.284091f,
 0.088452f, 3.435730f, 1.061757f,
 1.915601f, 1.573679f, -3.765832f,
 1.002648f, 0.849964f, -4.119794f,
 0.770282f, 0.838976f, -3.033054f,
 2.130516f, 1.206557f, -2.822243f,
 0.111683f, 9.741362f, -6.321919f,
 0.622304f, 6.937264f, -9.763777f,
 5.989658f, 4.168224f, -0.805956f,
 6.535288f, 1.450283f, -4.263970f,
 0.390669f, 11.077308f, 6.723327f,
 4.474701f, 10.245587f, 11.066647f,
 0.943243f, 5.411616f, 13.403409f,
 -3.109435f, 6.105770f, 9.120897f,
 -2.483471f, 9.998367f, 7.027055f,
 0.789609f, 12.306079f, 3.644188f,
 0.789609f, 12.306079f, 3.644188f,
 -2.477634f, 5.870055f, 2.471529f,
 -2.477634f, 5.870055f, 2.471529f,
 -2.483471f, 9.998367f, 7.027055f,
 -3.474609f, 3.071925f, 2.060086f,
 -2.477634f, 5.870055f, 2.471529f,
 -2.477634f, 5.870055f, 2.471529f,
 -3.474609f, 3.071925f, 2.060086f,
 0.047382f, 1.684496f, 0.664316f,
 1.451601f, 6.398880f, 10.084131f,
 0.504227f, 7.258278f, 10.502125f,
 0.504227f, 7.258278f, 10.502125f,
 1.451601f, 6.398880f, 10.084131f,
 1.451601f, 6.398880f, 10.084131f,
 -0.678781f, 6.168400f, 7.974401f,
 0.504227f, 7.258278f, 10.502125f,
 0.504227f, 7.258278f, 10.502125f,
 -0.678781f, 6.168400f, 7.974401f,
 -2.142321f, 8.035192f, 4.221014f,
 -2.142321f, 8.035192f, 4.221014f,
 -1.277981f, 2.089740f, 2.405043f,
 -1.277981f, 2.089740f, 2.405043f,
 -1.105416f, 0.827500f, 1.255238f,
 -1.565799f, 3.902161f, 0.689724f,
 -1.277981f, 2.089740f, 2.405043f,
 -1.277981f, 2.089740f, 2.405043f,
 -2.197386f, 0.822877f, 1.495977f,
 -2.095279f, 0.983381f, 2.811852f,
 -2.095279f, 0.983381f, 2.811852f,
 -1.029674f, 0.000383f, 0.869639f,
 -1.105416f, 0.827500f, 1.255238f,
 -1.105416f, 0.827500f, 1.255238f,
 -2.197386f, 0.822877f, 1.495977f,
 -0.889291f, -0.006646f, 5.156817f,
 -1.029674f, 0.000383f, 0.869639f,
 -1.006528f, 1.128042f, 2.810028f,
 -1.006528f, 1.128042f, 2.810028f,
 -1.029674f, 0.000383f, 0.869639f,
 -1.105416f, 0.827500f, 1.255238f,
 -2.095279f, 0.983381f, 2.811852f,
 -1.006528f, 1.128042f, 2.810028f,
 -1.006528f, 1.128042f, 2.810028f,
 -0.889291f, -0.006646f, 5.156817f,
 1.179514f, 5.231122f, 4.523780f,
 1.882505f, 8.819502f, 6.380224f,
 1.882505f, 8.819502f, 6.380224f,
 1.882505f, 8.819502f, 6.380224f,
 1.882505f, 8.819502f, 6.380224f,
 1.728115f, 11.131493f, 5.859146f,
 1.053413f, 11.456675f, 3.667403f,
 1.053413f, 11.456675f, 3.667403f,
 1.728115f, 11.131493f, 5.859146f,
 1.179514f, 5.231122f, 4.523780f,
 1.179514f, 5.231122f, 4.523780f,
 -0.546090f, 5.042123f, 1.620584f,
 0.789609f, 12.306079f, 3.644188f,
 -1.931431f, 10.478203f, 1.176698f,
 -1.931431f, 10.478203f, 1.176698f,
 3.690748f, 10.803881f, -0.812667f,
 0.789609f, 12.306079f, 3.644188f,
 0.789609f, 12.306079f, 3.644188f,
 2.895306f, 9.233533f, 4.568041f,
 -1.435519f, 6.430378f, 0.081981f,
 -1.931431f, 10.478203f, 1.176698f,
 -1.931431f, 10.478203f, 1.176698f,
 -0.100062f, 4.983709f, 2.393410f,
 -0.100062f, 4.983709f, 2.393410f,
 0.934677f, 2.753262f, 2.177864f,
 3.690748f, 10.803881f, -0.812667f,
 1.156416f, 5.870305f, 0.375507f,
 1.156416f, 5.870305f, 0.375507f,
 -1.435519f, 6.430378f, 0.081981f,
 -1.435519f, 6.430378f, 0.081981f,
 -1.281596f, 2.473761f, -0.149276f,
 2.895306f, 9.233533f, 4.568041f,
 -0.100062f, 4.983709f, 2.393410f,
 -0.100062f, 4.983709f, 2.393410f,
 0.472779f, 3.769904f, -1.221294f,
 1.156416f, 5.870305f, 0.375507f,
 1.156416f, 5.870305f, 0.375507f,
 0.934677f, 2.753262f, 2.177864f,
 0.047382f, 1.684496f, 0.664316f,
 0.047382f, 1.684496f, 0.664316f,
 0.472779f, 3.769904f, -1.221294f,
 0.047382f, 1.684496f, 0.664316f,
 -1.281596f, 2.473761f, -0.149276f,
 -1.281596f, 2.473761f, -0.149276f,
 3.977513f, 6.119032f, -4.838017f,
 3.977513f, 6.119032f, -4.838017f,
 3.066788f, 5.127174f, -4.862274f,
 3.066788f, 5.127174f, -4.862274f,
 3.066788f, 5.127174f, -4.862274f,
 1.989462f, 7.017976f, -2.784659f,
 3.977513f, 6.119032f, -4.838017f,
 3.977513f, 6.119032f, -4.838017f,
 1.034415f, 8.909871f, -0.299717f,
 1.034415f, 8.909871f, -0.299717f,
 1.989462f, 7.017976f, -2.784659f,
 0.770282f, 0.838976f, -3.033054f,
 0.452586f, 1.446374f, -1.925414f,
 0.452586f, 1.446374f, -1.925414f,
 0.452586f, 1.446374f, -1.925414f,
 0.452586f, 1.446374f, -1.925414f,
 -0.767449f, 3.830119f, 0.268236f,
 1.915601f, 1.573679f, -3.765832f,
 1.915601f, 1.573679f, -3.765832f,
 1.002648f, 0.849964f, -4.119794f,
 1.002648f, 0.849964f, -4.119794f,
 0.770282f, 0.838976f, -3.033054f,
 0.770282f, 0.838976f, -3.033054f,
 0.398327f, 0.013738f, -2.967437f,
 0.770282f, 0.838976f, -3.033054f,
 0.398327f, 0.013738f, -2.967437f,
 2.130516f, 1.206557f, -2.822243f,
 2.130516f, 1.206557f, -2.822243f,
 0.398327f, 0.013738f, -2.967437f,
 4.662951f, 0.019346f, -2.811120f,
 1.915601f, 1.573679f, -3.765832f,
 2.130516f, 1.206557f, -2.822243f,
 2.130516f, 1.206557f, -2.822243f,
 4.662951f, 0.019346f, -2.811120f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.248319f, -0.230561f, 0.940840f},
{ -0.305995f, -0.340317f, 0.889129f},
{ -0.318945f, -0.365604f, 0.874419f},
{ -0.333833f, -0.395017f, 0.855872f},
{ 0.753074f, -0.207849f, 0.624242f},
{ 0.774675f, -0.364427f, 0.516790f},
{ 0.772894f, -0.337406f, 0.537394f},
{ 0.775646f, -0.398329f, 0.489600f},
{ 0.316895f, -0.914511f, 0.251491f},
{ 0.294287f, -0.193163f, 0.935993f},
{ -0.545316f, -0.329674f, 0.770678f},
{ -0.566183f, -0.141928f, 0.811969f},
{ -0.522780f, 0.485870f, 0.700451f},
{ 0.187749f, 0.777601f, 0.600073f},
{ -0.986416f, 0.064220f, -0.151190f},
{ -0.946963f, 0.312062f, 0.076672f},
{ 0.289004f, 0.955597f, 0.057546f},
{ -0.756493f, -0.467059f, 0.457793f},
{ 0.269652f, -0.957967f, -0.097912f},
{ -0.040675f, 0.997771f, 0.052908f},
{ -0.697483f, 0.602314f, -0.388247f},
{ -0.649876f, 0.290816f, 0.702202f},
{ -0.986486f, 0.040767f, 0.158693f},
{ 0.343934f, -0.231947f, 0.909896f},
{ 0.769497f, -0.202134f, 0.605819f},
{ -0.433647f, 0.181533f, -0.882608f},
{ -0.931068f, 0.154916f, -0.330323f},
{ -0.702617f, -0.397475f, 0.590206f},
{ 0.612653f, -0.400436f, 0.681401f},
{ 0.512915f, -0.421101f, 0.748059f},
{ -0.233950f, -0.407525f, 0.882718f},
{ -0.118730f, -0.396072f, 0.910511f},
{ -0.747002f, -0.009027f, -0.664760f},
{ -0.758000f, -0.601193f, 0.252988f},
{ -0.402214f, -0.577526f, -0.710414f},
{ 0.174442f, -0.982902f, 0.058945f},
{ 0.241181f, 0.927739f, 0.284838f},
{ -0.492741f, -0.003876f, 0.870167f},
{ 0.947817f, 0.061459f, -0.312835f},
{ 0.343964f, -0.928362f, 0.140832f},
{ 0.054128f, -0.979171f, -0.195691f},
{ -0.871831f, -0.303101f, 0.384760f},
{ -0.301205f, 0.854426f, 0.423357f},
{ -0.955495f, 0.266163f, 0.127231f},
{ 0.523571f, 0.601003f, 0.603878f},
{ 0.789157f, 0.052956f, -0.611904f},
{ -0.826607f, -0.519221f, -0.217094f},
{ 0.456303f, -0.713974f, 0.531064f},
{ -0.967653f, -0.042403f, -0.248697f},
{ -0.715224f, -0.501139f, -0.487150f},
{ 0.682577f, -0.151600f, -0.714917f},
{ -0.143317f, -0.692198f, -0.707335f},
{ -0.428160f, 0.684629f, 0.589883f},
{ -0.489304f, 0.123641f, 0.863304f},
{ 0.507962f, 0.269653f, 0.818085f},
{ 0.932571f, 0.342029f, 0.115446f},
{ 0.966227f, 0.206381f, 0.154314f},
{ 0.501272f, 0.533564f, -0.681202f},
{ -0.625433f, 0.541975f, -0.561335f},
{ -0.930600f, 0.259391f, 0.258263f},
{ 0.003515f, -0.999992f, -0.001755f},
{ 0.000756f, -0.999999f, -0.000755f},
{ 0.002779f, -0.999995f, -0.001488f},
{ 0.000053f, -1.000000f, -0.000500f},
{ -0.818845f, 0.417559f, -0.393875f},
{ -0.310604f, 0.874144f, 0.373359f},
{ 0.840275f, 0.251258f, -0.480425f},
{ 0.335368f, 0.854607f, 0.396454f},
{ 0.862905f, -0.489204f, 0.126786f},
{ 0.954358f, -0.153915f, 0.255951f},
{ 0.831175f, 0.516608f, 0.205584f},
{ 0.712464f, 0.695201f, -0.095345f},
{ 0.971927f, -0.067599f, -0.225361f},
{ 0.769954f, -0.560900f, -0.304241f},
{ 0.584603f, 0.613325f, -0.531105f},
{ -0.137732f, 0.162939f, -0.976975f},
{ 0.985333f, -0.128523f, 0.112255f},
{ -0.355827f, -0.162763f, -0.920269f},
{ 0.733359f, -0.402438f, -0.547931f},
{ 0.777368f, -0.485147f, 0.400415f},
{ 0.962963f, -0.150659f, -0.223615f},
{ 0.191643f, -0.140364f, -0.971376f},
{ -0.346778f, 0.207116f, -0.914794f},
{ 0.979838f, -0.191387f, 0.057341f},
{ -0.015088f, -0.975196f, 0.220829f},
{ 0.296629f, 0.580042f, -0.758659f},
{ -0.796967f, -0.337703f, -0.500800f},
{ 0.167027f, 0.787250f, -0.593582f},
{ -0.933233f, -0.213065f, -0.289274f},
{ 0.680296f, 0.632954f, -0.369550f},
{ 0.956399f, 0.262357f, 0.128332f},
{ 0.199840f, 0.732403f, -0.650883f},
{ -0.068608f, -0.817069f, 0.572443f},
{ -0.947187f, -0.288993f, -0.138998f},
{ 0.162061f, -0.610525f, 0.775239f},
{ -0.901173f, -0.432320f, -0.031419f},
{ -0.169647f, 0.687774f, -0.705823f},
{ -0.453485f, -0.784442f, 0.423087f},
{ -0.803106f, 0.392119f, -0.448624f},
{ 0.881761f, 0.425944f, 0.202654f},
{ 0.180056f, 0.887132f, -0.424944f},
{ -0.161282f, -0.790663f, 0.590626f},
{ 0.759660f, -0.409229f, 0.505418f},
{ -0.730031f, -0.290752f, 0.618480f},
{ 0.456862f, 0.214584f, 0.863268f},
{ -0.553425f, 0.463905f, -0.691746f},
{ 0.188655f, 0.635756f, -0.748481f},
{ -0.001649f, -0.999999f, -0.000280f},
{ -0.000981f, -0.999997f, -0.002104f},
{ 0.000945f, -0.999973f, -0.007363f},
{ 0.001656f, -0.999955f, -0.009303f},
{ 0.335582f, 0.834486f, -0.437057f},
{ -0.208217f, 0.408914f, -0.888502f},
{ -0.464804f, 0.150958f, 0.872450f},
{ 0.400321f, 0.856965f, 0.324583f},
{ -0.786396f, -0.530874f, 0.315839f},
{ -0.788324f, -0.535614f, 0.302760f},
{ -0.787129f, -0.532643f, 0.310999f},
{ -0.789004f, -0.537357f, 0.297859f},
{ -0.498174f, 0.635306f, 0.590092f},
{ -0.499248f, 0.640201f, 0.583861f},
{ -0.499142f, 0.639715f, 0.584485f},
{ -0.500238f, 0.644813f, 0.577909f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagBlock4.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105