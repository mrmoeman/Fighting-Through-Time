package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnaridlea {

static String TextureName = "Idile1.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.450773f, 10.136889f, 3.768642f,
 0.832100f, 11.050561f, 5.020712f,
 -0.573394f, 15.027326f, 5.432652f,
 -1.691431f, 12.684115f, 3.206155f,
 3.087634f, 10.126822f, 4.290606f,
 1.448756f, 11.049254f, 5.118702f,
 2.693247f, 15.023757f, 5.938752f,
 4.536230f, 12.682079f, 3.974042f,
 -0.320691f, 11.209616f, 4.638563f,
 -0.422565f, 9.989565f, 5.127180f,
 0.004314f, 7.853192f, 4.556858f,
 1.530649f, 5.968180f, 3.982555f,
 0.988316f, 9.808271f, 5.924190f,
 1.125323f, 12.041440f, 5.131553f,
 0.346290f, 9.779153f, 4.396796f,
 0.083900f, 11.177862f, 3.835538f,
 1.698630f, 12.076403f, 2.941907f,
 0.372801f, 5.691695f, 0.645711f,
 0.022379f, 7.275403f, 2.780126f,
 -1.846751f, 4.544041f, 2.055121f,
 -2.268175f, 4.734830f, -0.443932f,
 -0.225605f, 9.494741f, 5.190152f,
 -3.982131f, 9.172738f, 2.554355f,
 2.645899f, 9.763322f, 4.641950f,
 -0.268751f, 11.223885f, -0.472140f,
 -0.667626f, 3.318843f, -1.400178f,
 1.000178f, 3.009250f, 2.437051f,
 -2.764869f, 10.535988f, 5.092442f,
 1.599774f, 12.943690f, 2.769500f,
 -0.787034f, 5.938234f, 1.927575f,
 0.818937f, 5.633292f, 1.418440f,
 -0.519661f, 7.083497f, -0.901534f,
 -1.660267f, 6.847385f, 0.330856f,
 -1.558312f, 6.519929f, 1.495997f,
 -2.725024f, 3.920784f, 0.981905f,
 0.126652f, 2.165373f, 0.422627f,
 -2.430706f, 8.463235f, 4.856699f,
 -1.464824f, 6.828088f, 3.742175f,
 -3.112300f, 6.050345f, 3.456236f,
 -4.169067f, 7.195505f, 4.205367f,
 -1.267490f, 5.216987f, 6.202395f,
 -0.728330f, 4.403679f, 5.278441f,
 -1.800257f, 3.892783f, 5.090637f,
 -2.346103f, 4.700941f, 6.019199f,
 -2.084612f, 10.702581f, 2.589205f,
 -0.924311f, 10.570400f, 4.564377f,
 -1.923617f, 9.136688f, 2.262276f,
 -1.107544f, 8.489659f, 3.789414f,
 -1.049190f, 2.287632f, 1.674853f,
 -1.047389f, 2.935012f, 3.533705f,
 -2.159962f, 2.431249f, 2.004550f,
 -2.159810f, 2.934646f, 3.407813f,
 -1.030556f, -0.010321f, 0.877446f,
 -0.889358f, -0.006614f, 5.156851f,
 -2.384511f, -0.009400f, 1.040283f,
 -2.384310f, -0.006357f, 5.102040f,
 -0.662341f, 4.527949f, -0.281926f,
 -1.476003f, 4.667857f, 0.258636f,
 -1.262811f, 4.703960f, 1.214587f,
 -0.166464f, 4.299323f, 0.826913f,
 -2.163346f, 1.277373f, 2.709048f,
 -2.197289f, 0.822133f, 1.495973f,
 -1.104513f, 0.819945f, 1.256823f,
 -1.066754f, 1.282712f, 2.777117f,
 2.689132f, 11.205337f, 5.100327f,
 2.592086f, 9.987956f, 5.612528f,
 2.359959f, 7.853192f, 4.936898f,
 3.634604f, 9.779131f, 2.498515f,
 3.280577f, 11.177517f, 1.992638f,
 2.397006f, 7.275401f, 1.411571f,
 2.652295f, 4.033855f, -0.158299f,
 0.948746f, 5.191054f, -2.184007f,
 5.326597f, 9.254745f, 2.008721f,
 3.903377f, 9.900940f, -2.518842f,
 5.620593f, 11.269075f, -0.294475f,
 2.063523f, 5.937706f, 0.284838f,
 1.132270f, 6.865319f, -1.253641f,
 2.075636f, 6.520055f, -0.600298f,
 2.298663f, 4.059146f, -1.807887f,
 6.289606f, 9.442872f, -1.118658f,
 5.900276f, 7.371585f, -1.792997f,
 5.033486f, 8.023292f, -3.294322f,
 5.159474f, 9.720819f, -3.076104f,
 8.370422f, 7.346923f, -3.425633f,
 7.853074f, 6.125511f, -3.657142f,
 7.287055f, 6.551078f, -4.637514f,
 7.804404f, 7.772490f, -4.406005f,
 3.284301f, 10.702775f, -0.510617f,
 4.440067f, 10.559546f, 1.505586f,
 2.920997f, 9.136688f, -0.534763f,
 3.845787f, 8.484984f, 0.936331f,
 1.199664f, 2.015769f, -1.504730f,
 2.500794f, 1.364454f, -0.130380f,
 2.276751f, 2.247740f, -1.880744f,
 3.254530f, 1.792492f, -0.843870f,
 0.507183f, -0.001151f, -3.175732f,
 2.527918f, -0.006620f, 0.604035f,
 1.759109f, 0.003065f, -3.715800f,
 3.795329f, -0.006759f, -0.190928f,
 0.060686f, 4.523059f, -0.738328f,
 0.988336f, 4.696740f, -1.157498f,
 1.673305f, 4.442130f, -0.289053f,
 0.691294f, 4.128292f, 0.304862f,
 2.455646f, 1.119511f, -2.171200f,
 1.829050f, 0.825527f, -3.220656f,
 0.763281f, 0.825444f, -2.877950f,
 1.620789f, 0.922655f, -1.500899f,
 3.900000f, 10.054371f, -7.544414f,
 6.401742f, 7.589576f, -10.269555f,
 8.655161f, 6.520033f, 0.265319f,
 11.156901f, 4.055240f, -2.459825f,
 0.321590f, 9.344011f, 5.511141f,
 2.193955f, 4.273664f, 8.134161f,
 -3.624157f, 1.611197f, 7.019675f,
 -5.532232f, 6.642618f, 4.455614f,
 -2.764869f, 10.535988f, 5.092442f,
 1.599774f, 12.943690f, 2.769500f,
 1.599774f, 12.943690f, 2.769500f,
 -1.558312f, 6.519929f, 1.495997f,
 -1.558312f, 6.519929f, 1.495997f,
 -2.764869f, 10.535988f, 5.092442f,
 -2.725024f, 3.920784f, 0.981905f,
 -1.558312f, 6.519929f, 1.495997f,
 -1.558312f, 6.519929f, 1.495997f,
 -2.725024f, 3.920784f, 0.981905f,
 0.126652f, 2.165373f, 0.422627f,
 -1.800257f, 3.892783f, 5.090637f,
 -2.346103f, 4.700941f, 6.019199f,
 -2.346103f, 4.700941f, 6.019199f,
 -1.800257f, 3.892783f, 5.090637f,
 -1.800257f, 3.892783f, 5.090637f,
 -3.112300f, 6.050345f, 3.456236f,
 -2.346103f, 4.700941f, 6.019199f,
 -2.346103f, 4.700941f, 6.019199f,
 -3.112300f, 6.050345f, 3.456236f,
 -1.923617f, 9.136688f, 2.262276f,
 -1.923617f, 9.136688f, 2.262276f,
 -1.049190f, 2.287632f, 1.674853f,
 -1.049190f, 2.287632f, 1.674853f,
 -1.104513f, 0.819945f, 1.256823f,
 -0.662341f, 4.527949f, -0.281926f,
 -1.049190f, 2.287632f, 1.674853f,
 -1.049190f, 2.287632f, 1.674853f,
 -2.197289f, 0.822133f, 1.495973f,
 -2.163346f, 1.277373f, 2.709048f,
 -2.163346f, 1.277373f, 2.709048f,
 -1.030556f, -0.010321f, 0.877446f,
 -1.104513f, 0.819945f, 1.256823f,
 -1.104513f, 0.819945f, 1.256823f,
 -2.197289f, 0.822133f, 1.495973f,
 -0.889358f, -0.006614f, 5.156851f,
 -1.030556f, -0.010321f, 0.877446f,
 -1.066754f, 1.282712f, 2.777117f,
 -1.066754f, 1.282712f, 2.777117f,
 -1.030556f, -0.010321f, 0.877446f,
 -1.104513f, 0.819945f, 1.256823f,
 -2.163346f, 1.277373f, 2.709048f,
 -1.066754f, 1.282712f, 2.777117f,
 -1.066754f, 1.282712f, 2.777117f,
 -0.889358f, -0.006614f, 5.156851f,
 1.530649f, 5.968180f, 3.982555f,
 0.988316f, 9.808271f, 5.924190f,
 0.988316f, 9.808271f, 5.924190f,
 0.988316f, 9.808271f, 5.924190f,
 0.988316f, 9.808271f, 5.924190f,
 1.125323f, 12.041440f, 5.131553f,
 1.698630f, 12.076403f, 2.941907f,
 1.698630f, 12.076403f, 2.941907f,
 1.125323f, 12.041440f, 5.131553f,
 1.530649f, 5.968180f, 3.982555f,
 1.530649f, 5.968180f, 3.982555f,
 0.372801f, 5.691695f, 0.645711f,
 1.599774f, 12.943690f, 2.769500f,
 -0.268751f, 11.223885f, -0.472140f,
 -0.268751f, 11.223885f, -0.472140f,
 5.620593f, 11.269075f, -0.294475f,
 1.599774f, 12.943690f, 2.769500f,
 1.599774f, 12.943690f, 2.769500f,
 2.645899f, 9.763322f, 4.641950f,
 -0.519661f, 7.083497f, -0.901534f,
 -0.268751f, 11.223885f, -0.472140f,
 -0.268751f, 11.223885f, -0.472140f,
 0.818937f, 5.633292f, 1.418440f,
 0.818937f, 5.633292f, 1.418440f,
 1.000178f, 3.009250f, 2.437051f,
 5.620593f, 11.269075f, -0.294475f,
 2.075636f, 6.520055f, -0.600298f,
 2.075636f, 6.520055f, -0.600298f,
 -0.519661f, 7.083497f, -0.901534f,
 -0.519661f, 7.083497f, -0.901534f,
 -0.667626f, 3.318843f, -1.400178f,
 2.645899f, 9.763322f, 4.641950f,
 0.818937f, 5.633292f, 1.418440f,
 0.818937f, 5.633292f, 1.418440f,
 2.298663f, 4.059146f, -1.807887f,
 2.075636f, 6.520055f, -0.600298f,
 2.075636f, 6.520055f, -0.600298f,
 1.000178f, 3.009250f, 2.437051f,
 0.126652f, 2.165373f, 0.422627f,
 0.126652f, 2.165373f, 0.422627f,
 2.298663f, 4.059146f, -1.807887f,
 0.126652f, 2.165373f, 0.422627f,
 -0.667626f, 3.318843f, -1.400178f,
 -0.667626f, 3.318843f, -1.400178f,
 7.804404f, 7.772490f, -4.406005f,
 7.804404f, 7.772490f, -4.406005f,
 7.287055f, 6.551078f, -4.637514f,
 7.287055f, 6.551078f, -4.637514f,
 7.287055f, 6.551078f, -4.637514f,
 5.033486f, 8.023292f, -3.294322f,
 7.804404f, 7.772490f, -4.406005f,
 7.804404f, 7.772490f, -4.406005f,
 2.920997f, 9.136688f, -0.534763f,
 2.920997f, 9.136688f, -0.534763f,
 5.033486f, 8.023292f, -3.294322f,
 0.763281f, 0.825444f, -2.877950f,
 1.199664f, 2.015769f, -1.504730f,
 1.199664f, 2.015769f, -1.504730f,
 1.199664f, 2.015769f, -1.504730f,
 1.199664f, 2.015769f, -1.504730f,
 0.060686f, 4.523059f, -0.738328f,
 2.455646f, 1.119511f, -2.171200f,
 2.455646f, 1.119511f, -2.171200f,
 1.829050f, 0.825527f, -3.220656f,
 1.829050f, 0.825527f, -3.220656f,
 0.763281f, 0.825444f, -2.877950f,
 0.763281f, 0.825444f, -2.877950f,
 0.507183f, -0.001151f, -3.175732f,
 0.763281f, 0.825444f, -2.877950f,
 0.507183f, -0.001151f, -3.175732f,
 1.620789f, 0.922655f, -1.500899f,
 1.620789f, 0.922655f, -1.500899f,
 0.507183f, -0.001151f, -3.175732f,
 2.527918f, -0.006620f, 0.604035f,
 2.455646f, 1.119511f, -2.171200f,
 1.620789f, 0.922655f, -1.500899f,
 1.620789f, 0.922655f, -1.500899f,
 2.527918f, -0.006620f, 0.604035f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.637188f, -0.143120f, 0.757303f},
{ -0.667156f, -0.251931f, 0.701023f},
{ -0.672993f, -0.278516f, 0.685207f},
{ -0.678916f, -0.308941f, 0.666054f},
{ 0.397076f, -0.112257f, 0.910895f},
{ 0.460509f, -0.280343f, 0.842223f},
{ 0.450599f, -0.251561f, 0.856550f},
{ 0.472718f, -0.317615f, 0.821985f},
{ 0.305893f, -0.882687f, 0.356781f},
{ -0.159850f, -0.104640f, 0.981580f},
{ -0.717097f, -0.395383f, 0.573972f},
{ -0.855662f, -0.066520f, 0.513242f},
{ -0.763995f, 0.549799f, 0.337687f},
{ -0.101054f, 0.843348f, 0.527780f},
{ -0.848914f, 0.007020f, -0.528485f},
{ -0.812194f, 0.399633f, -0.425012f},
{ 0.334021f, 0.940593f, 0.060945f},
{ -0.818632f, -0.523198f, 0.236865f},
{ 0.185532f, -0.982491f, 0.017030f},
{ -0.007383f, 0.996095f, 0.087984f},
{ -0.438119f, 0.667499f, -0.602077f},
{ -0.670452f, 0.483010f, 0.563201f},
{ -0.969874f, 0.189978f, -0.152487f},
{ 0.035749f, -0.229552f, 0.972640f},
{ 0.490177f, -0.151521f, 0.858352f},
{ -0.495269f, 0.178110f, -0.850286f},
{ -0.792363f, 0.059597f, -0.607132f},
{ -0.742725f, -0.465069f, 0.481737f},
{ 0.332545f, -0.426199f, 0.841290f},
{ 0.445327f, -0.392674f, 0.804669f},
{ -0.395685f, -0.196479f, 0.897123f},
{ -0.115438f, -0.491371f, 0.863266f},
{ -0.770362f, 0.085033f, -0.631912f},
{ -0.862279f, -0.477380f, 0.169066f},
{ -0.371108f, -0.544851f, -0.751941f},
{ -0.047328f, -0.998845f, -0.008285f},
{ 0.532778f, 0.308295f, 0.788100f},
{ -0.670419f, -0.239467f, 0.702278f},
{ 0.923213f, -0.278717f, -0.264566f},
{ -0.155037f, -0.852067f, -0.499946f},
{ -0.379618f, -0.533112f, -0.756096f},
{ -0.968052f, 0.126447f, 0.216533f},
{ -0.249236f, 0.494892f, 0.832444f},
{ -0.851320f, 0.516881f, 0.089939f},
{ -0.529358f, 0.475872f, 0.702372f},
{ 0.878336f, -0.135970f, -0.458300f},
{ -0.436027f, -0.065924f, -0.897516f},
{ 0.889659f, -0.282941f, 0.358401f},
{ -0.889678f, 0.069502f, -0.451267f},
{ -0.782579f, -0.284690f, -0.553644f},
{ 0.755679f, -0.400532f, -0.518192f},
{ -0.020729f, -0.655664f, -0.754768f},
{ -0.360567f, 0.815054f, 0.453517f},
{ -0.694791f, 0.401407f, 0.596773f},
{ 0.628647f, 0.216902f, 0.746831f},
{ 0.996572f, -0.075864f, 0.033016f},
{ 0.924972f, 0.247589f, 0.288316f},
{ 0.607038f, 0.303814f, -0.734304f},
{ -0.674136f, 0.342746f, -0.654267f},
{ -0.906057f, 0.294579f, 0.303782f},
{ -0.000574f, -0.999999f, 0.000885f},
{ -0.000275f, -1.000000f, 0.000777f},
{ -0.000494f, -1.000000f, 0.000856f},
{ -0.000199f, -1.000000f, 0.000749f},
{ -0.891372f, 0.317318f, -0.323675f},
{ -0.405284f, 0.818624f, 0.406939f},
{ 0.875185f, 0.246590f, -0.416227f},
{ 0.398625f, 0.818487f, 0.413736f},
{ 0.718588f, -0.465994f, 0.516218f},
{ 0.749927f, -0.087754f, 0.655674f},
{ 0.697998f, 0.526635f, 0.485236f},
{ 0.805661f, 0.573540f, 0.148197f},
{ 0.964725f, -0.187387f, 0.184910f},
{ 0.803562f, -0.594905f, -0.019389f},
{ 0.777852f, 0.551612f, -0.301116f},
{ 0.275494f, 0.173196f, -0.945572f},
{ 0.887984f, -0.242024f, 0.391035f},
{ -0.165985f, 0.025380f, -0.985802f},
{ 0.771986f, -0.404617f, -0.490226f},
{ 0.793339f, -0.524996f, 0.308208f},
{ 0.924225f, -0.338183f, 0.177315f},
{ 0.605428f, -0.425818f, -0.672410f},
{ -0.115997f, 0.122374f, -0.985682f},
{ 0.902636f, 0.110673f, 0.415933f},
{ 0.180844f, -0.934242f, 0.307389f},
{ 0.377331f, 0.645206f, -0.664327f},
{ -0.425532f, -0.561214f, -0.709903f},
{ -0.035925f, 0.808939f, -0.586794f},
{ -0.698364f, -0.432078f, -0.570610f},
{ 0.810983f, 0.441781f, 0.383585f},
{ 0.799018f, 0.472463f, 0.371952f},
{ -0.028799f, 0.916023f, -0.400090f},
{ 0.048481f, -0.858703f, 0.510175f},
{ -0.783931f, -0.485083f, -0.387489f},
{ 0.293281f, -0.795435f, 0.530348f},
{ -0.903408f, -0.324836f, -0.279884f},
{ 0.100213f, 0.350823f, -0.931064f},
{ -0.968821f, -0.229128f, -0.094269f},
{ 0.379678f, 0.525737f, -0.761213f},
{ 0.830630f, 0.466624f, 0.303835f},
{ 0.982403f, 0.121949f, 0.141469f},
{ -0.475848f, -0.374452f, 0.795835f},
{ -0.020476f, -0.515960f, 0.856368f},
{ -0.784125f, 0.555941f, -0.275821f},
{ -0.706335f, 0.187358f, 0.682633f},
{ 0.138415f, 0.629967f, -0.764188f},
{ 0.903774f, 0.255729f, -0.343214f},
{ -0.001364f, -0.999997f, -0.001999f},
{ -0.000636f, -0.999998f, -0.002129f},
{ 0.001463f, -0.999996f, -0.002502f},
{ 0.002229f, -0.999994f, -0.002639f},
{ 0.462083f, 0.876055f, 0.137867f},
{ 0.559683f, 0.332344f, -0.759146f},
{ -0.929036f, 0.365613f, -0.056736f},
{ -0.055720f, 0.904303f, 0.423239f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.316894f, 0.340860f, 0.885095f},
{ -0.319154f, 0.335440f, 0.886352f},
{ -0.318922f, 0.336000f, 0.886224f},
{ -0.321221f, 0.330451f, 0.887479f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: Idile1.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105