package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieBlockb {

static String TextureName = "CurrieBlock2.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 1.065733f, 5.264036f, 2.844059f,
 1.941721f, 2.429064f, 3.372837f,
 1.363590f, 5.071102f, 1.433763f,
 2.241821f, 2.244174f, 1.949347f,
 0.642949f, 4.943635f, 1.550036f,
 0.999171f, 5.569169f, -0.241117f,
 -1.189243f, 4.834929f, 1.243694f,
 -1.168691f, 5.612716f, -0.501357f,
 -0.274160f, 4.874248f, 1.201859f,
 0.494388f, 5.014295f, 0.551303f,
 -0.072501f, 5.115242f, -0.061494f,
 -0.200585f, 5.657647f, 1.787631f,
 0.866419f, 5.900564f, 0.738098f,
 -0.213454f, 6.281923f, -0.348351f,
 -0.167123f, 6.768296f, 1.782514f,
 0.684538f, 6.805721f, 0.917319f,
 -0.199930f, 7.173207f, 0.041692f,
 -0.190493f, 6.841156f, 0.711641f,
 0.245181f, 6.680480f, 0.368432f,
 -0.205359f, 6.410344f, 0.030453f,
 -0.195428f, 7.531075f, 0.485512f,
 0.420579f, 7.148628f, -0.018511f,
 -0.198989f, 6.766188f, -0.495981f,
 -0.201795f, 7.796456f, 0.011703f,
 0.236138f, 7.495321f, -0.284276f,
 -0.200153f, 7.254614f, -0.682162f,
 -0.102168f, 2.640617f, 0.531519f,
 0.432992f, 2.101563f, -0.580168f,
 -1.222502f, 0.000168f, 1.332231f,
 1.067571f, 0.000181f, -0.957822f,
 -0.417301f, 4.047735f, 1.292293f,
 0.218610f, 5.260681f, -0.459258f,
 -0.268298f, 5.040931f, 1.148840f,
 -0.084444f, 5.495408f, -0.063189f,
 0.399506f, 5.286298f, 0.649291f,
 0.095660f, 5.185091f, 0.905992f,
 0.259379f, 5.413111f, 0.234958f,
 0.544776f, 2.546081f, 0.739413f,
 0.985313f, 2.350257f, 0.406399f,
 1.486753f, 0.000164f, 1.332478f,
 0.132181f, -0.000131f, 1.960322f,
 0.848136f, 2.141270f, -0.165990f,
 1.695554f, -0.000153f, 0.396981f,
 0.478092f, 4.250439f, 1.369480f,
 1.265202f, 4.949378f, 0.851008f,
 1.137305f, 5.182095f, 0.139200f,
 1.282666f, 3.456775f, 2.407019f,
 1.679929f, 3.320304f, 1.128365f,
 1.483127f, 3.693575f, 1.229715f,
 1.119160f, 3.843997f, 2.400194f,
 0.826739f, 4.471317f, 0.207375f,
 0.689316f, 4.355394f, 0.582737f,
 1.685468f, 3.913658f, 1.460777f,
 1.269111f, 4.207874f, 2.899165f,
 0.519405f, 4.807591f, 0.911107f,
 2.007825f, 3.941118f, 1.340891f,
 1.916899f, 4.177534f, 2.760614f,
 1.338104f, 4.980406f, 0.951743f,
 2.221798f, 3.533062f, 1.235828f,
 2.080623f, 3.790144f, 2.767042f,
 1.549962f, 4.969606f, 0.552413f,
 2.040200f, 3.214625f, 1.305399f,
 1.603172f, 3.416681f, 2.913155f,
 0.784850f, 5.209533f, 0.183276f,
 -0.552119f, 2.629336f, -0.016838f,
 -1.850551f, -0.000155f, -0.022527f,
 -1.222759f, 0.000164f, -1.377033f,
 -0.489181f, 2.469289f, -0.604204f,
 -0.287188f, -0.000163f, -1.585893f,
 -0.069325f, 2.221581f, -0.780819f,
 -1.425381f, 4.945326f, -0.125461f,
 -1.227938f, 4.252028f, 0.746977f,
 -0.872919f, 5.202111f, -0.582546f,
 -0.767319f, 5.293332f, 0.474002f,
 -0.546251f, 5.185898f, 0.789182f,
 -0.402366f, 5.427926f, 0.070152f,
 -1.576866f, 3.255169f, 0.568526f,
 -1.567440f, 3.675391f, 0.594729f,
 -0.872419f, 3.436141f, -0.441695f,
 -0.873720f, 3.048392f, -0.558228f,
 -0.800833f, 4.367438f, 0.030078f,
 -0.673786f, 4.474748f, -0.342734f,
 -2.118576f, 3.947322f, 0.757456f,
 -1.132937f, 3.438791f, -0.344462f,
 -0.892563f, 4.808290f, 0.397206f,
 -2.425611f, 3.708132f, 0.221251f,
 -1.389966f, 3.375591f, -0.522223f,
 -1.447765f, 4.491900f, 0.246976f,
 -2.435686f, 3.289435f, 0.196744f,
 -1.356133f, 3.061023f, -0.899098f,
 -1.696312f, 4.664683f, -0.101638f,
 -2.137899f, 3.090180f, 0.706825f,
 -1.204494f, 2.819428f, -0.661261f,
 -0.628274f, 5.209960f, -0.330749f,
 -0.823877f, 5.041325f, 0.341802f,
 -1.249755f, 5.897606f, 0.774765f,
 -1.056455f, 6.805521f, 0.954892f,
 -0.641353f, 6.680589f, 0.387414f,
 -0.833750f, 7.148767f, 0.007990f,
 -0.657696f, 7.496571f, -0.264861f,
 -1.638292f, 1.585248f, 0.168222f,
 -1.301745f, 1.411940f, 1.227785f,
 -0.348100f, 1.442206f, 1.827370f,
 0.537939f, 1.459085f, 1.585400f,
 0.593946f, 1.054744f, 0.789093f,
 0.051544f, 0.932035f, -0.088720f,
 -0.765059f, 1.199543f, -0.523016f,
 -1.330121f, 1.675017f, -0.287769f,
 1.282666f, 3.456775f, 2.407019f,
 1.282666f, 3.456775f, 2.407019f,
 1.679929f, 3.320304f, 1.128365f,
 1.679929f, 3.320304f, 1.128365f,
 0.826739f, 4.471317f, 0.207375f,
 0.826739f, 4.471317f, 0.207375f,
 1.603172f, 3.416681f, 2.913155f,
 1.603172f, 3.416681f, 2.913155f,
 0.051544f, 0.932035f, -0.088720f,
 0.051544f, 0.932035f, -0.088720f,
 0.432992f, 2.101563f, -0.580168f,
 -1.301745f, 1.411940f, 1.227785f,
 -1.301745f, 1.411940f, 1.227785f,
 -0.102168f, 2.640617f, 0.531519f,
 -0.102168f, 2.640617f, 0.531519f,
 -0.417301f, 4.047735f, 1.292293f,
 -0.417301f, 4.047735f, 1.292293f,
 0.432992f, 2.101563f, -0.580168f,
 0.218610f, 5.260681f, -0.459258f,
 0.218610f, 5.260681f, -0.459258f,
 -0.417301f, 4.047735f, 1.292293f,
 -0.268298f, 5.040931f, 1.148840f,
 -0.268298f, 5.040931f, 1.148840f,
 0.218610f, 5.260681f, -0.459258f,
 0.218610f, 5.260681f, -0.459258f,
 -0.084444f, 5.495408f, -0.063189f,
 -1.576866f, 3.255169f, 0.568526f,
 -1.576866f, 3.255169f, 0.568526f,
 -0.873720f, 3.048392f, -0.558228f,
 -0.673786f, 4.474748f, -0.342734f,
 -0.673786f, 4.474748f, -0.342734f,
 -0.873720f, 3.048392f, -0.558228f,
 -2.137899f, 3.090180f, 0.706825f,
 -2.137899f, 3.090180f, 0.706825f,
 -0.200585f, 5.657647f, 1.787631f,
 -0.274160f, 4.874248f, 1.201859f,
 -0.274160f, 4.874248f, 1.201859f,
 -0.213454f, 6.281923f, -0.348351f,
 -0.072501f, 5.115242f, -0.061494f,
 -0.072501f, 5.115242f, -0.061494f,
 -0.167123f, 6.768296f, 1.782514f,
 -0.200585f, 5.657647f, 1.787631f,
 -0.200585f, 5.657647f, 1.787631f,
 -0.213454f, 6.281923f, -0.348351f,
 -0.213454f, 6.281923f, -0.348351f,
 -0.199930f, 7.173207f, 0.041692f,
 -0.199930f, 7.173207f, 0.041692f,
 -0.167123f, 6.768296f, 1.782514f,
 -0.195428f, 7.531075f, 0.485512f,
 -0.195428f, 7.531075f, 0.485512f,
 -0.190493f, 6.841156f, 0.711641f,
 -0.198989f, 6.766188f, -0.495981f,
 -0.205359f, 6.410344f, 0.030453f,
 -0.205359f, 6.410344f, 0.030453f,
 -0.201795f, 7.796456f, 0.011703f,
 -0.195428f, 7.531075f, 0.485512f,
 -0.195428f, 7.531075f, 0.485512f,
 -0.200153f, 7.254614f, -0.682162f,
 -0.198989f, 6.766188f, -0.495981f,
 -0.198989f, 6.766188f, -0.495981f,
 -0.200153f, 7.254614f, -0.682162f,
 -0.201795f, 7.796456f, 0.011703f,
 -1.301745f, 1.411940f, 1.227785f,
 -1.222502f, 0.000168f, 1.332231f,
 -1.222502f, 0.000168f, 1.332231f,
 1.067571f, 0.000181f, -0.957822f,
 1.067571f, 0.000181f, -0.957822f,
 0.051544f, 0.932035f, -0.088720f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.935543f, 0.317821f, 0.154109f},
{ 0.935107f, 0.318554f, 0.155238f},
{ 0.935367f, 0.318117f, 0.154565f},
{ 0.934932f, 0.318847f, 0.155689f},
{ -0.107676f, 0.945066f, 0.308636f},
{ -0.065886f, 0.929617f, 0.362588f},
{ -0.063383f, 0.928552f, 0.365751f},
{ -0.030471f, 0.913091f, 0.406615f},
{ -0.202641f, 0.405812f, 0.891209f},
{ 0.582017f, 0.316310f, 0.749135f},
{ 0.171768f, 0.170140f, 0.970334f},
{ 0.980084f, -0.117238f, 0.160285f},
{ 0.865769f, 0.398065f, -0.303296f},
{ 0.832373f, -0.148098f, -0.534061f},
{ 0.554510f, -0.106430f, -0.825343f},
{ 0.653125f, 0.439599f, -0.616588f},
{ -0.718338f, 0.381707f, 0.581628f},
{ -0.534886f, 0.139742f, 0.833288f},
{ 0.902435f, 0.122376f, 0.413081f},
{ 0.378686f, -0.110505f, 0.918905f},
{ -0.370582f, -0.275329f, 0.887053f},
{ 0.341101f, 0.196956f, -0.919162f},
{ 0.768224f, 0.172469f, -0.616511f},
{ 0.217449f, 0.764264f, 0.607138f},
{ 0.381944f, 0.531282f, 0.756213f},
{ -0.256196f, 0.339185f, 0.905162f},
{ 0.037603f, 0.872021f, -0.488022f},
{ 0.268092f, 0.958708f, -0.094896f},
{ -0.972303f, 0.211584f, -0.099294f},
{ -0.947369f, -0.292768f, 0.129531f},
{ -0.591614f, -0.805199f, 0.040597f},
{ -0.408127f, -0.809157f, -0.422726f},
{ 0.585011f, -0.144146f, -0.798113f},
{ -0.634173f, -0.755944f, 0.162399f},
{ -0.427231f, 0.816997f, 0.387286f},
{ -0.385414f, 0.834733f, 0.393290f},
{ -0.394861f, 0.308615f, 0.865356f},
{ 0.426901f, 0.876622f, 0.222013f},
{ 0.754333f, 0.636645f, 0.160199f},
{ 0.120585f, 0.709065f, 0.694756f},
{ 0.891964f, -0.276812f, 0.357456f},
{ 0.904630f, -0.126513f, -0.406988f},
{ 0.582557f, 0.142830f, -0.800142f},
{ 0.166099f, -0.803818f, 0.571217f},
{ 0.468203f, -0.820770f, -0.327297f},
{ 0.623888f, 0.487842f, -0.610553f},
{ 0.029391f, -0.309500f, 0.950445f},
{ -0.082462f, -0.630402f, 0.771876f},
{ 0.997104f, -0.073147f, -0.020825f},
{ 0.914334f, -0.398729f, 0.070777f},
{ -0.056625f, 0.067985f, -0.996078f},
{ 0.067102f, -0.186160f, -0.980226f},
{ 0.026662f, 0.559563f, 0.828359f},
{ 0.793163f, 0.592518f, 0.140767f},
{ -0.009195f, 0.865327f, -0.501124f},
{ 0.020498f, 0.311526f, 0.950016f},
{ 0.943493f, -0.136148f, 0.302133f},
{ 0.015500f, 0.603144f, 0.797482f},
{ 0.999478f, 0.027540f, 0.016912f},
{ -0.023964f, -0.828256f, -0.559838f},
{ -0.010516f, -0.659216f, -0.751880f},
{ 0.001537f, 0.999970f, 0.007565f},
{ 0.730334f, 0.540848f, -0.417248f},
{ -0.018975f, 0.170728f, -0.985136f},
{ -0.698894f, -0.016534f, -0.715034f},
{ -0.619972f, 0.420497f, -0.662433f},
{ -0.928094f, 0.166367f, 0.333111f},
{ -0.924610f, 0.374152f, 0.071461f},
{ 0.132823f, -0.066319f, -0.988919f},
{ 0.263345f, 0.427806f, -0.864657f},
{ -0.894836f, -0.278430f, 0.348920f},
{ -0.943930f, 0.025550f, -0.329155f},
{ -0.228231f, 0.223627f, -0.947577f},
{ -0.646174f, 0.665276f, 0.373989f},
{ -0.636341f, 0.435735f, 0.636557f},
{ -0.194520f, 0.955815f, -0.220406f},
{ 0.834275f, -0.489912f, -0.252925f},
{ 0.752952f, -0.173068f, 0.634910f},
{ 0.553324f, -0.562839f, 0.614039f},
{ 0.650456f, 0.497586f, 0.573861f},
{ 0.815874f, -0.092497f, -0.570783f},
{ 0.723898f, -0.389685f, 0.569313f},
{ -0.064190f, 0.675069f, 0.734956f},
{ -0.189522f, 0.937551f, 0.291683f},
{ -0.289050f, 0.511718f, 0.809070f},
{ -0.550541f, 0.732543f, -0.400358f},
{ -0.870636f, 0.419522f, -0.256895f},
{ -0.418270f, -0.304185f, 0.855875f},
{ -0.736688f, -0.588954f, -0.332303f},
{ 0.293156f, 0.021054f, -0.955833f},
{ -0.547780f, 0.305184f, -0.778974f},
{ 0.054272f, -0.637975f, -0.768142f},
{ -0.311964f, -0.835794f, 0.451805f},
{ -0.383225f, 0.463985f, -0.798659f},
{ -0.993951f, -0.107293f, -0.023430f},
{ -0.899900f, -0.277453f, -0.336452f},
{ -0.781903f, 0.601738f, 0.162907f},
{ -0.998938f, 0.022956f, 0.039952f},
{ -0.929295f, -0.136195f, 0.343312f},
{ -0.740000f, 0.533388f, -0.409753f},
{ -0.990108f, 0.136477f, -0.032570f},
{ -0.730384f, 0.007499f, 0.682995f},
{ 0.086611f, 0.120003f, 0.988988f},
{ 0.737768f, 0.424174f, 0.525143f},
{ 0.691553f, 0.702964f, -0.166121f},
{ 0.458597f, 0.762522f, -0.456343f},
{ 0.152908f, 0.664915f, -0.731100f},
{ -0.512506f, 0.432887f, -0.741584f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieBlock2.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73