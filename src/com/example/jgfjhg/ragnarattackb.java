package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarattackb {

static String TextureName = "RagAttack2.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.612460f, 10.053895f, 2.753841f,
 0.717780f, 11.235748f, 3.724864f,
 -0.523407f, 15.221280f, 3.088978f,
 -1.773204f, 12.350258f, 1.570900f,
 2.936334f, 10.080009f, 3.263139f,
 1.335266f, 11.237150f, 3.820288f,
 2.737521f, 15.231339f, 3.582446f,
 4.417658f, 12.444511f, 2.331415f,
 -0.432654f, 11.323580f, 3.314752f,
 -0.578713f, 10.296208f, 4.103221f,
 -0.246182f, 8.072510f, 4.114765f,
 1.326288f, 5.883830f, 3.413094f,
 0.830740f, 10.276220f, 4.922918f,
 1.052863f, 12.210319f, 3.572280f,
 0.265011f, 8.888235f, 3.065690f,
 -0.244732f, 10.265801f, 2.638389f,
 1.205893f, 11.580006f, 2.019053f,
 0.285114f, 5.251021f, -0.486269f,
 0.276766f, 6.716356f, 1.400082f,
 -1.944028f, 4.299104f, 0.770542f,
 -2.358792f, 4.144921f, -1.540705f,
 -0.866911f, 7.867304f, 4.009108f,
 -4.000676f, 8.365168f, 0.389343f,
 2.492165f, 9.326033f, 3.543491f,
 -0.267920f, 10.784999f, -1.643448f,
 -0.634681f, 2.711539f, -2.240495f,
 0.856501f, 3.356627f, 1.628062f,
 -3.390716f, 9.454839f, 3.247620f,
 0.941815f, 12.422720f, 1.931225f,
 -0.875575f, 5.497477f, 0.794828f,
 0.730606f, 5.192530f, 0.286793f,
 -0.608596f, 6.639708f, -2.037447f,
 -1.750540f, 6.396410f, -0.809982f,
 -1.646694f, 6.078719f, 0.363952f,
 -2.805709f, 3.522694f, -0.091373f,
 0.159713f, 2.028805f, 0.069690f,
 -3.648170f, 8.078086f, 2.408712f,
 -2.859646f, 6.207541f, 1.589543f,
 -4.520249f, 5.809320f, 0.910596f,
 -5.399614f, 7.235958f, 1.338639f,
 -3.651423f, 4.800168f, 4.051696f,
 -3.111794f, 3.815376f, 3.309187f,
 -4.202258f, 3.547959f, 2.868172f,
 -4.744349f, 4.531385f, 3.611224f,
 -2.159112f, 9.527286f, 1.130581f,
 -1.159817f, 9.366085f, 3.200217f,
 -1.643274f, 8.081808f, 0.651194f,
 -0.835265f, 7.415434f, 2.178039f,
 -1.078995f, 2.104681f, 1.089294f,
 -1.087575f, 3.389546f, 2.532065f,
 -2.192745f, 2.303687f, 1.346411f,
 -2.199382f, 3.289321f, 2.458265f,
 -1.030246f, -0.013367f, 0.885662f,
 -0.889358f, -0.006607f, 5.156847f,
 -2.384193f, -0.011979f, 1.047904f,
 -2.384308f, -0.006108f, 5.101945f,
 -0.751508f, 4.084423f, -1.413319f,
 -1.565369f, 4.208521f, -0.876182f,
 -1.357976f, 4.327650f, -0.001739f,
 -0.267598f, 3.927354f, -0.348491f,
 -2.166682f, 1.389064f, 2.589261f,
 -2.197256f, 0.820966f, 1.497083f,
 -1.104442f, 0.816353f, 1.259909f,
 -1.070840f, 1.425747f, 2.641013f,
 2.580563f, 11.336153f, 3.766020f,
 2.439370f, 10.299853f, 4.577110f,
 2.110880f, 8.073025f, 4.486430f,
 3.614729f, 9.798926f, 1.527263f,
 3.011201f, 11.149820f, 1.144683f,
 2.690584f, 7.060479f, 0.158307f,
 2.507154f, 3.907045f, -1.105271f,
 0.939802f, 4.490667f, -3.423908f,
 5.504841f, 10.756289f, 0.846622f,
 3.835908f, 10.468633f, -3.489689f,
 4.437382f, 12.396134f, -1.250228f,
 1.974502f, 5.497651f, -0.848393f,
 1.041324f, 6.414824f, -2.408042f,
 1.987632f, 6.079419f, -1.732823f,
 2.305037f, 3.562020f, -2.717264f,
 4.362869f, 11.722376f, -2.500906f,
 5.896440f, 10.183351f, -2.580916f,
 5.959293f, 10.341345f, -4.408123f,
 4.696090f, 11.491839f, -4.673673f,
 7.980830f, 12.261921f, -2.436923f,
 8.689234f, 11.126264f, -2.514229f,
 8.744173f, 11.239730f, -3.714412f,
 8.023114f, 12.373589f, -3.641732f,
 3.309555f, 11.013931f, -1.381440f,
 4.295862f, 10.873861f, 0.697581f,
 3.291793f, 9.423622f, -1.615603f,
 4.223991f, 8.794623f, -0.138359f,
 1.339636f, 1.853197f, -1.581548f,
 2.436713f, 1.327750f, -0.099964f,
 2.453616f, 1.997339f, -1.901683f,
 3.270327f, 1.653977f, -0.786229f,
 0.506932f, 0.000636f, -3.176021f,
 2.527919f, -0.006636f, 0.604034f,
 1.759673f, 0.002400f, -3.715714f,
 3.795300f, -0.006753f, -0.190784f,
 -0.029855f, 4.087265f, -1.873837f,
 0.899722f, 4.236431f, -2.319241f,
 1.512991f, 4.174230f, -1.442212f,
 0.562029f, 3.821603f, -0.817492f,
 2.459427f, 1.048760f, -2.133958f,
 1.829554f, 0.825141f, -3.220613f,
 0.763826f, 0.826833f, -2.878381f,
 1.582984f, 0.932949f, -1.478198f,
 6.639628f, 11.875919f, -8.945435f,
 10.847564f, 12.566154f, -8.915495f,
 6.442091f, 11.067950f, 0.813026f,
 10.853830f, 11.729010f, 0.825185f,
 -0.993760f, 8.386296f, 3.701113f,
 -1.059085f, 3.219090f, 6.813475f,
 -6.949729f, 1.868190f, 4.324273f,
 -6.853564f, 7.059331f, 1.226699f,
 -3.390716f, 9.454839f, 3.247620f,
 0.941815f, 12.422720f, 1.931225f,
 0.941815f, 12.422720f, 1.931225f,
 -1.646694f, 6.078719f, 0.363952f,
 -1.646694f, 6.078719f, 0.363952f,
 -3.390716f, 9.454839f, 3.247620f,
 -2.805709f, 3.522694f, -0.091373f,
 -1.646694f, 6.078719f, 0.363952f,
 -1.646694f, 6.078719f, 0.363952f,
 -2.805709f, 3.522694f, -0.091373f,
 0.159713f, 2.028805f, 0.069690f,
 -4.202258f, 3.547959f, 2.868172f,
 -4.744349f, 4.531385f, 3.611224f,
 -4.744349f, 4.531385f, 3.611224f,
 -4.202258f, 3.547959f, 2.868172f,
 -4.202258f, 3.547959f, 2.868172f,
 -4.520249f, 5.809320f, 0.910596f,
 -4.744349f, 4.531385f, 3.611224f,
 -4.744349f, 4.531385f, 3.611224f,
 -4.520249f, 5.809320f, 0.910596f,
 -1.643274f, 8.081808f, 0.651194f,
 -1.643274f, 8.081808f, 0.651194f,
 -1.078995f, 2.104681f, 1.089294f,
 -1.078995f, 2.104681f, 1.089294f,
 -1.104442f, 0.816353f, 1.259909f,
 -0.751508f, 4.084423f, -1.413319f,
 -1.078995f, 2.104681f, 1.089294f,
 -1.078995f, 2.104681f, 1.089294f,
 -2.197256f, 0.820966f, 1.497083f,
 -2.166682f, 1.389064f, 2.589261f,
 -2.166682f, 1.389064f, 2.589261f,
 -1.030246f, -0.013367f, 0.885662f,
 -1.104442f, 0.816353f, 1.259909f,
 -1.104442f, 0.816353f, 1.259909f,
 -2.197256f, 0.820966f, 1.497083f,
 -0.889358f, -0.006607f, 5.156847f,
 -1.030246f, -0.013367f, 0.885662f,
 -1.070840f, 1.425747f, 2.641013f,
 -1.070840f, 1.425747f, 2.641013f,
 -1.030246f, -0.013367f, 0.885662f,
 -1.104442f, 0.816353f, 1.259909f,
 -2.166682f, 1.389064f, 2.589261f,
 -1.070840f, 1.425747f, 2.641013f,
 -1.070840f, 1.425747f, 2.641013f,
 -0.889358f, -0.006607f, 5.156847f,
 1.326288f, 5.883830f, 3.413094f,
 0.830740f, 10.276220f, 4.922918f,
 0.830740f, 10.276220f, 4.922918f,
 0.830740f, 10.276220f, 4.922918f,
 0.830740f, 10.276220f, 4.922918f,
 1.052863f, 12.210319f, 3.572280f,
 1.205893f, 11.580006f, 2.019053f,
 1.205893f, 11.580006f, 2.019053f,
 1.052863f, 12.210319f, 3.572280f,
 1.326288f, 5.883830f, 3.413094f,
 1.326288f, 5.883830f, 3.413094f,
 0.285114f, 5.251021f, -0.486269f,
 0.941815f, 12.422720f, 1.931225f,
 -0.267920f, 10.784999f, -1.643448f,
 -0.267920f, 10.784999f, -1.643448f,
 4.437382f, 12.396134f, -1.250228f,
 0.941815f, 12.422720f, 1.931225f,
 0.941815f, 12.422720f, 1.931225f,
 2.492165f, 9.326033f, 3.543491f,
 -0.608596f, 6.639708f, -2.037447f,
 -0.267920f, 10.784999f, -1.643448f,
 -0.267920f, 10.784999f, -1.643448f,
 0.730606f, 5.192530f, 0.286793f,
 0.730606f, 5.192530f, 0.286793f,
 0.856501f, 3.356627f, 1.628062f,
 4.437382f, 12.396134f, -1.250228f,
 1.987632f, 6.079419f, -1.732823f,
 1.987632f, 6.079419f, -1.732823f,
 -0.608596f, 6.639708f, -2.037447f,
 -0.608596f, 6.639708f, -2.037447f,
 -0.634681f, 2.711539f, -2.240495f,
 2.492165f, 9.326033f, 3.543491f,
 0.730606f, 5.192530f, 0.286793f,
 0.730606f, 5.192530f, 0.286793f,
 2.305037f, 3.562020f, -2.717264f,
 1.987632f, 6.079419f, -1.732823f,
 1.987632f, 6.079419f, -1.732823f,
 0.856501f, 3.356627f, 1.628062f,
 0.159713f, 2.028805f, 0.069690f,
 0.159713f, 2.028805f, 0.069690f,
 2.305037f, 3.562020f, -2.717264f,
 0.159713f, 2.028805f, 0.069690f,
 -0.634681f, 2.711539f, -2.240495f,
 -0.634681f, 2.711539f, -2.240495f,
 8.023114f, 12.373589f, -3.641732f,
 8.023114f, 12.373589f, -3.641732f,
 8.744173f, 11.239730f, -3.714412f,
 8.744173f, 11.239730f, -3.714412f,
 8.744173f, 11.239730f, -3.714412f,
 5.959293f, 10.341345f, -4.408123f,
 8.023114f, 12.373589f, -3.641732f,
 8.023114f, 12.373589f, -3.641732f,
 3.291793f, 9.423622f, -1.615603f,
 3.291793f, 9.423622f, -1.615603f,
 5.959293f, 10.341345f, -4.408123f,
 0.763826f, 0.826833f, -2.878381f,
 1.339636f, 1.853197f, -1.581548f,
 1.339636f, 1.853197f, -1.581548f,
 1.339636f, 1.853197f, -1.581548f,
 1.339636f, 1.853197f, -1.581548f,
 -0.029855f, 4.087265f, -1.873837f,
 2.459427f, 1.048760f, -2.133958f,
 2.459427f, 1.048760f, -2.133958f,
 1.829554f, 0.825141f, -3.220613f,
 1.829554f, 0.825141f, -3.220613f,
 0.763826f, 0.826833f, -2.878381f,
 0.763826f, 0.826833f, -2.878381f,
 0.506932f, 0.000636f, -3.176021f,
 0.763826f, 0.826833f, -2.878381f,
 0.506932f, 0.000636f, -3.176021f,
 1.582984f, 0.932949f, -1.478198f,
 1.582984f, 0.932949f, -1.478198f,
 0.506932f, 0.000636f, -3.176021f,
 2.527919f, -0.006636f, 0.604034f,
 2.459427f, 1.048760f, -2.133958f,
 1.582984f, 0.932949f, -1.478198f,
 1.582984f, 0.932949f, -1.478198f,
 2.527919f, -0.006636f, 0.604034f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.631963f, 0.077776f, 0.771086f},
{ -0.662762f, -0.035723f, 0.747977f},
{ -0.668334f, -0.060970f, 0.741358f},
{ -0.674795f, -0.093345f, 0.732078f},
{ 0.396885f, 0.110414f, 0.911203f},
{ 0.455953f, -0.069922f, 0.887253f},
{ 0.446082f, -0.036072f, 0.894265f},
{ 0.467403f, -0.111874f, 0.876937f},
{ 0.357714f, -0.845576f, 0.396284f},
{ -0.149291f, 0.122515f, 0.981174f},
{ -0.646991f, -0.378789f, 0.661756f},
{ -0.912585f, 0.065822f, 0.403555f},
{ -0.806264f, 0.589581f, 0.048289f},
{ -0.043035f, 0.936854f, 0.347063f},
{ -0.929633f, 0.032073f, -0.367088f},
{ -0.950719f, 0.028511f, -0.308740f},
{ 0.046936f, 0.960644f, -0.273789f},
{ -0.884440f, -0.422803f, 0.197495f},
{ 0.399752f, -0.915667f, 0.041861f},
{ -0.207341f, 0.930826f, 0.300952f},
{ -0.512169f, 0.610111f, -0.604523f},
{ -0.731905f, 0.438601f, 0.521483f},
{ -0.923288f, 0.182587f, -0.337937f},
{ -0.043403f, -0.303259f, 0.951919f},
{ 0.521659f, -0.195891f, 0.830361f},
{ -0.503899f, 0.156198f, -0.849522f},
{ -0.738268f, 0.013616f, -0.674371f},
{ -0.785812f, -0.501538f, 0.361883f},
{ 0.331674f, -0.222221f, 0.916848f},
{ 0.567131f, -0.392182f, 0.724262f},
{ -0.419207f, -0.110506f, 0.901140f},
{ -0.161191f, -0.633203f, 0.757015f},
{ -0.726253f, 0.012642f, -0.687311f},
{ -0.846978f, -0.500230f, 0.179996f},
{ -0.310128f, -0.694320f, -0.649416f},
{ 0.043071f, -0.977264f, 0.207607f},
{ 0.387736f, 0.239405f, 0.890138f},
{ -0.859872f, -0.027140f, 0.509788f},
{ 0.865677f, -0.500293f, -0.017629f},
{ -0.231969f, -0.831862f, -0.504179f},
{ -0.306377f, -0.395012f, -0.866082f},
{ -0.902009f, 0.390442f, -0.184217f},
{ -0.322500f, 0.473283f, 0.819754f},
{ -0.537866f, 0.752383f, -0.380290f},
{ -0.348776f, 0.101255f, 0.931720f},
{ 0.847373f, -0.526662f, -0.067721f},
{ 0.054152f, -0.112011f, -0.992230f},
{ 0.201554f, -0.723743f, 0.659979f},
{ -0.877080f, -0.123953f, -0.464075f},
{ -0.700235f, -0.483726f, -0.525053f},
{ 0.780001f, -0.490492f, -0.388607f},
{ -0.069512f, -0.777930f, -0.624494f},
{ -0.390449f, 0.892696f, 0.225041f},
{ -0.735212f, 0.524183f, 0.429762f},
{ 0.666310f, 0.427239f, 0.611145f},
{ 0.992784f, -0.110953f, -0.045500f},
{ 0.891406f, 0.330136f, 0.310492f},
{ 0.660995f, 0.141181f, -0.736989f},
{ -0.737818f, 0.179536f, -0.650685f},
{ -0.869487f, 0.367295f, 0.330284f},
{ -0.000832f, -0.999998f, 0.001610f},
{ -0.000477f, -0.999999f, 0.001481f},
{ -0.000737f, -0.999999f, 0.001576f},
{ -0.000387f, -0.999999f, 0.001448f},
{ -0.913957f, 0.286170f, -0.287730f},
{ -0.421761f, 0.803503f, 0.420120f},
{ 0.905932f, 0.214867f, -0.364856f},
{ 0.426428f, 0.798935f, 0.424101f},
{ 0.663273f, -0.410745f, 0.625586f},
{ 0.747578f, 0.043268f, 0.662763f},
{ 0.658154f, 0.645637f, 0.387280f},
{ 0.675745f, 0.734788f, 0.058782f},
{ 0.948170f, -0.200894f, 0.246200f},
{ 0.788556f, -0.605507f, 0.107430f},
{ 0.599776f, 0.683236f, -0.416482f},
{ 0.450148f, 0.135680f, -0.882586f},
{ 0.979920f, -0.015952f, 0.198752f},
{ -0.095284f, 0.041870f, -0.994569f},
{ 0.826612f, -0.281229f, -0.487467f},
{ 0.810016f, -0.449080f, 0.377096f},
{ 0.922121f, -0.304518f, 0.238668f},
{ 0.649556f, -0.530101f, -0.545042f},
{ -0.151270f, -0.001022f, -0.988492f},
{ 0.084551f, 0.607745f, 0.789618f},
{ 0.516196f, -0.573605f, 0.636018f},
{ 0.139133f, 0.844083f, -0.517848f},
{ 0.610915f, -0.511726f, -0.604086f},
{ -0.476392f, 0.368186f, -0.798430f},
{ 0.091700f, -0.678653f, -0.728712f},
{ 0.991166f, 0.121574f, 0.053016f},
{ 0.061617f, 0.905284f, 0.420314f},
{ -0.823759f, 0.548760f, -0.142421f},
{ 0.445771f, -0.602760f, 0.661792f},
{ -0.422629f, -0.720460f, -0.549838f},
{ 0.958398f, -0.282474f, 0.041003f},
{ -0.752923f, -0.515130f, -0.409571f},
{ 0.061134f, -0.092350f, -0.993848f},
{ -0.948103f, -0.284307f, -0.142373f},
{ 0.516680f, 0.372986f, -0.770665f},
{ 0.746282f, 0.621614f, 0.238034f},
{ 0.903879f, 0.171540f, 0.391888f},
{ -0.484014f, -0.079646f, 0.871428f},
{ 0.043394f, -0.207599f, 0.977251f},
{ -0.755604f, 0.595851f, -0.272074f},
{ -0.719752f, 0.212043f, 0.661056f},
{ 0.165351f, 0.651753f, -0.740187f},
{ 0.915511f, 0.246048f, -0.318276f},
{ -0.001263f, -0.999998f, -0.001867f},
{ -0.000912f, -0.999998f, -0.001930f},
{ 0.000101f, -0.999998f, -0.002110f},
{ 0.000471f, -0.999998f, -0.002175f},
{ 0.444146f, 0.883572f, 0.148441f},
{ 0.533397f, 0.357377f, -0.766662f},
{ -0.936858f, 0.344055f, -0.062628f},
{ -0.054178f, 0.900713f, 0.431024f},
{ 0.161874f, -0.983178f, -0.084602f},
{ 0.151455f, -0.985210f, -0.080138f},
{ 0.157977f, -0.983954f, -0.082932f},
{ 0.147940f, -0.985866f, -0.078632f},
{ -0.431581f, 0.469434f, 0.770305f},
{ -0.432274f, 0.468579f, 0.770437f},
{ -0.432211f, 0.468657f, 0.770425f},
{ -0.432895f, 0.467812f, 0.770554f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagAttack2.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105