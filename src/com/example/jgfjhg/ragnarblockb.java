package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarblockb {

static String TextureName = "RagBlock2.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.004549f, 8.960588f, 2.807147f,
 1.825283f, 9.624931f, 3.363267f,
 1.137631f, 13.385711f, 5.218298f,
 -1.232743f, 11.559337f, 3.449994f,
 3.306283f, 8.948486f, 1.412973f,
 2.403678f, 9.623181f, 3.124240f,
 4.207218f, 13.375300f, 3.946734f,
 4.610701f, 11.537836f, 0.917123f,
 0.646755f, 9.827463f, 3.677442f,
 0.726179f, 8.521588f, 3.893860f,
 0.623210f, 6.567282f, 2.776511f,
 1.404562f, 4.889956f, 1.867660f,
 2.328848f, 8.222115f, 3.782034f,
 2.214535f, 10.578084f, 3.496101f,
 0.711305f, 8.677726f, 2.907990f,
 0.144232f, 10.059521f, 2.575269f,
 1.278814f, 11.178523f, 1.281459f,
 -0.269749f, 4.775734f, -0.831112f,
 -0.247059f, 6.291626f, 1.296234f,
 -2.543592f, 3.872973f, 0.360187f,
 -2.887051f, 3.540260f, -1.821328f,
 0.318494f, 9.041836f, 3.687871f,
 -3.378892f, 7.433405f, 2.847036f,
 2.961300f, 8.913373f, 2.388619f,
 -1.526117f, 10.252805f, -1.448112f,
 -0.925986f, 2.176358f, -2.394153f,
 0.907077f, 3.211230f, 0.977229f,
 -2.058410f, 9.456065f, 4.606281f,
 1.046117f, 12.034939f, 1.220728f,
 -1.430481f, 5.021791f, 0.449302f,
 0.176299f, 4.717324f, -0.058311f,
 -1.164856f, 6.161152f, -2.380361f,
 -2.309620f, 5.909482f, -1.154471f,
 -2.201140f, 5.603292f, 0.018797f,
 -3.296280f, 2.993344f, -0.359219f,
 0.228382f, 1.799605f, -0.181903f,
 -1.060342f, 7.840672f, 4.415600f,
 0.320018f, 6.602832f, 3.234841f,
 -0.396868f, 5.087527f, 3.991626f,
 -1.646019f, 5.764168f, 4.979144f,
 2.278079f, 6.638756f, 5.440513f,
 2.885684f, 5.881279f, 4.512970f,
 2.426914f, 4.893576f, 5.008166f,
 1.810410f, 5.645578f, 5.939248f,
 -2.257614f, 9.387960f, 2.065224f,
 -0.527950f, 9.340366f, 3.527822f,
 -2.063983f, 7.867571f, 1.580261f,
 -0.729945f, 7.259698f, 2.704509f,
 -1.270481f, 2.020524f, 0.963927f,
 -1.441281f, 3.474920f, 2.221733f,
 -2.406089f, 2.096087f, 1.247707f,
 -2.527370f, 3.204954f, 2.223665f,
 -1.027340f, -0.012400f, 0.887461f,
 -0.889351f, -0.006594f, 5.156820f,
 -2.381412f, -0.013218f, 1.050500f,
 -2.384285f, -0.006037f, 5.101877f,
 -1.300806f, 3.616161f, -1.758042f,
 -2.123574f, 3.724881f, -1.222599f,
 -1.961695f, 3.880505f, -0.405730f,
 -0.820293f, 3.497660f, -0.725007f,
 -2.200762f, 1.364001f, 2.571120f,
 -2.196803f, 0.820265f, 1.497649f,
 -1.103303f, 0.816560f, 1.260553f,
 -1.114535f, 1.487396f, 2.582347f,
 3.465638f, 9.821827f, 2.500462f,
 3.549412f, 8.518912f, 2.726013f,
 2.829336f, 6.567546f, 1.864515f,
 3.170276f, 9.145036f, 0.052858f,
 2.536383f, 10.512611f, -0.198020f,
 1.826075f, 6.467904f, -0.441633f,
 2.044376f, 3.660256f, -1.669788f,
 0.209015f, 3.992364f, -3.700424f,
 4.317443f, 8.166974f, -1.143740f,
 1.694623f, 9.722816f, -4.770598f,
 4.198766f, 10.406361f, -3.192745f,
 1.419244f, 5.022286f, -1.193193f,
 0.470453f, 5.931940f, -2.743347f,
 1.431736f, 5.604131f, -2.077744f,
 1.695247f, 3.338763f, -3.259929f,
 3.405845f, 9.042945f, -4.115955f,
 2.089953f, 7.289400f, -4.184153f,
 1.783545f, 7.592035f, -5.971270f,
 2.669460f, 9.057145f, -6.213548f,
 4.369213f, 5.610059f, -4.974733f,
 3.355962f, 4.727146f, -4.948432f,
 3.154383f, 4.918436f, -6.123902f,
 4.175155f, 5.796468f, -6.152570f,
 1.757264f, 10.151564f, -2.596724f,
 3.530723f, 10.017056f, -1.088683f,
 1.558656f, 8.556186f, -2.626403f,
 2.969618f, 7.951576f, -1.592536f,
 1.513520f, 1.606918f, -2.195163f,
 3.033911f, 1.171482f, -1.171186f,
 2.431497f, 2.025791f, -2.751475f,
 3.549901f, 1.770710f, -1.978147f,
 0.388586f, -0.000705f, -3.740056f,
 3.055691f, -0.006620f, -0.385626f,
 1.522277f, 0.005178f, -4.496918f,
 4.159772f, -0.006627f, -1.395196f,
 -0.562485f, 3.587333f, -2.200296f,
 0.330452f, 3.739414f, -2.641675f,
 0.975845f, 3.730441f, -1.817660f,
 0.100424f, 3.318955f, -1.154683f,
 2.502989f, 1.130383f, -3.119320f,
 1.681035f, 0.826000f, -4.022316f,
 0.694405f, 0.825060f, -3.492755f,
 1.836500f, 0.876540f, -2.311076f,
 2.171467f, 8.019196f, -10.772738f,
 3.280042f, 4.006689f, -11.808030f,
 3.876396f, 6.295091f, -1.283983f,
 5.168900f, 2.172143f, -2.409610f,
 0.455863f, 10.153255f, 3.352445f,
 5.845068f, 8.488505f, 5.362485f,
 3.225690f, 3.253523f, 7.921233f,
 -2.159093f, 4.807406f, 5.984005f,
 -2.058410f, 9.456065f, 4.606281f,
 1.046117f, 12.034939f, 1.220728f,
 1.046117f, 12.034939f, 1.220728f,
 -2.201140f, 5.603292f, 0.018797f,
 -2.201140f, 5.603292f, 0.018797f,
 -2.058410f, 9.456065f, 4.606281f,
 -3.296280f, 2.993344f, -0.359219f,
 -2.201140f, 5.603292f, 0.018797f,
 -2.201140f, 5.603292f, 0.018797f,
 -3.296280f, 2.993344f, -0.359219f,
 0.228382f, 1.799605f, -0.181903f,
 2.426914f, 4.893576f, 5.008166f,
 1.810410f, 5.645578f, 5.939248f,
 1.810410f, 5.645578f, 5.939248f,
 2.426914f, 4.893576f, 5.008166f,
 2.426914f, 4.893576f, 5.008166f,
 -0.396868f, 5.087527f, 3.991626f,
 1.810410f, 5.645578f, 5.939248f,
 1.810410f, 5.645578f, 5.939248f,
 -0.396868f, 5.087527f, 3.991626f,
 -2.063983f, 7.867571f, 1.580261f,
 -2.063983f, 7.867571f, 1.580261f,
 -1.270481f, 2.020524f, 0.963927f,
 -1.270481f, 2.020524f, 0.963927f,
 -1.103303f, 0.816560f, 1.260553f,
 -1.300806f, 3.616161f, -1.758042f,
 -1.270481f, 2.020524f, 0.963927f,
 -1.270481f, 2.020524f, 0.963927f,
 -2.196803f, 0.820265f, 1.497649f,
 -2.200762f, 1.364001f, 2.571120f,
 -2.200762f, 1.364001f, 2.571120f,
 -1.027340f, -0.012400f, 0.887461f,
 -1.103303f, 0.816560f, 1.260553f,
 -1.103303f, 0.816560f, 1.260553f,
 -2.196803f, 0.820265f, 1.497649f,
 -0.889351f, -0.006594f, 5.156820f,
 -1.027340f, -0.012400f, 0.887461f,
 -1.114535f, 1.487396f, 2.582347f,
 -1.114535f, 1.487396f, 2.582347f,
 -1.027340f, -0.012400f, 0.887461f,
 -1.103303f, 0.816560f, 1.260553f,
 -2.200762f, 1.364001f, 2.571120f,
 -1.114535f, 1.487396f, 2.582347f,
 -1.114535f, 1.487396f, 2.582347f,
 -0.889351f, -0.006594f, 5.156820f,
 1.404562f, 4.889956f, 1.867660f,
 2.328848f, 8.222115f, 3.782034f,
 2.328848f, 8.222115f, 3.782034f,
 2.328848f, 8.222115f, 3.782034f,
 2.328848f, 8.222115f, 3.782034f,
 2.214535f, 10.578084f, 3.496101f,
 1.278814f, 11.178523f, 1.281459f,
 1.278814f, 11.178523f, 1.281459f,
 2.214535f, 10.578084f, 3.496101f,
 1.404562f, 4.889956f, 1.867660f,
 1.404562f, 4.889956f, 1.867660f,
 -0.269749f, 4.775734f, -0.831112f,
 1.046117f, 12.034939f, 1.220728f,
 -1.526117f, 10.252805f, -1.448112f,
 -1.526117f, 10.252805f, -1.448112f,
 4.198766f, 10.406361f, -3.192745f,
 1.046117f, 12.034939f, 1.220728f,
 1.046117f, 12.034939f, 1.220728f,
 2.961300f, 8.913373f, 2.388619f,
 -1.164856f, 6.161152f, -2.380361f,
 -1.526117f, 10.252805f, -1.448112f,
 -1.526117f, 10.252805f, -1.448112f,
 0.176299f, 4.717324f, -0.058311f,
 0.176299f, 4.717324f, -0.058311f,
 0.907077f, 3.211230f, 0.977229f,
 4.198766f, 10.406361f, -3.192745f,
 1.431736f, 5.604131f, -2.077744f,
 1.431736f, 5.604131f, -2.077744f,
 -1.164856f, 6.161152f, -2.380361f,
 -1.164856f, 6.161152f, -2.380361f,
 -0.925986f, 2.176358f, -2.394153f,
 2.961300f, 8.913373f, 2.388619f,
 0.176299f, 4.717324f, -0.058311f,
 0.176299f, 4.717324f, -0.058311f,
 1.695247f, 3.338763f, -3.259929f,
 1.431736f, 5.604131f, -2.077744f,
 1.431736f, 5.604131f, -2.077744f,
 0.907077f, 3.211230f, 0.977229f,
 0.228382f, 1.799605f, -0.181903f,
 0.228382f, 1.799605f, -0.181903f,
 1.695247f, 3.338763f, -3.259929f,
 0.228382f, 1.799605f, -0.181903f,
 -0.925986f, 2.176358f, -2.394153f,
 -0.925986f, 2.176358f, -2.394153f,
 4.175155f, 5.796468f, -6.152570f,
 4.175155f, 5.796468f, -6.152570f,
 3.154383f, 4.918436f, -6.123902f,
 3.154383f, 4.918436f, -6.123902f,
 3.154383f, 4.918436f, -6.123902f,
 1.783545f, 7.592035f, -5.971270f,
 4.175155f, 5.796468f, -6.152570f,
 4.175155f, 5.796468f, -6.152570f,
 1.558656f, 8.556186f, -2.626403f,
 1.558656f, 8.556186f, -2.626403f,
 1.783545f, 7.592035f, -5.971270f,
 0.694405f, 0.825060f, -3.492755f,
 1.513520f, 1.606918f, -2.195163f,
 1.513520f, 1.606918f, -2.195163f,
 1.513520f, 1.606918f, -2.195163f,
 1.513520f, 1.606918f, -2.195163f,
 -0.562485f, 3.587333f, -2.200296f,
 2.502989f, 1.130383f, -3.119320f,
 2.502989f, 1.130383f, -3.119320f,
 1.681035f, 0.826000f, -4.022316f,
 1.681035f, 0.826000f, -4.022316f,
 0.694405f, 0.825060f, -3.492755f,
 0.694405f, 0.825060f, -3.492755f,
 0.388586f, -0.000705f, -3.740056f,
 0.694405f, 0.825060f, -3.492755f,
 0.388586f, -0.000705f, -3.740056f,
 1.836500f, 0.876540f, -2.311076f,
 1.836500f, 0.876540f, -2.311076f,
 0.388586f, -0.000705f, -3.740056f,
 3.055691f, -0.006620f, -0.385626f,
 2.502989f, 1.130383f, -3.119320f,
 1.836500f, 0.876540f, -2.311076f,
 1.836500f, 0.876540f, -2.311076f,
 3.055691f, -0.006620f, -0.385626f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.170804f, -0.311921f, 0.934629f},
{ -0.237408f, -0.414694f, 0.878445f},
{ -0.252660f, -0.438098f, 0.862689f},
{ -0.270368f, -0.465205f, 0.842903f},
{ 0.791561f, -0.296428f, 0.534379f},
{ 0.796683f, -0.436833f, 0.417700f},
{ 0.797708f, -0.413317f, 0.439125f},
{ 0.794118f, -0.466979f, 0.388984f},
{ 0.267264f, -0.928685f, 0.257127f},
{ 0.372658f, -0.280656f, 0.884510f},
{ -0.477136f, -0.406635f, 0.779095f},
{ -0.415900f, -0.204614f, 0.886093f},
{ -0.398389f, 0.465186f, 0.790499f},
{ 0.267980f, 0.725419f, 0.633998f},
{ -0.976725f, -0.044685f, 0.209791f},
{ -0.639500f, 0.639788f, 0.426277f},
{ 0.295783f, 0.944429f, 0.143413f},
{ -0.721397f, -0.500169f, 0.478975f},
{ 0.192382f, -0.978219f, -0.077952f},
{ -0.019618f, 0.997326f, 0.070406f},
{ -0.673728f, 0.620414f, -0.401468f},
{ -0.627000f, 0.354673f, 0.693598f},
{ -0.981641f, 0.077269f, 0.174387f},
{ 0.341154f, -0.257467f, 0.904060f},
{ 0.760683f, -0.144993f, 0.632723f},
{ -0.485332f, 0.157106f, -0.860099f},
{ -0.914541f, 0.146666f, -0.376967f},
{ -0.694779f, -0.456401f, 0.555860f},
{ 0.419479f, -0.126841f, 0.898860f},
{ 0.484192f, -0.357909f, 0.798410f},
{ -0.348128f, -0.163318f, 0.923111f},
{ -0.137457f, -0.473269f, 0.870128f},
{ -0.693591f, -0.067907f, -0.717162f},
{ -0.777690f, -0.578384f, 0.246311f},
{ -0.255733f, -0.783722f, -0.566023f},
{ 0.133560f, -0.943988f, 0.301742f},
{ 0.413058f, 0.851964f, 0.321778f},
{ -0.087992f, -0.189458f, 0.977938f},
{ 0.735904f, 0.131212f, -0.664251f},
{ 0.294228f, -0.936068f, -0.192888f},
{ -0.179032f, -0.915126f, -0.361237f},
{ -0.730248f, -0.341175f, 0.591893f},
{ -0.221771f, 0.643188f, 0.732889f},
{ -0.930192f, 0.149774f, 0.335126f},
{ -0.128715f, 0.538610f, 0.832666f},
{ 0.497860f, 0.109157f, -0.860361f},
{ -0.912191f, -0.359226f, -0.197141f},
{ 0.850356f, 0.520773f, -0.075433f},
{ -0.862950f, -0.320055f, -0.391001f},
{ -0.571864f, -0.692569f, -0.439682f},
{ 0.841493f, -0.409934f, -0.351914f},
{ -0.141421f, -0.854714f, -0.499464f},
{ -0.464131f, 0.881926f, 0.082397f},
{ -0.775247f, 0.479557f, 0.411118f},
{ 0.587607f, 0.631176f, 0.506295f},
{ 0.992088f, 0.059470f, -0.110569f},
{ 0.875284f, 0.392367f, 0.282713f},
{ 0.677260f, 0.158486f, -0.718472f},
{ -0.747102f, 0.082189f, -0.659608f},
{ -0.865108f, 0.359574f, 0.349707f},
{ 0.000764f, -0.999999f, 0.001335f},
{ -0.000193f, -0.999999f, 0.001683f},
{ 0.000508f, -0.999999f, 0.001429f},
{ -0.000438f, -0.999998f, 0.001772f},
{ -0.915842f, 0.270735f, -0.296540f},
{ -0.408919f, 0.803886f, 0.431918f},
{ 0.913251f, 0.226124f, -0.338881f},
{ 0.436185f, 0.794339f, 0.422810f},
{ 0.856280f, -0.513452f, 0.056143f},
{ 0.952918f, -0.215198f, 0.213627f},
{ 0.840095f, 0.501671f, 0.206316f},
{ 0.699695f, 0.712028f, -0.058676f},
{ 0.962696f, -0.061201f, -0.263572f},
{ 0.751458f, -0.558907f, -0.350619f},
{ 0.689917f, 0.581009f, -0.431790f},
{ -0.129295f, 0.234342f, -0.963518f},
{ 0.965461f, -0.217888f, 0.142864f},
{ -0.270611f, -0.060396f, -0.960792f},
{ 0.673905f, -0.357660f, -0.646476f},
{ 0.796836f, -0.429790f, 0.424657f},
{ 0.964966f, -0.232317f, 0.121941f},
{ 0.623974f, -0.462379f, -0.629970f},
{ -0.286937f, -0.027840f, -0.957545f},
{ 0.794444f, -0.120756f, 0.595211f},
{ -0.322138f, -0.715024f, 0.620458f},
{ 0.693582f, 0.102101f, -0.713106f},
{ -0.574331f, -0.568414f, -0.589109f},
{ 0.134448f, 0.690653f, -0.710579f},
{ -0.833051f, -0.023116f, -0.552712f},
{ 0.921755f, 0.356435f, -0.152716f},
{ 0.924119f, 0.381482f, -0.021830f},
{ -0.272668f, 0.871945f, -0.406650f},
{ -0.331649f, -0.711319f, 0.619705f},
{ -0.985730f, -0.165308f, -0.031783f},
{ 0.797569f, -0.596693f, 0.088554f},
{ -0.659505f, -0.692098f, -0.293349f},
{ -0.073144f, -0.020935f, -0.997102f},
{ -0.829752f, -0.557017f, 0.035276f},
{ 0.213291f, 0.578105f, -0.787592f},
{ 0.569582f, 0.745745f, 0.345601f},
{ 0.890828f, 0.380409f, 0.248424f},
{ -0.405755f, -0.404472f, 0.819613f},
{ 0.378596f, -0.230790f, 0.896326f},
{ -0.755690f, 0.650410f, -0.076812f},
{ -0.538429f, 0.278506f, 0.795317f},
{ -0.026755f, 0.704525f, -0.709174f},
{ 0.827210f, 0.245704f, -0.505324f},
{ -0.001961f, -0.999996f, -0.002138f},
{ -0.001034f, -0.999996f, -0.002484f},
{ 0.001643f, -0.999993f, -0.003483f},
{ 0.002621f, -0.999989f, -0.003847f},
{ 0.476041f, 0.878176f, 0.046817f},
{ 0.416941f, 0.318279f, -0.851387f},
{ -0.912353f, 0.396115f, 0.103464f},
{ 0.022137f, 0.913962f, 0.405196f},
{ -0.946097f, -0.295562f, 0.132450f},
{ -0.941287f, -0.317203f, 0.115596f},
{ -0.944378f, -0.303710f, 0.126137f},
{ -0.939484f, -0.324508f, 0.109842f},
{ -0.163345f, 0.498884f, 0.851137f},
{ -0.163068f, 0.498343f, 0.851506f},
{ -0.163095f, 0.498396f, 0.851470f},
{ -0.162805f, 0.497830f, 0.851857f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagBlock2.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105