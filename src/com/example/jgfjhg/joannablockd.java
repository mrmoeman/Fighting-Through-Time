package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannablockd {

static String TextureName = "joannablock4.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.233839f, 0.722857f, -1.817072f,
 0.456055f, 0.865132f, -2.372090f,
 1.009126f, 0.637581f, -2.196905f,
 0.782500f, 0.518736f, -1.666353f,
 0.112055f, 0.065284f, -1.955841f,
 0.408955f, 0.061363f, -2.480031f,
 2.246203f, 0.061362f, -1.413878f,
 1.948865f, 0.061352f, -0.904350f,
 0.211418f, 2.242193f, -1.295859f,
 0.585656f, 2.510530f, -1.926038f,
 1.069114f, 3.145739f, -1.571946f,
 0.762257f, 2.966309f, -0.906162f,
 1.853971f, 1.994457f, -0.904337f,
 2.065494f, 2.097995f, -1.373499f,
 1.650496f, 2.066112f, -1.542219f,
 1.389351f, 1.972886f, -1.042362f,
 0.995705f, 6.834633f, 0.083860f,
 0.783536f, 5.136889f, -0.096154f,
 -0.040016f, 5.940005f, -0.444810f,
 0.352721f, 6.738551f, -0.296860f,
 0.381645f, 6.576721f, 1.158043f,
 1.113836f, 5.894035f, -0.579266f,
 0.938969f, 6.581731f, -0.810969f,
 0.018268f, 4.544098f, -0.977747f,
 0.631734f, 4.353879f, -1.324934f,
 0.932203f, 3.910404f, -1.062245f,
 0.505749f, 3.621160f, -0.490279f,
 0.341537f, 7.882047f, 1.180764f,
 0.980140f, 7.618351f, 0.849462f,
 0.980147f, 6.760287f, 0.835834f,
 0.904801f, 6.331892f, 0.254853f,
 0.846438f, 6.491439f, 0.208740f,
 0.371764f, 7.874981f, -0.244749f,
 0.995776f, 7.614438f, 0.089731f,
 0.758372f, 6.503590f, -0.181632f,
 0.998036f, 6.916998f, 0.153771f,
 0.478990f, 6.527491f, -0.389952f,
 0.713591f, 6.943337f, -0.598186f,
 1.616234f, 6.581389f, 1.130102f,
 1.343198f, 6.823761f, 1.266635f,
 1.492655f, 7.186039f, 1.089108f,
 1.771338f, 6.998261f, 0.937952f,
 0.718920f, 6.096739f, 0.633085f,
 0.370996f, 6.366946f, -0.254236f,
 2.454068f, 6.990719f, 2.918574f,
 1.820796f, 7.274354f, 2.729654f,
 1.975604f, 7.672785f, 2.439700f,
 2.598186f, 7.615210f, 2.407214f,
 -0.914203f, 2.125763f, -1.889450f,
 1.494940f, 3.198288f, -1.768567f,
 0.693417f, 2.373658f, -2.524155f,
 0.279240f, 2.300117f, -0.551198f,
 -0.592938f, 5.821391f, 1.204750f,
 0.026323f, 5.701600f, 1.545882f,
 -0.628670f, 5.357567f, 1.187647f,
 0.017882f, 5.287660f, 1.557875f,
 -0.283277f, 7.617833f, 0.824516f,
 -0.267859f, 7.613160f, 0.065045f,
 -0.068835f, 3.899744f, -0.059948f,
 -0.327448f, 4.353745f, -0.364436f,
 0.038577f, 5.459744f, 0.659024f,
 -0.366529f, 5.318818f, 0.489473f,
 -0.086794f, 6.272130f, 0.194823f,
 0.096586f, 6.177071f, 0.610947f,
 -0.283424f, 6.759988f, 0.810158f,
 -0.267866f, 6.833400f, 0.058829f,
 1.779989f, 7.011084f, 2.620929f,
 2.081887f, 6.344995f, 2.996325f,
 1.237166f, 6.674626f, 2.955211f,
 1.481141f, 6.280988f, 3.189844f,
 0.994946f, 5.464507f, 1.904535f,
 1.091180f, 5.034730f, 2.022601f,
 0.879166f, 5.055138f, 2.323591f,
 0.785924f, 5.438989f, 2.234147f,
 -1.173255f, 3.249617f, 0.238647f,
 -1.571313f, 2.323603f, -0.489297f,
 -0.310247f, 0.483718f, 1.840184f,
 -0.897437f, 0.417505f, 1.827963f,
 -0.980501f, 0.913578f, 2.195670f,
 -0.396260f, 0.962318f, 2.246839f,
 -0.284247f, 0.060729f, 1.598036f,
 -0.863753f, 0.061374f, 1.504708f,
 -1.227994f, 0.061372f, 3.597430f,
 -0.647260f, 0.061388f, 3.695647f,
 -0.086902f, 2.390303f, -0.447728f,
 -0.859463f, 2.467765f, -0.434698f,
 -0.960044f, 3.236618f, -0.036090f,
 -0.208424f, 3.274378f, 0.017243f,
 -0.475603f, 2.583344f, 1.207556f,
 -0.995452f, 2.551318f, 1.176932f,
 -0.910638f, 2.091824f, 0.780279f,
 -0.356423f, 2.093122f, 0.754877f,
 -1.375721f, 2.894815f, 4.763009f,
 -0.551383f, 2.672792f, 5.357017f,
 2.312332f, 8.252598f, 1.369406f,
 3.158105f, 8.051255f, 1.961422f,
 1.389351f, 1.972886f, -1.042362f,
 1.389351f, 1.972886f, -1.042362f,
 0.211418f, 2.242193f, -1.295859f,
 0.233839f, 0.722857f, -1.817072f,
 0.112055f, 0.065284f, -1.955841f,
 0.112055f, 0.065284f, -1.955841f,
 0.233839f, 0.722857f, -1.817072f,
 0.112055f, 0.065284f, -1.955841f,
 0.782500f, 0.518736f, -1.666353f,
 0.782500f, 0.518736f, -1.666353f,
 0.112055f, 0.065284f, -1.955841f,
 1.948865f, 0.061352f, -0.904350f,
 0.782500f, 0.518736f, -1.666353f,
 1.948865f, 0.061352f, -0.904350f,
 1.948865f, 0.061352f, -0.904350f,
 1.009126f, 0.637581f, -2.196905f,
 1.009126f, 0.637581f, -2.196905f,
 1.009126f, 0.637581f, -2.196905f,
 1.009126f, 0.637581f, -2.196905f,
 0.456055f, 0.865132f, -2.372090f,
 0.456055f, 0.865132f, -2.372090f,
 1.389351f, 1.972886f, -1.042362f,
 1.389351f, 1.972886f, -1.042362f,
 0.456055f, 0.865132f, -2.372090f,
 0.233839f, 0.722857f, -1.817072f,
 0.904801f, 6.331892f, 0.254853f,
 0.904801f, 6.331892f, 0.254853f,
 1.113836f, 5.894035f, -0.579266f,
 1.113836f, 5.894035f, -0.579266f,
 0.904801f, 6.331892f, 0.254853f,
 0.904801f, 6.331892f, 0.254853f,
 0.758372f, 6.503590f, -0.181632f,
 0.758372f, 6.503590f, -0.181632f,
 0.758372f, 6.503590f, -0.181632f,
 0.904801f, 6.331892f, 0.254853f,
 0.904801f, 6.331892f, 0.254853f,
 1.113836f, 5.894035f, -0.579266f,
 0.938969f, 6.581731f, -0.810969f,
 1.616234f, 6.581389f, 1.130102f,
 1.616234f, 6.581389f, 1.130102f,
 0.938969f, 6.581731f, -0.810969f,
 0.938969f, 6.581731f, -0.810969f,
 1.113836f, 5.894035f, -0.579266f,
 2.454068f, 6.990719f, 2.918574f,
 2.454068f, 6.990719f, 2.918574f,
 1.616234f, 6.581389f, 1.130102f,
 2.598186f, 7.615210f, 2.407214f,
 2.598186f, 7.615210f, 2.407214f,
 1.616234f, 6.581389f, 1.130102f,
 0.938969f, 6.581731f, -0.810969f,
 0.938969f, 6.581731f, -0.810969f,
 0.758372f, 6.503590f, -0.181632f,
 0.758372f, 6.503590f, -0.181632f,
 2.598186f, 7.615210f, 2.407214f,
 -0.914203f, 2.125763f, -1.889450f,
 0.693417f, 2.373658f, -2.524155f,
 0.279240f, 2.300117f, -0.551198f,
 0.279240f, 2.300117f, -0.551198f,
 0.693417f, 2.373658f, -2.524155f,
 1.494940f, 3.198288f, -1.768567f,
 0.341537f, 7.882047f, 1.180764f,
 0.371764f, 7.874981f, -0.244749f,
 0.371764f, 7.874981f, -0.244749f,
 0.783536f, 5.136889f, -0.096154f,
 0.096586f, 6.177071f, 0.610947f,
 0.783536f, 5.136889f, -0.096154f,
 0.718920f, 6.096739f, 0.633085f,
 0.096586f, 6.177071f, 0.610947f,
 0.038577f, 5.459744f, 0.659024f,
 0.038577f, 5.459744f, 0.659024f,
 0.718920f, 6.096739f, 0.633085f,
 0.381645f, 6.576721f, 1.158043f,
 0.096586f, 6.177071f, 0.610947f,
 0.381645f, 6.576721f, 1.158043f,
 0.096586f, 6.177071f, 0.610947f,
 0.370996f, 6.366946f, -0.254236f,
 -0.086794f, 6.272130f, 0.194823f,
 0.352721f, 6.738551f, -0.296860f,
 -0.086794f, 6.272130f, 0.194823f,
 0.352721f, 6.738551f, -0.296860f,
 -0.086794f, 6.272130f, 0.194823f,
 0.096586f, 6.177071f, 0.610947f,
 0.096586f, 6.177071f, 0.610947f,
 0.505749f, 3.621160f, -0.490279f,
 0.783536f, 5.136889f, -0.096154f,
 0.783536f, 5.136889f, -0.096154f,
 0.038577f, 5.459744f, 0.659024f,
 0.994946f, 5.464507f, 1.904535f,
 -0.366529f, 5.318818f, 0.489473f,
 0.994946f, 5.464507f, 1.904535f,
 -0.366529f, 5.318818f, 0.489473f,
 -0.366529f, 5.318818f, 0.489473f,
 0.038577f, 5.459744f, 0.659024f,
 1.779989f, 7.011084f, 2.620929f,
 1.779989f, 7.011084f, 2.620929f,
 2.081887f, 6.344995f, 2.996325f,
 0.994946f, 5.464507f, 1.904535f,
 2.081887f, 6.344995f, 2.996325f,
 0.994946f, 5.464507f, 1.904535f,
 -0.366529f, 5.318818f, 0.489473f,
 -0.366529f, 5.318818f, 0.489473f,
 -0.086794f, 6.272130f, 0.194823f,
 -0.040016f, 5.940005f, -0.444810f,
 -0.086794f, 6.272130f, 0.194823f,
 0.370996f, 6.366946f, -0.254236f,
 -0.040016f, 5.940005f, -0.444810f,
 2.081887f, 6.344995f, 2.996325f,
 0.352721f, 6.738551f, -0.296860f,
 0.371764f, 7.874981f, -0.244749f,
 0.352721f, 6.738551f, -0.296860f,
 0.341537f, 7.882047f, 1.180764f,
 0.381645f, 6.576721f, 1.158043f,
 0.381645f, 6.576721f, 1.158043f,
 0.018268f, 4.544098f, -0.977747f,
 -0.040016f, 5.940005f, -0.444810f,
 0.018268f, 4.544098f, -0.977747f,
 -0.914203f, 2.125763f, -1.889450f,
 0.018268f, 4.544098f, -0.977747f,
 0.018268f, 4.544098f, -0.977747f,
 0.279240f, 2.300117f, -0.551198f,
 0.505749f, 3.621160f, -0.490279f,
 0.505749f, 3.621160f, -0.490279f,
 -0.914203f, 2.125763f, -1.889450f,
 0.279240f, 2.300117f, -0.551198f,
 -1.571313f, 2.323603f, -0.489297f,
 0.279240f, 2.300117f, -0.551198f,
 -1.173255f, 3.249617f, 0.238647f,
 -1.571313f, 2.323603f, -0.489297f,
 -0.356423f, 2.093122f, 0.754877f,
 -0.086902f, 2.390303f, -0.447728f,
 -0.356423f, 2.093122f, 0.754877f,
 -0.310247f, 0.483718f, 1.840184f,
 -0.284247f, 0.060729f, 1.598036f,
 -0.284247f, 0.060729f, 1.598036f,
 -0.310247f, 0.483718f, 1.840184f,
 -0.396260f, 0.962318f, 2.246839f,
 -0.284247f, 0.060729f, 1.598036f,
 -0.396260f, 0.962318f, 2.246839f,
 -0.647260f, 0.061388f, 3.695647f,
 -0.284247f, 0.060729f, 1.598036f,
 -0.396260f, 0.962318f, 2.246839f,
 -0.647260f, 0.061388f, 3.695647f,
 -0.647260f, 0.061388f, 3.695647f,
 -0.980501f, 0.913578f, 2.195670f,
 -0.980501f, 0.913578f, 2.195670f,
 -0.980501f, 0.913578f, 2.195670f,
 -0.897437f, 0.417505f, 1.827963f,
 -0.980501f, 0.913578f, 2.195670f,
 -0.356423f, 2.093122f, 0.754877f,
 -0.897437f, 0.417505f, 1.827963f,
 -0.356423f, 2.093122f, 0.754877f,
 -0.310247f, 0.483718f, 1.840184f,
 -0.897437f, 0.417505f, 1.827963f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.490332f, -0.845662f, 0.210786f},
{ -0.026254f, -0.802127f, -0.596576f},
{ 0.278416f, -0.723129f, 0.632114f},
{ 0.740368f, -0.659364f, -0.130747f},
{ 0.243353f, 0.276641f, 0.929650f},
{ 0.695890f, -0.141989f, 0.703972f},
{ 0.726407f, 0.644192f, -0.239478f},
{ 0.999454f, -0.025969f, -0.020437f},
{ -0.277084f, -0.903081f, 0.328131f},
{ -0.645498f, -0.278789f, 0.711062f},
{ -0.020015f, 0.272305f, -0.962003f},
{ 0.143958f, -0.519942f, -0.841984f},
{ -0.838461f, 0.363860f, 0.405697f},
{ -0.388870f, 0.586472f, -0.710514f},
{ 0.705988f, 0.044346f, -0.706834f},
{ -0.039702f, 0.028614f, 0.998802f},
{ -0.748964f, 0.420540f, 0.512053f},
{ -0.709320f, -0.516080f, 0.480132f},
{ -0.258255f, 0.915220f, -0.309318f},
{ -0.282374f, 0.955465f, -0.085743f},
{ -0.023119f, 0.700599f, 0.713181f},
{ 0.740353f, 0.499419f, 0.449952f},
{ 0.018962f, 0.676682f, -0.736031f},
{ 0.792421f, 0.390073f, -0.468947f},
{ 0.960334f, 0.059804f, 0.272363f},
{ 0.061004f, 0.416185f, -0.907232f},
{ 0.982709f, -0.077629f, -0.168097f},
{ 0.372199f, 0.444806f, -0.814626f},
{ -0.189927f, 0.476784f, -0.858257f},
{ 0.981236f, -0.058627f, 0.183684f},
{ 0.769154f, -0.277217f, 0.575806f},
{ 0.462944f, -0.480891f, 0.744599f},
{ 0.000235f, -0.309587f, 0.950871f},
{ 0.814638f, -0.262270f, 0.517280f},
{ -0.420260f, 0.327420f, -0.846273f},
{ -0.080181f, -0.022991f, -0.996515f},
{ 0.903247f, -0.032348f, -0.427901f},
{ 0.633512f, -0.191254f, 0.749723f},
{ 0.586495f, -0.766274f, 0.262389f},
{ 0.938387f, 0.161978f, -0.305275f},
{ -0.724865f, -0.296824f, 0.621665f},
{ -0.365583f, 0.930431f, -0.025455f},
{ 0.534981f, -0.844718f, -0.015711f},
{ 0.882411f, 0.052131f, -0.467582f},
{ -0.416983f, 0.900931f, -0.120201f},
{ -0.890893f, -0.190248f, 0.412452f},
{ -0.770853f, 0.288835f, -0.567768f},
{ 0.949108f, -0.129356f, -0.287159f},
{ 0.073953f, -0.283637f, -0.956076f},
{ -0.625775f, 0.398094f, -0.670766f},
{ -0.661550f, -0.161225f, -0.732365f},
{ 0.417741f, -0.742595f, 0.523494f},
{ -0.581233f, 0.783085f, 0.221239f},
{ -0.844470f, -0.533529f, 0.047077f},
{ 0.060662f, 0.988895f, 0.135671f},
{ -0.427229f, -0.838242f, 0.338860f},
{ -0.755425f, 0.488223f, 0.437003f},
{ -0.774827f, 0.397611f, -0.491475f},
{ 0.220678f, -0.189566f, 0.956748f},
{ 0.725823f, -0.200368f, 0.658053f},
{ -0.917388f, 0.396774f, -0.031134f},
{ -0.948726f, -0.280533f, -0.145669f},
{ -0.939710f, 0.233418f, -0.249922f},
{ -0.077199f, -0.262267f, 0.961902f},
{ -0.852746f, -0.242428f, 0.462659f},
{ -0.859419f, -0.171472f, -0.481660f},
{ 0.383361f, 0.567834f, -0.728422f},
{ -0.786635f, 0.610509f, 0.092114f},
{ 0.954686f, -0.283881f, -0.089364f},
{ -0.093327f, -0.409245f, 0.907639f},
{ 0.532011f, 0.369977f, -0.761631f},
{ 0.659381f, -0.683675f, -0.312737f},
{ -0.126694f, -0.750911f, 0.648136f},
{ -0.828911f, 0.370648f, 0.418959f},
{ -0.501888f, 0.003710f, 0.864924f},
{ -0.962715f, -0.270490f, 0.003882f},
{ 0.728604f, -0.684460f, -0.025516f},
{ 0.611521f, -0.438454f, 0.658635f},
{ -0.649987f, -0.716822f, -0.252355f},
{ -0.777337f, -0.457687f, 0.431590f},
{ 0.679488f, 0.559842f, 0.474208f},
{ -0.784898f, 0.546919f, 0.291229f},
{ 0.591846f, 0.543625f, 0.595139f},
{ -0.773391f, 0.441614f, 0.454801f},
{ 0.758906f, -0.651135f, 0.009177f},
{ 0.880364f, -0.414562f, -0.230430f},
{ -0.783884f, -0.448611f, -0.429272f},
{ -0.714095f, -0.666060f, -0.215482f},
{ 0.702784f, -0.272432f, -0.657172f},
{ -0.479303f, -0.304074f, -0.823291f},
{ -0.903954f, 0.351520f, 0.243518f},
{ 0.790717f, 0.383725f, 0.476993f},
{ -0.318429f, 0.653898f, 0.686310f},
{ -0.318840f, 0.653942f, 0.686076f},
{ -0.322466f, 0.654328f, 0.684011f},
{ -0.322855f, 0.654368f, 0.683789f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannablock4.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117