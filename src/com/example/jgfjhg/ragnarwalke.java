package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarwalke {

static String TextureName = "RagWalk5.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -1.556546f, 10.249965f, 4.048899f,
 -0.114728f, 11.047280f, 5.240201f,
 -1.496362f, 14.940967f, 6.227403f,
 -2.940216f, 12.834188f, 3.820675f,
 2.036418f, 10.238919f, 4.175350f,
 0.510160f, 11.045753f, 5.262507f,
 1.818301f, 14.934562f, 6.345795f,
 3.423510f, 12.826070f, 4.039688f,
 -1.321676f, 11.228509f, 5.015085f,
 -1.335412f, 9.958893f, 5.388925f,
 -0.973823f, 7.899883f, 4.549242f,
 -0.008360f, 6.211145f, 3.970009f,
 0.172113f, 9.718672f, 5.979029f,
 0.191417f, 12.025266f, 5.415608f,
 -1.539893f, 9.950950f, 3.759937f,
 -1.581900f, 11.336687f, 3.113538f,
 0.210788f, 12.336196f, 3.075309f,
 0.101008f, 6.067029f, 0.570312f,
 -1.132625f, 7.598213f, 2.148118f,
 -2.102452f, 4.751749f, 0.961509f,
 -1.838598f, 5.377380f, -1.839852f,
 -2.375355f, 9.699636f, 4.185247f,
 -4.415253f, 9.067011f, 0.152637f,
 0.390210f, 10.064568f, 5.077292f,
 0.198723f, 11.422918f, -0.840400f,
 0.186239f, 3.757586f, -1.998760f,
 0.062477f, 3.606373f, 2.507570f,
 -4.625260f, 10.538774f, 2.909710f,
 0.157089f, 13.198054f, 2.859624f,
 -1.577336f, 6.417577f, 0.904257f,
 -0.005536f, 6.024216f, 1.457118f,
 0.388430f, 7.427046f, -1.224725f,
 -1.296103f, 7.304516f, -0.909807f,
 -1.904165f, 7.011240f, 0.091183f,
 -2.666144f, 4.379189f, -0.520012f,
 0.051648f, 2.751340f, -0.039711f,
 -4.041235f, 8.436890f, 3.056036f,
 -2.589846f, 6.844910f, 2.588134f,
 -3.849010f, 6.008986f, 1.528244f,
 -5.183546f, 7.100698f, 1.644568f,
 -3.583409f, 5.213190f, 4.835044f,
 -2.626752f, 4.430019f, 4.308303f,
 -3.444292f, 3.882624f, 3.616929f,
 -4.408701f, 4.660362f, 4.144479f,
 -2.866504f, 10.744712f, 0.995887f,
 -2.782349f, 10.670374f, 3.297907f,
 -2.482257f, 9.193862f, 0.817019f,
 -2.456141f, 8.584079f, 2.563031f,
 -1.013715f, 2.709918f, -0.051814f,
 -1.033794f, 2.239278f, 1.783068f,
 -2.122754f, 2.741265f, 0.285687f,
 -2.138025f, 2.422636f, 1.679643f,
 -1.030658f, 1.259301f, -2.078791f,
 -0.889387f, -0.360198f, 1.884867f,
 -2.384699f, 1.199472f, -1.929637f,
 -2.384429f, -0.339357f, 1.834367f,
 -0.238706f, 4.920681f, -0.845570f,
 -1.253387f, 5.129645f, -0.863193f,
 -1.418988f, 5.069121f, 0.193444f,
 -0.355037f, 4.680567f, 0.319410f,
 -2.167758f, 1.643017f, 0.120486f,
 -2.197268f, 1.792722f, -1.190592f,
 -1.104410f, 1.882367f, -1.411099f,
 -1.076735f, 1.579371f, 0.200832f,
 1.731733f, 11.223578f, 5.121575f,
 1.718282f, 9.956877f, 5.494164f,
 1.412223f, 7.899773f, 4.631219f,
 2.249736f, 10.160722f, 3.651819f,
 2.101706f, 11.539812f, 3.009274f,
 1.605495f, 7.597558f, 2.259626f,
 2.250509f, 4.619422f, 1.283033f,
 2.318606f, 5.094736f, -1.432883f,
 4.044165f, 9.386213f, 3.874160f,
 4.796908f, 10.491846f, -0.720660f,
 5.349900f, 11.564281f, 2.135671f,
 1.685832f, 6.227582f, 1.285905f,
 1.923605f, 7.115250f, -0.537461f,
 2.256800f, 6.768833f, 0.578009f,
 2.916009f, 4.082506f, -0.056654f,
 5.751262f, 10.055963f, 1.221723f,
 5.319962f, 8.033656f, 0.482070f,
 6.044112f, 8.473108f, -1.155765f,
 6.450565f, 10.136223f, -0.916867f,
 8.008821f, 7.136746f, 1.287677f,
 7.475436f, 6.021396f, 0.755222f,
 7.953656f, 6.304658f, -0.318571f,
 8.490432f, 7.418343f, 0.215263f,
 3.321053f, 11.087569f, 0.819311f,
 3.399212f, 10.975534f, 3.136927f,
 3.101002f, 9.502994f, 0.657673f,
 3.249709f, 8.892984f, 2.400043f,
 1.106817f, 2.378693f, 0.427839f,
 1.094489f, 2.703720f, 2.373038f,
 2.217473f, 2.413206f, 0.789520f,
 2.207058f, 2.673597f, 2.264411f,
 1.030058f, -0.007464f, -0.564687f,
 0.889386f, -0.006621f, 3.716714f,
 2.384098f, -0.008204f, -0.401971f,
 2.384397f, -0.006509f, 3.661922f,
 0.607264f, 4.871530f, -0.731534f,
 1.628259f, 4.951066f, -0.522310f,
 1.641762f, 4.914547f, 0.529266f,
 0.485249f, 4.644640f, 0.435060f,
 2.163943f, 1.211284f, 1.299223f,
 2.197287f, 0.822504f, 0.055633f,
 1.104545f, 0.822309f, -0.183592f,
 1.071102f, 1.237767f, 1.367229f,
 9.009093f, 9.612968f, -4.808116f,
 11.678891f, 6.195691f, -4.744551f,
 5.286376f, 7.177457f, 3.923130f,
 8.092944f, 3.696964f, 4.027325f,
 -2.013822f, 9.402781f, 4.989427f,
 -1.503567f, 4.375515f, 8.242581f,
 -5.900630f, 1.511384f, 4.410011f,
 -6.472940f, 6.486073f, 1.194765f,
 -4.625260f, 10.538774f, 2.909710f,
 0.157089f, 13.198054f, 2.859624f,
 0.157089f, 13.198054f, 2.859624f,
 -1.904165f, 7.011240f, 0.091183f,
 -1.904165f, 7.011240f, 0.091183f,
 -4.625260f, 10.538774f, 2.909710f,
 -2.666144f, 4.379189f, -0.520012f,
 -1.904165f, 7.011240f, 0.091183f,
 -1.904165f, 7.011240f, 0.091183f,
 -2.666144f, 4.379189f, -0.520012f,
 0.051648f, 2.751340f, -0.039711f,
 -3.444292f, 3.882624f, 3.616929f,
 -4.408701f, 4.660362f, 4.144479f,
 -4.408701f, 4.660362f, 4.144479f,
 -3.444292f, 3.882624f, 3.616929f,
 -3.444292f, 3.882624f, 3.616929f,
 -3.849010f, 6.008986f, 1.528244f,
 -4.408701f, 4.660362f, 4.144479f,
 -4.408701f, 4.660362f, 4.144479f,
 -3.849010f, 6.008986f, 1.528244f,
 -2.482257f, 9.193862f, 0.817019f,
 -2.482257f, 9.193862f, 0.817019f,
 -1.013715f, 2.709918f, -0.051814f,
 -1.013715f, 2.709918f, -0.051814f,
 -1.104410f, 1.882367f, -1.411099f,
 -0.238706f, 4.920681f, -0.845570f,
 -1.013715f, 2.709918f, -0.051814f,
 -1.013715f, 2.709918f, -0.051814f,
 -2.197268f, 1.792722f, -1.190592f,
 -2.167758f, 1.643017f, 0.120486f,
 -2.167758f, 1.643017f, 0.120486f,
 -1.030658f, 1.259301f, -2.078791f,
 -1.104410f, 1.882367f, -1.411099f,
 -1.104410f, 1.882367f, -1.411099f,
 -2.197268f, 1.792722f, -1.190592f,
 -0.889387f, -0.360198f, 1.884867f,
 -1.030658f, 1.259301f, -2.078791f,
 -1.076735f, 1.579371f, 0.200832f,
 -1.076735f, 1.579371f, 0.200832f,
 -1.030658f, 1.259301f, -2.078791f,
 -1.104410f, 1.882367f, -1.411099f,
 -2.167758f, 1.643017f, 0.120486f,
 -1.076735f, 1.579371f, 0.200832f,
 -1.076735f, 1.579371f, 0.200832f,
 -0.889387f, -0.360198f, 1.884867f,
 -0.008360f, 6.211145f, 3.970009f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.172113f, 9.718672f, 5.979029f,
 0.191417f, 12.025266f, 5.415608f,
 0.210788f, 12.336196f, 3.075309f,
 0.210788f, 12.336196f, 3.075309f,
 0.191417f, 12.025266f, 5.415608f,
 -0.008360f, 6.211145f, 3.970009f,
 -0.008360f, 6.211145f, 3.970009f,
 0.101008f, 6.067029f, 0.570312f,
 0.157089f, 13.198054f, 2.859624f,
 0.198723f, 11.422918f, -0.840400f,
 0.198723f, 11.422918f, -0.840400f,
 5.349900f, 11.564281f, 2.135671f,
 0.157089f, 13.198054f, 2.859624f,
 0.157089f, 13.198054f, 2.859624f,
 0.390210f, 10.064568f, 5.077292f,
 0.388430f, 7.427046f, -1.224725f,
 0.198723f, 11.422918f, -0.840400f,
 0.198723f, 11.422918f, -0.840400f,
 -0.005536f, 6.024216f, 1.457118f,
 -0.005536f, 6.024216f, 1.457118f,
 0.062477f, 3.606373f, 2.507570f,
 5.349900f, 11.564281f, 2.135671f,
 2.256800f, 6.768833f, 0.578009f,
 2.256800f, 6.768833f, 0.578009f,
 0.388430f, 7.427046f, -1.224725f,
 0.388430f, 7.427046f, -1.224725f,
 0.186239f, 3.757586f, -1.998760f,
 0.390210f, 10.064568f, 5.077292f,
 -0.005536f, 6.024216f, 1.457118f,
 -0.005536f, 6.024216f, 1.457118f,
 2.916009f, 4.082506f, -0.056654f,
 2.256800f, 6.768833f, 0.578009f,
 2.256800f, 6.768833f, 0.578009f,
 0.062477f, 3.606373f, 2.507570f,
 0.051648f, 2.751340f, -0.039711f,
 0.051648f, 2.751340f, -0.039711f,
 2.916009f, 4.082506f, -0.056654f,
 0.051648f, 2.751340f, -0.039711f,
 0.186239f, 3.757586f, -1.998760f,
 0.186239f, 3.757586f, -1.998760f,
 8.490432f, 7.418343f, 0.215263f,
 8.490432f, 7.418343f, 0.215263f,
 7.953656f, 6.304658f, -0.318571f,
 7.953656f, 6.304658f, -0.318571f,
 7.953656f, 6.304658f, -0.318571f,
 6.044112f, 8.473108f, -1.155765f,
 8.490432f, 7.418343f, 0.215263f,
 8.490432f, 7.418343f, 0.215263f,
 3.101002f, 9.502994f, 0.657673f,
 3.101002f, 9.502994f, 0.657673f,
 6.044112f, 8.473108f, -1.155765f,
 1.104545f, 0.822309f, -0.183592f,
 1.106817f, 2.378693f, 0.427839f,
 1.106817f, 2.378693f, 0.427839f,
 1.106817f, 2.378693f, 0.427839f,
 1.106817f, 2.378693f, 0.427839f,
 0.607264f, 4.871530f, -0.731534f,
 2.163943f, 1.211284f, 1.299223f,
 2.163943f, 1.211284f, 1.299223f,
 2.197287f, 0.822504f, 0.055633f,
 2.197287f, 0.822504f, 0.055633f,
 1.104545f, 0.822309f, -0.183592f,
 1.104545f, 0.822309f, -0.183592f,
 1.030058f, -0.007464f, -0.564687f,
 1.104545f, 0.822309f, -0.183592f,
 1.030058f, -0.007464f, -0.564687f,
 1.071102f, 1.237767f, 1.367229f,
 1.071102f, 1.237767f, 1.367229f,
 1.030058f, -0.007464f, -0.564687f,
 0.889386f, -0.006621f, 3.716714f,
 2.163943f, 1.211284f, 1.299223f,
 1.071102f, 1.237767f, 1.367229f,
 1.071102f, 1.237767f, 1.367229f,
 0.889386f, -0.006621f, 3.716714f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.545759f, -0.220829f, 0.808321f},
{ -0.583392f, -0.334533f, 0.740096f},
{ -0.590412f, -0.359535f, 0.722598f},
{ -0.598250f, -0.389789f, 0.700115f},
{ 0.487600f, -0.217082f, 0.845649f},
{ 0.539225f, -0.359216f, 0.761709f},
{ 0.530885f, -0.333711f, 0.778972f},
{ 0.548857f, -0.390513f, 0.739091f},
{ -0.015495f, -0.929184f, 0.369294f},
{ -0.025994f, -0.189135f, 0.981607f},
{ -0.753048f, -0.441561f, 0.487794f},
{ -0.748324f, -0.140441f, 0.648295f},
{ -0.684469f, 0.553313f, 0.474707f},
{ -0.014375f, 0.788228f, 0.615216f},
{ -0.983765f, -0.136630f, 0.116357f},
{ -0.725144f, 0.674706f, 0.137618f},
{ -0.002763f, 0.987153f, 0.159757f},
{ -0.856999f, -0.512680f, 0.052084f},
{ 0.032148f, -0.998542f, 0.043364f},
{ -0.073979f, 0.995629f, 0.057018f},
{ -0.127306f, 0.659580f, -0.740775f},
{ -0.878038f, 0.458024f, 0.138796f},
{ -0.789060f, 0.205213f, -0.579026f},
{ -0.420167f, -0.232795f, 0.877078f},
{ 0.056368f, -0.118057f, 0.991406f},
{ 0.130878f, 0.186730f, -0.973654f},
{ -0.342880f, 0.134463f, -0.929706f},
{ -0.886078f, -0.461101f, 0.047451f},
{ -0.046596f, -0.515090f, 0.855869f},
{ -0.081699f, -0.422005f, 0.902905f},
{ -0.738386f, -0.283654f, 0.611822f},
{ -0.672899f, -0.420753f, 0.608419f},
{ -0.425643f, 0.076339f, -0.901665f},
{ -0.867795f, -0.467564f, -0.168275f},
{ 0.046749f, -0.460818f, -0.886263f},
{ -0.047831f, -0.997813f, -0.045629f},
{ 0.057845f, 0.319067f, 0.945965f},
{ -0.921356f, -0.270195f, 0.279461f},
{ 0.942129f, -0.242465f, 0.231525f},
{ 0.145817f, -0.851502f, -0.503669f},
{ 0.075631f, -0.558946f, -0.825747f},
{ -0.961623f, 0.072306f, -0.264675f},
{ -0.628655f, 0.479368f, 0.612372f},
{ -0.840583f, 0.441831f, -0.313378f},
{ -0.836234f, 0.435208f, 0.333627f},
{ 0.996225f, -0.080509f, 0.032455f},
{ 0.012054f, -0.104640f, -0.994437f},
{ 0.708672f, -0.157112f, 0.687823f},
{ -0.908273f, 0.255643f, -0.331190f},
{ -0.553980f, -0.127119f, -0.822768f},
{ 0.793069f, -0.132718f, -0.594497f},
{ 0.493690f, -0.441974f, -0.748952f},
{ -0.698198f, 0.530886f, 0.480291f},
{ -0.575666f, 0.098750f, 0.811700f},
{ 0.550226f, -0.136328f, 0.823812f},
{ 0.822599f, 0.073057f, 0.563910f},
{ 0.936278f, 0.100519f, 0.336569f},
{ 0.552326f, 0.691157f, -0.466089f},
{ -0.599280f, 0.702075f, -0.384649f},
{ -0.925275f, 0.146187f, 0.349994f},
{ -0.000759f, -0.925720f, -0.378210f},
{ -0.000250f, -0.925650f, -0.378381f},
{ -0.000623f, -0.925701f, -0.378256f},
{ -0.000121f, -0.925632f, -0.378424f},
{ -0.871358f, 0.448539f, -0.198865f},
{ -0.379311f, 0.628299f, 0.679238f},
{ 0.842408f, 0.434321f, -0.318926f},
{ 0.360412f, 0.631159f, 0.686834f},
{ 0.677993f, -0.518082f, 0.521456f},
{ 0.716176f, -0.150850f, 0.681422f},
{ 0.634111f, 0.568383f, 0.524256f},
{ 0.623154f, 0.750094f, 0.221444f},
{ 0.973362f, -0.118232f, 0.196436f},
{ 0.788971f, -0.607068f, 0.094833f},
{ 0.813986f, 0.560578f, 0.152249f},
{ 0.672357f, 0.170434f, -0.720339f},
{ 0.597521f, -0.239766f, 0.765168f},
{ 0.418266f, -0.048115f, -0.907049f},
{ 0.901312f, -0.432204f, -0.028913f},
{ 0.392975f, -0.541420f, 0.743260f},
{ 0.634795f, -0.314664f, 0.705707f},
{ 0.833414f, -0.549990f, -0.054149f},
{ 0.578152f, 0.035109f, -0.815174f},
{ 0.296031f, 0.020032f, 0.954968f},
{ -0.397639f, -0.849787f, 0.346042f},
{ 0.911811f, 0.377401f, -0.161770f},
{ 0.070883f, -0.618649f, -0.782463f},
{ 0.416581f, 0.746427f, -0.518948f},
{ -0.229312f, -0.248966f, -0.940974f},
{ 0.669952f, 0.350184f, 0.654626f},
{ 0.579310f, 0.494629f, 0.647875f},
{ 0.073128f, 0.889783f, -0.450488f},
{ -0.452260f, -0.821849f, 0.346446f},
{ -0.595543f, -0.327552f, -0.733511f},
{ 0.294655f, -0.675160f, 0.676267f},
{ -0.358943f, -0.451779f, -0.816735f},
{ 0.632633f, -0.213169f, -0.744537f},
{ -0.750044f, -0.219227f, -0.623998f},
{ 0.895779f, 0.065845f, -0.439597f},
{ 0.669830f, 0.585703f, 0.456377f},
{ 0.705048f, 0.214327f, 0.675996f},
{ -0.944835f, 0.107436f, 0.309426f},
{ -0.652576f, 0.083198f, 0.753142f},
{ -0.594800f, 0.352833f, -0.722303f},
{ -0.937357f, 0.233352f, 0.258667f},
{ 0.658681f, 0.377652f, -0.650783f},
{ 0.921054f, 0.262728f, 0.287459f},
{ 0.000090f, -1.000000f, 0.000417f},
{ -0.000044f, -1.000000f, 0.000369f},
{ -0.000428f, -1.000000f, 0.000229f},
{ -0.000568f, -1.000000f, 0.000178f},
{ 0.387098f, 0.829683f, 0.402221f},
{ 0.878452f, 0.332673f, -0.343004f},
{ -0.863950f, 0.259901f, -0.431325f},
{ -0.385453f, 0.827416f, 0.408423f},
{ -0.701548f, -0.556377f, -0.445281f},
{ -0.691402f, -0.565136f, -0.450094f},
{ -0.697774f, -0.559663f, -0.447089f},
{ -0.687827f, -0.568167f, -0.451753f},
{ -0.726626f, 0.319747f, 0.608092f},
{ -0.729057f, 0.314113f, 0.608119f},
{ -0.728803f, 0.314706f, 0.608117f},
{ -0.731271f, 0.308914f, 0.608124f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagWalk5.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105