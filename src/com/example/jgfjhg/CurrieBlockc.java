package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieBlockc {

static String TextureName = "CurrieBlock3.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -0.220365f, 6.238082f, 1.721781f,
 0.755134f, 4.587529f, 4.045371f,
 0.683289f, 5.506590f, 0.850611f,
 1.664465f, 3.856492f, 3.161577f,
 0.594209f, 4.714621f, 0.927731f,
 1.055365f, 5.373566f, -0.579461f,
 -1.123715f, 4.688261f, 0.700703f,
 -1.192723f, 5.455823f, -0.894421f,
 -0.267466f, 4.624450f, 0.734754f,
 0.518734f, 4.779715f, 0.069624f,
 -0.076887f, 4.971537f, -0.484815f,
 -0.193047f, 5.320793f, 1.408366f,
 0.866434f, 5.685141f, 0.394888f,
 -0.222424f, 6.204115f, -0.618832f,
 -0.155364f, 6.421624f, 1.555510f,
 0.688786f, 6.563903f, 0.693378f,
 -0.199202f, 7.033251f, -0.127240f,
 -0.187956f, 6.627197f, 0.502277f,
 0.244217f, 6.508852f, 0.137168f,
 -0.210524f, 6.284512f, -0.227034f,
 -0.192242f, 7.339899f, 0.363764f,
 0.418820f, 7.019183f, -0.191630f,
 -0.200826f, 6.688309f, -0.712128f,
 -0.199137f, 7.655973f, -0.079033f,
 0.235252f, 7.392625f, -0.413157f,
 -0.199662f, 7.191907f, -0.837911f,
 -0.057648f, 2.448578f, -0.029720f,
 0.359577f, 1.797679f, -0.955786f,
 -1.222497f, 0.000176f, 1.332234f,
 1.067565f, 0.000165f, -0.957830f,
 -0.396488f, 3.813206f, 0.810041f,
 0.212748f, 5.138396f, -0.865791f,
 -0.264186f, 4.796863f, 0.703897f,
 -0.085720f, 5.335956f, -0.463950f,
 0.409308f, 5.067289f, 0.207442f,
 0.095680f, 4.968111f, 0.479433f,
 0.271717f, 5.212805f, -0.183007f,
 0.579944f, 2.397923f, 0.198924f,
 0.946286f, 2.234931f, 0.042361f,
 1.486753f, 0.000160f, 1.332480f,
 0.132201f, -0.000064f, 1.960302f,
 0.807658f, 1.902634f, -0.550001f,
 1.695557f, -0.000130f, 0.396954f,
 0.494496f, 4.030002f, 0.901773f,
 1.266440f, 4.774064f, 0.424966f,
 1.143831f, 5.032699f, -0.254954f,
 0.433737f, 4.680998f, 2.528621f,
 1.360766f, 4.094789f, 1.748650f,
 1.095910f, 4.371398f, 1.528502f,
 0.232932f, 4.921951f, 2.248622f,
 0.839091f, 4.324335f, -0.239068f,
 0.702992f, 4.184585f, 0.122523f,
 1.147512f, 4.738423f, 1.605554f,
 0.095473f, 5.509122f, 2.449342f,
 0.523931f, 4.612271f, 0.472960f,
 1.497235f, 4.796114f, 1.601376f,
 0.735659f, 5.658458f, 2.535330f,
 1.152509f, 5.066796f, 0.406507f,
 1.764226f, 4.516255f, 1.848025f,
 0.936790f, 5.417250f, 2.815154f,
 1.528349f, 4.884507f, 0.241794f,
 1.620323f, 4.232396f, 2.041905f,
 0.505708f, 5.016764f, 3.021230f,
 0.780660f, 5.061654f, -0.226735f,
 -0.557266f, 2.376878f, -0.515798f,
 -1.850546f, -0.000156f, -0.022527f,
 -1.222759f, 0.000160f, -1.377032f,
 -0.566633f, 2.159987f, -0.958375f,
 -0.287188f, -0.000169f, -1.585892f,
 -0.166426f, 1.889989f, -1.143819f,
 -1.423018f, 4.774123f, -0.550056f,
 -1.210980f, 4.033543f, 0.278417f,
 -0.878895f, 5.062291f, -0.991820f,
 -0.757477f, 5.095407f, 0.021896f,
 -0.545118f, 4.972109f, 0.363548f,
 -0.403235f, 5.234885f, -0.362279f,
 -0.556594f, 3.511556f, 1.272188f,
 -0.478560f, 3.908833f, 1.156400f,
 -1.271786f, 3.520058f, 0.304366f,
 -1.438021f, 3.130823f, 0.331593f,
 -0.792743f, 4.188631f, -0.425960f,
 -0.662876f, 4.328484f, -0.795346f,
 -0.456560f, 4.330705f, 1.631159f,
 -1.380194f, 3.742587f, 0.580507f,
 -0.886296f, 4.614359f, -0.042531f,
 -1.085327f, 4.210925f, 1.802966f,
 -1.714060f, 3.742252f, 0.614195f,
 -1.289334f, 4.808049f, -0.020210f,
 -1.162466f, 3.815442f, 1.920998f,
 -1.906772f, 3.299642f, 0.650912f,
 -1.647018f, 4.786235f, -0.305325f,
 -0.614924f, 3.521566f, 1.871732f,
 -1.663059f, 3.016954f, 0.662127f,
 -0.632806f, 5.062573f, -0.740936f,
 -0.809798f, 4.835928f, -0.164239f,
 -1.246568f, 5.688661f, 0.448956f,
 -1.051577f, 6.564142f, 0.746301f,
 -0.641990f, 6.509153f, 0.162663f,
 -0.835312f, 7.020478f, -0.158015f,
 -0.660497f, 7.398183f, -0.388177f,
 -1.592809f, 1.634503f, -0.011142f,
 -1.145900f, 1.683689f, 1.020588f,
 -0.132559f, 1.807627f, 1.497151f,
 0.502570f, 1.728825f, 1.426566f,
 0.568651f, 1.180436f, 0.758303f,
 -0.025159f, 0.954870f, -0.021637f,
 -0.782886f, 1.172651f, -0.514305f,
 -1.132763f, 1.665320f, -0.418338f,
 0.433737f, 4.680998f, 2.528621f,
 0.433737f, 4.680998f, 2.528621f,
 1.360766f, 4.094789f, 1.748650f,
 1.360766f, 4.094789f, 1.748650f,
 0.839091f, 4.324335f, -0.239068f,
 0.839091f, 4.324335f, -0.239068f,
 0.505708f, 5.016764f, 3.021230f,
 0.505708f, 5.016764f, 3.021230f,
 -0.025159f, 0.954870f, -0.021637f,
 -0.025159f, 0.954870f, -0.021637f,
 0.359577f, 1.797679f, -0.955786f,
 -1.145900f, 1.683689f, 1.020588f,
 -1.145900f, 1.683689f, 1.020588f,
 -0.057648f, 2.448578f, -0.029720f,
 -0.057648f, 2.448578f, -0.029720f,
 -0.396488f, 3.813206f, 0.810041f,
 -0.396488f, 3.813206f, 0.810041f,
 0.359577f, 1.797679f, -0.955786f,
 0.212748f, 5.138396f, -0.865791f,
 0.212748f, 5.138396f, -0.865791f,
 -0.396488f, 3.813206f, 0.810041f,
 -0.264186f, 4.796863f, 0.703897f,
 -0.264186f, 4.796863f, 0.703897f,
 0.212748f, 5.138396f, -0.865791f,
 0.212748f, 5.138396f, -0.865791f,
 -0.085720f, 5.335956f, -0.463950f,
 -0.556594f, 3.511556f, 1.272188f,
 -0.556594f, 3.511556f, 1.272188f,
 -1.438021f, 3.130823f, 0.331593f,
 -0.662876f, 4.328484f, -0.795346f,
 -0.662876f, 4.328484f, -0.795346f,
 -1.438021f, 3.130823f, 0.331593f,
 -0.614924f, 3.521566f, 1.871732f,
 -0.614924f, 3.521566f, 1.871732f,
 -0.193047f, 5.320793f, 1.408366f,
 -0.267466f, 4.624450f, 0.734754f,
 -0.267466f, 4.624450f, 0.734754f,
 -0.222424f, 6.204115f, -0.618832f,
 -0.076887f, 4.971537f, -0.484815f,
 -0.076887f, 4.971537f, -0.484815f,
 -0.155364f, 6.421624f, 1.555510f,
 -0.193047f, 5.320793f, 1.408366f,
 -0.193047f, 5.320793f, 1.408366f,
 -0.222424f, 6.204115f, -0.618832f,
 -0.222424f, 6.204115f, -0.618832f,
 -0.199202f, 7.033251f, -0.127240f,
 -0.199202f, 7.033251f, -0.127240f,
 -0.155364f, 6.421624f, 1.555510f,
 -0.192242f, 7.339899f, 0.363764f,
 -0.192242f, 7.339899f, 0.363764f,
 -0.187956f, 6.627197f, 0.502277f,
 -0.200826f, 6.688309f, -0.712128f,
 -0.210524f, 6.284512f, -0.227034f,
 -0.210524f, 6.284512f, -0.227034f,
 -0.199137f, 7.655973f, -0.079033f,
 -0.192242f, 7.339899f, 0.363764f,
 -0.192242f, 7.339899f, 0.363764f,
 -0.199662f, 7.191907f, -0.837911f,
 -0.200826f, 6.688309f, -0.712128f,
 -0.200826f, 6.688309f, -0.712128f,
 -0.199662f, 7.191907f, -0.837911f,
 -0.199137f, 7.655973f, -0.079033f,
 -1.145900f, 1.683689f, 1.020588f,
 -1.222497f, 0.000176f, 1.332234f,
 -1.222497f, 0.000176f, 1.332234f,
 1.067565f, 0.000165f, -0.957830f,
 1.067565f, 0.000165f, -0.957830f,
 -0.025159f, 0.954870f, -0.021637f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.716998f, 0.674024f, 0.177778f},
{ 0.716194f, 0.674814f, 0.178023f},
{ 0.716675f, 0.674342f, 0.177876f},
{ 0.715873f, 0.675129f, 0.178121f},
{ -0.064760f, 0.921456f, 0.383047f},
{ -0.043393f, 0.909652f, 0.413098f},
{ -0.040311f, 0.907840f, 0.417374f},
{ -0.027921f, 0.900280f, 0.434416f},
{ -0.161421f, 0.552377f, 0.817816f},
{ 0.586855f, 0.431669f, 0.685028f},
{ 0.030570f, 0.293688f, 0.955413f},
{ 0.983294f, -0.126750f, 0.130642f},
{ 0.847551f, 0.392706f, -0.356988f},
{ 0.811019f, -0.214512f, -0.544273f},
{ 0.506916f, -0.215568f, -0.834606f},
{ 0.647469f, 0.404773f, -0.645711f},
{ -0.648647f, 0.491916f, 0.580754f},
{ -0.509745f, 0.243821f, 0.825052f},
{ 0.904831f, 0.122592f, 0.407739f},
{ 0.358749f, -0.127436f, 0.924694f},
{ -0.362444f, -0.309744f, 0.879030f},
{ 0.343680f, 0.171065f, -0.923375f},
{ 0.755466f, 0.151997f, -0.637313f},
{ 0.174443f, 0.742885f, 0.646291f},
{ 0.381499f, 0.509436f, 0.771319f},
{ -0.265935f, 0.293451f, 0.918240f},
{ 0.035249f, 0.906970f, -0.419719f},
{ 0.233323f, 0.972334f, -0.011286f},
{ -0.854644f, -0.246788f, -0.456814f},
{ -0.882353f, -0.468580f, -0.043432f},
{ -0.423894f, -0.836251f, 0.347849f},
{ -0.016719f, -0.999804f, 0.010631f},
{ 0.948699f, -0.028748f, -0.314872f},
{ 0.148883f, -0.975152f, 0.164050f},
{ -0.671625f, 0.674861f, -0.305750f},
{ -0.583095f, 0.709747f, -0.395297f},
{ -0.787447f, 0.327000f, 0.522492f},
{ 0.150933f, 0.961602f, -0.229218f},
{ 0.508288f, 0.859617f, -0.051986f},
{ -0.219430f, 0.970169f, -0.103069f},
{ 0.680121f, 0.293230f, 0.671901f},
{ 0.987305f, 0.106984f, 0.117406f},
{ 0.157731f, -0.868440f, -0.470036f},
{ 0.021814f, -0.291723f, 0.956254f},
{ 0.673411f, -0.650995f, 0.350319f},
{ 0.963782f, 0.081815f, -0.253832f},
{ 0.033845f, -0.428968f, 0.902686f},
{ -0.093301f, -0.721886f, 0.685694f},
{ 0.996752f, -0.069271f, -0.041084f},
{ 0.930655f, -0.365243f, 0.021866f},
{ -0.065675f, 0.189391f, -0.979703f},
{ 0.062073f, -0.029207f, -0.997644f},
{ 0.035813f, 0.449218f, 0.892704f},
{ 0.795713f, 0.568654f, 0.208504f},
{ -0.009016f, 0.920665f, -0.390250f},
{ 0.028623f, 0.190868f, 0.981198f},
{ 0.944962f, -0.175354f, 0.276221f},
{ 0.021370f, 0.503039f, 0.864000f},
{ 0.999598f, 0.022343f, 0.017454f},
{ -0.034588f, -0.763844f, -0.644473f},
{ -0.016435f, -0.573973f, -0.818710f},
{ 0.009065f, 0.993000f, 0.117768f},
{ 0.725194f, 0.589334f, -0.356060f},
{ -0.022661f, 0.283364f, -0.958745f},
{ -0.713763f, -0.117212f, -0.690509f},
{ -0.538733f, 0.370020f, -0.756870f},
{ -0.887678f, 0.181347f, 0.423250f},
{ -0.903207f, 0.428693f, 0.020941f},
{ 0.083997f, -0.181262f, -0.979841f},
{ 0.446215f, 0.375367f, -0.812399f},
{ -0.891420f, -0.266518f, 0.366524f},
{ -0.937815f, 0.044434f, -0.344279f},
{ -0.202172f, 0.200796f, -0.958544f},
{ -0.641833f, 0.648128f, 0.409855f},
{ -0.646810f, 0.399980f, 0.649348f},
{ -0.191526f, 0.968875f, -0.156841f},
{ 0.212062f, -0.787619f, -0.578520f},
{ 0.972174f, -0.214376f, -0.094449f},
{ 0.675144f, -0.722781f, -0.147541f},
{ 0.782886f, 0.296366f, -0.547043f},
{ -0.845712f, 0.057749f, -0.530505f},
{ 0.895310f, -0.292392f, 0.336045f},
{ 0.367101f, 0.926987f, 0.077026f},
{ 0.405497f, 0.911693f, 0.066245f},
{ 0.489996f, 0.490805f, 0.720427f},
{ -0.432512f, 0.853815f, 0.289712f},
{ -0.698671f, 0.589928f, 0.404776f},
{ -0.116805f, 0.736857f, 0.665881f},
{ -0.592908f, -0.307230f, 0.744359f},
{ -0.960456f, -0.274962f, -0.043813f},
{ -0.440874f, -0.283855f, -0.851502f},
{ -0.398988f, -0.883729f, -0.244604f},
{ 0.232127f, -0.713649f, 0.660925f},
{ -0.615232f, -0.092141f, -0.782943f},
{ -0.993108f, -0.111682f, -0.035551f},
{ -0.906166f, -0.193845f, -0.375881f},
{ -0.776261f, 0.580274f, 0.246376f},
{ -0.998660f, 0.020749f, 0.047412f},
{ -0.927125f, -0.173599f, 0.332118f},
{ -0.732604f, 0.586437f, -0.345517f},
{ -0.987794f, 0.155758f, -0.001812f},
{ -0.677765f, 0.163397f, 0.716894f},
{ 0.039183f, 0.253385f, 0.966572f},
{ 0.712330f, 0.421396f, 0.561259f},
{ 0.736855f, 0.657354f, -0.157894f},
{ 0.461015f, 0.757033f, -0.462997f},
{ 0.149456f, 0.664837f, -0.731885f},
{ -0.545501f, 0.393174f, -0.740164f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieBlock3.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73