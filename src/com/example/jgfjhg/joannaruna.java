package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaruna {

static String TextureName = "joannarun1.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.290479f, 1.809538f, -0.828681f,
 0.864881f, 1.869726f, -0.953230f,
 0.995108f, 1.558585f, -0.429224f,
 0.418491f, 1.524468f, -0.315775f,
 0.243472f, 1.300250f, -1.210599f,
 0.822821f, 1.301912f, -1.318805f,
 1.155511f, 0.442311f, 0.594980f,
 0.575296f, 0.443388f, 0.695127f,
 0.112413f, 3.636487f, -0.242741f,
 0.871656f, 3.756811f, -0.257406f,
 0.994715f, 4.168456f, 0.502706f,
 0.251218f, 4.106702f, 0.620876f,
 0.674450f, 2.807646f, 1.160092f,
 1.179011f, 2.839436f, 1.067546f,
 1.079360f, 2.920272f, 0.592712f,
 0.565520f, 2.894799f, 0.658100f,
 1.010071f, 8.483205f, 0.987150f,
 0.428765f, 6.657440f, 0.948331f,
 -0.099903f, 7.645091f, 0.470765f,
 0.363472f, 8.424097f, 0.598558f,
 0.366860f, 8.137956f, 2.046654f,
 0.771983f, 7.196391f, 0.266781f,
 0.286515f, 7.525483f, -0.271395f,
 -0.088341f, 5.860825f, -0.040284f,
 0.629040f, 5.725580f, -0.043654f,
 0.816309f, 5.394255f, 0.414184f,
 0.206751f, 5.147990f, 0.815817f,
 0.351395f, 9.429339f, 2.170856f,
 0.991613f, 9.197081f, 1.819195f,
 0.993085f, 8.343174f, 1.730008f,
 0.783099f, 7.935248f, 1.175318f,
 1.379708f, 7.147811f, 0.016723f,
 0.384783f, 9.548686f, 0.749428f,
 1.008886f, 9.259828f, 1.061653f,
 0.613316f, 8.116603f, 0.719797f,
 1.215869f, 7.134993f, -0.368897f,
 1.323829f, 7.894996f, 0.087021f,
 1.090200f, 7.971347f, -0.318292f,
 1.243094f, 6.176988f, -0.146811f,
 1.587823f, 6.224533f, -0.317542f,
 1.515182f, 6.014291f, -0.593981f,
 1.178865f, 5.941163f, -0.462110f,
 0.439009f, 7.726943f, 1.561315f,
 0.387268f, 8.046065f, 0.607712f,
 2.092933f, 6.198448f, 1.505198f,
 2.454841f, 6.309316f, 0.893699f,
 2.495061f, 5.825680f, 0.715404f,
 2.165766f, 5.477313f, 1.117995f,
 -0.365874f, 3.104460f, -0.983199f,
 1.406543f, 4.066697f, 0.708163f,
 1.267407f, 3.479955f, -0.592786f,
 0.151525f, 3.515461f, 1.014453f,
 -0.004987f, 7.956801f, 1.775800f,
 0.514144f, 7.446376f, 1.810695f,
 -0.083677f, 7.860280f, 2.218484f,
 0.486995f, 7.369951f, 2.221735f,
 -0.272121f, 9.196559f, 1.790954f,
 -0.254828f, 9.259171f, 1.034261f,
 -0.520864f, 5.390160f, 0.885973f,
 -0.654140f, 5.725326f, 0.400423f,
 -0.195362f, 6.960483f, 1.515703f,
 -0.599248f, 7.211941f, 1.782804f,
 -0.204143f, 8.006702f, 1.151851f,
 -0.023672f, 7.839890f, 1.525756f,
 -0.270581f, 8.342836f, 1.701189f,
 -0.253380f, 8.482624f, 0.959549f,
 1.959638f, 6.906496f, 0.274939f,
 2.470727f, 6.516236f, 0.787376f,
 2.109781f, 7.348281f, 0.824389f,
 2.446673f, 7.066736f, 1.101555f,
 1.176619f, 6.676323f, 1.948888f,
 1.306580f, 6.495591f, 2.317095f,
 1.506653f, 6.792035f, 2.407590f,
 1.403242f, 6.965672f, 2.083705f,
 -1.277966f, 3.837349f, 1.096812f,
 -1.489339f, 3.481779f, -0.090533f,
 -0.307691f, 0.582171f, 0.757615f,
 -0.889522f, 0.554548f, 0.684844f,
 -0.986732f, 0.785515f, 1.255378f,
 -0.404412f, 0.801701f, 1.338980f,
 -0.285271f, 0.064685f, 0.607524f,
 -0.864311f, 0.059246f, 0.513349f,
 -1.228549f, 0.069301f, 2.606048f,
 -0.648289f, 0.069393f, 2.704846f,
 -0.108472f, 3.735837f, 0.025245f,
 -0.877097f, 3.761510f, 0.068043f,
 -1.004754f, 4.011969f, 0.893835f,
 -0.253919f, 4.023681f, 0.974570f,
 -0.498658f, 2.703371f, 1.320182f,
 -1.008240f, 2.691005f, 1.255957f,
 -0.915795f, 2.577848f, 0.654570f,
 -0.397513f, 2.592020f, 0.682930f,
 2.034465f, 12.055756f, 1.027655f,
 1.937757f, 11.792369f, 2.145665f,
 2.121426f, 4.806563f, 0.044165f,
 1.965843f, 4.664889f, 1.092771f,
 0.565520f, 2.894799f, 0.658100f,
 0.565520f, 2.894799f, 0.658100f,
 0.112413f, 3.636487f, -0.242741f,
 0.290479f, 1.809538f, -0.828681f,
 0.243472f, 1.300250f, -1.210599f,
 0.243472f, 1.300250f, -1.210599f,
 0.290479f, 1.809538f, -0.828681f,
 0.243472f, 1.300250f, -1.210599f,
 0.418491f, 1.524468f, -0.315775f,
 0.418491f, 1.524468f, -0.315775f,
 0.243472f, 1.300250f, -1.210599f,
 0.575296f, 0.443388f, 0.695127f,
 0.418491f, 1.524468f, -0.315775f,
 0.575296f, 0.443388f, 0.695127f,
 0.575296f, 0.443388f, 0.695127f,
 0.995108f, 1.558585f, -0.429224f,
 0.995108f, 1.558585f, -0.429224f,
 0.995108f, 1.558585f, -0.429224f,
 0.995108f, 1.558585f, -0.429224f,
 0.864881f, 1.869726f, -0.953230f,
 0.864881f, 1.869726f, -0.953230f,
 0.565520f, 2.894799f, 0.658100f,
 0.565520f, 2.894799f, 0.658100f,
 0.864881f, 1.869726f, -0.953230f,
 0.290479f, 1.809538f, -0.828681f,
 0.783099f, 7.935248f, 1.175318f,
 0.783099f, 7.935248f, 1.175318f,
 0.771983f, 7.196391f, 0.266781f,
 0.771983f, 7.196391f, 0.266781f,
 0.783099f, 7.935248f, 1.175318f,
 0.783099f, 7.935248f, 1.175318f,
 0.613316f, 8.116603f, 0.719797f,
 0.613316f, 8.116603f, 0.719797f,
 0.613316f, 8.116603f, 0.719797f,
 0.783099f, 7.935248f, 1.175318f,
 0.783099f, 7.935248f, 1.175318f,
 0.771983f, 7.196391f, 0.266781f,
 0.286515f, 7.525483f, -0.271395f,
 1.243094f, 6.176988f, -0.146811f,
 1.243094f, 6.176988f, -0.146811f,
 0.286515f, 7.525483f, -0.271395f,
 0.286515f, 7.525483f, -0.271395f,
 0.771983f, 7.196391f, 0.266781f,
 2.092933f, 6.198448f, 1.505198f,
 2.092933f, 6.198448f, 1.505198f,
 1.243094f, 6.176988f, -0.146811f,
 2.165766f, 5.477313f, 1.117995f,
 2.165766f, 5.477313f, 1.117995f,
 1.243094f, 6.176988f, -0.146811f,
 0.286515f, 7.525483f, -0.271395f,
 0.286515f, 7.525483f, -0.271395f,
 0.613316f, 8.116603f, 0.719797f,
 0.613316f, 8.116603f, 0.719797f,
 2.165766f, 5.477313f, 1.117995f,
 -0.365874f, 3.104460f, -0.983199f,
 1.267407f, 3.479955f, -0.592786f,
 0.151525f, 3.515461f, 1.014453f,
 0.151525f, 3.515461f, 1.014453f,
 1.267407f, 3.479955f, -0.592786f,
 1.406543f, 4.066697f, 0.708163f,
 0.351395f, 9.429339f, 2.170856f,
 0.384783f, 9.548686f, 0.749428f,
 0.384783f, 9.548686f, 0.749428f,
 0.428765f, 6.657440f, 0.948331f,
 -0.023672f, 7.839890f, 1.525756f,
 0.428765f, 6.657440f, 0.948331f,
 0.439009f, 7.726943f, 1.561315f,
 -0.023672f, 7.839890f, 1.525756f,
 -0.195362f, 6.960483f, 1.515703f,
 -0.195362f, 6.960483f, 1.515703f,
 0.439009f, 7.726943f, 1.561315f,
 0.366860f, 8.137956f, 2.046654f,
 -0.023672f, 7.839890f, 1.525756f,
 0.366860f, 8.137956f, 2.046654f,
 -0.023672f, 7.839890f, 1.525756f,
 0.387268f, 8.046065f, 0.607712f,
 -0.204143f, 8.006702f, 1.151851f,
 0.363472f, 8.424097f, 0.598558f,
 -0.204143f, 8.006702f, 1.151851f,
 0.363472f, 8.424097f, 0.598558f,
 -0.204143f, 8.006702f, 1.151851f,
 -0.023672f, 7.839890f, 1.525756f,
 -0.023672f, 7.839890f, 1.525756f,
 0.206751f, 5.147990f, 0.815817f,
 0.428765f, 6.657440f, 0.948331f,
 0.428765f, 6.657440f, 0.948331f,
 -0.195362f, 6.960483f, 1.515703f,
 1.176619f, 6.676323f, 1.948888f,
 -0.599248f, 7.211941f, 1.782804f,
 1.176619f, 6.676323f, 1.948888f,
 -0.599248f, 7.211941f, 1.782804f,
 -0.599248f, 7.211941f, 1.782804f,
 -0.195362f, 6.960483f, 1.515703f,
 1.959638f, 6.906496f, 0.274939f,
 1.959638f, 6.906496f, 0.274939f,
 2.470727f, 6.516236f, 0.787376f,
 1.176619f, 6.676323f, 1.948888f,
 2.470727f, 6.516236f, 0.787376f,
 1.176619f, 6.676323f, 1.948888f,
 -0.599248f, 7.211941f, 1.782804f,
 -0.599248f, 7.211941f, 1.782804f,
 -0.204143f, 8.006702f, 1.151851f,
 -0.099903f, 7.645091f, 0.470765f,
 -0.204143f, 8.006702f, 1.151851f,
 0.387268f, 8.046065f, 0.607712f,
 -0.099903f, 7.645091f, 0.470765f,
 2.470727f, 6.516236f, 0.787376f,
 0.363472f, 8.424097f, 0.598558f,
 0.384783f, 9.548686f, 0.749428f,
 0.363472f, 8.424097f, 0.598558f,
 0.351395f, 9.429339f, 2.170856f,
 0.366860f, 8.137956f, 2.046654f,
 0.366860f, 8.137956f, 2.046654f,
 -0.088341f, 5.860825f, -0.040284f,
 -0.099903f, 7.645091f, 0.470765f,
 -0.088341f, 5.860825f, -0.040284f,
 -0.365874f, 3.104460f, -0.983199f,
 -0.088341f, 5.860825f, -0.040284f,
 -0.088341f, 5.860825f, -0.040284f,
 0.151525f, 3.515461f, 1.014453f,
 0.206751f, 5.147990f, 0.815817f,
 0.206751f, 5.147990f, 0.815817f,
 -0.365874f, 3.104460f, -0.983199f,
 0.151525f, 3.515461f, 1.014453f,
 -1.489339f, 3.481779f, -0.090533f,
 0.151525f, 3.515461f, 1.014453f,
 -1.277966f, 3.837349f, 1.096812f,
 -1.489339f, 3.481779f, -0.090533f,
 -0.397513f, 2.592020f, 0.682930f,
 -0.108472f, 3.735837f, 0.025245f,
 -0.397513f, 2.592020f, 0.682930f,
 -0.307691f, 0.582171f, 0.757615f,
 -0.285271f, 0.064685f, 0.607524f,
 -0.285271f, 0.064685f, 0.607524f,
 -0.307691f, 0.582171f, 0.757615f,
 -0.404412f, 0.801701f, 1.338980f,
 -0.285271f, 0.064685f, 0.607524f,
 -0.404412f, 0.801701f, 1.338980f,
 -0.648289f, 0.069393f, 2.704846f,
 -0.285271f, 0.064685f, 0.607524f,
 -0.404412f, 0.801701f, 1.338980f,
 -0.648289f, 0.069393f, 2.704846f,
 -0.648289f, 0.069393f, 2.704846f,
 -0.986732f, 0.785515f, 1.255378f,
 -0.986732f, 0.785515f, 1.255378f,
 -0.986732f, 0.785515f, 1.255378f,
 -0.889522f, 0.554548f, 0.684844f,
 -0.986732f, 0.785515f, 1.255378f,
 -0.397513f, 2.592020f, 0.682930f,
 -0.889522f, 0.554548f, 0.684844f,
 -0.397513f, 2.592020f, 0.682930f,
 -0.307691f, 0.582171f, 0.757615f,
 -0.889522f, 0.554548f, 0.684844f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.584014f, -0.648666f, -0.488018f},
{ 0.407654f, -0.633754f, -0.657399f},
{ -0.447349f, -0.838728f, 0.310506f},
{ 0.540308f, -0.829091f, 0.143791f},
{ -0.572951f, 0.123241f, 0.810271f},
{ -0.278902f, -0.295116f, 0.913849f},
{ 0.739421f, 0.352041f, 0.573868f},
{ 0.644701f, -0.257960f, 0.719595f},
{ -0.649801f, -0.713910f, -0.260944f},
{ -0.972028f, -0.045273f, -0.230460f},
{ 0.824226f, 0.195308f, -0.531513f},
{ 0.665418f, -0.473536f, -0.577046f},
{ -0.756113f, 0.554948f, -0.346880f},
{ 0.475197f, 0.635143f, -0.608918f},
{ 0.975285f, -0.059393f, 0.212820f},
{ -0.799824f, -0.079088f, 0.595002f},
{ 0.936312f, 0.205114f, 0.285040f},
{ 0.803052f, -0.009317f, 0.595837f},
{ -0.034777f, 0.710937f, -0.702395f},
{ 0.217389f, 0.144310f, -0.965358f},
{ -0.020306f, 0.640138f, 0.767992f},
{ 0.738058f, 0.457601f, 0.495854f},
{ 0.020407f, 0.739702f, -0.672625f},
{ 0.792919f, 0.430232f, -0.431485f},
{ 0.833683f, 0.188228f, 0.519176f},
{ 0.535880f, 0.178729f, -0.825160f},
{ 0.862043f, -0.384599f, 0.330100f},
{ -0.526100f, 0.288520f, -0.799984f},
{ 0.155101f, 0.894163f, -0.420020f},
{ 0.885579f, -0.351000f, 0.304218f},
{ 0.707423f, -0.206668f, 0.675900f},
{ 0.401171f, -0.529968f, 0.747125f},
{ 0.032886f, -0.357743f, 0.933241f},
{ 0.814979f, -0.322982f, 0.481136f},
{ -0.416446f, 0.289692f, -0.861772f},
{ -0.070951f, 0.047202f, -0.996362f},
{ 0.893342f, -0.082745f, -0.441693f},
{ 0.227770f, 0.073044f, 0.970971f},
{ -0.617301f, 0.310593f, 0.722822f},
{ -0.405667f, -0.853033f, 0.328281f},
{ 0.434164f, 0.900809f, 0.006713f},
{ 0.740479f, -0.503525f, -0.445145f},
{ -0.718810f, -0.138572f, 0.681257f},
{ -0.533136f, -0.702126f, -0.472002f},
{ 0.272711f, -0.529791f, -0.803088f},
{ 0.712888f, 0.667476f, -0.215097f},
{ -0.877826f, 0.273578f, -0.393162f},
{ 0.909384f, -0.096315f, 0.404652f},
{ 0.622887f, -0.272470f, -0.733330f},
{ -0.405404f, 0.277501f, -0.871000f},
{ -0.173061f, -0.350673f, -0.920369f},
{ 0.143424f, -0.660263f, 0.737213f},
{ 0.566602f, 0.727503f, -0.386913f},
{ -0.522571f, 0.361632f, 0.772103f},
{ 0.470452f, 0.425893f, -0.772846f},
{ -0.147064f, 0.057958f, 0.987428f},
{ -0.758765f, 0.453789f, 0.467281f},
{ -0.775322f, 0.438632f, -0.454398f},
{ -0.336283f, 0.106677f, 0.935700f},
{ 0.313510f, -0.669707f, 0.673205f},
{ -0.840805f, 0.429315f, -0.329751f},
{ -0.991361f, -0.027337f, 0.128282f},
{ -0.917340f, 0.339303f, -0.208234f},
{ 0.038948f, -0.590543f, 0.806065f},
{ -0.868824f, -0.215923f, 0.445559f},
{ -0.848072f, -0.104542f, -0.519466f},
{ -0.597968f, -0.344166f, -0.723867f},
{ -0.254925f, 0.939671f, -0.228104f},
{ 0.286934f, -0.949643f, -0.125885f},
{ 0.847940f, 0.223557f, 0.480646f},
{ -0.420460f, -0.630021f, -0.652906f},
{ -0.012108f, -0.863310f, 0.504529f},
{ 0.554174f, -0.007016f, 0.832371f},
{ 0.074689f, 0.996913f, 0.024198f},
{ -0.723890f, -0.163184f, 0.670339f},
{ -0.864385f, -0.255023f, -0.433361f},
{ 0.613313f, -0.783614f, -0.098975f},
{ 0.515947f, -0.563812f, 0.644915f},
{ -0.523909f, -0.800038f, -0.292333f},
{ -0.697234f, -0.568156f, 0.437108f},
{ 0.687400f, 0.058554f, 0.723915f},
{ -0.818706f, 0.157076f, 0.552311f},
{ 0.606104f, 0.064927f, 0.792731f},
{ -0.822574f, 0.058278f, 0.565664f},
{ 0.784805f, -0.445839f, -0.430475f},
{ 0.865913f, -0.176065f, -0.468183f},
{ -0.742700f, -0.121340f, -0.658539f},
{ -0.689631f, -0.326442f, -0.646409f},
{ 0.763337f, 0.048403f, -0.644184f},
{ -0.547474f, 0.028056f, -0.836352f},
{ -0.942471f, 0.221234f, 0.250607f},
{ 0.815949f, 0.221610f, 0.533963f},
{ 0.996275f, 0.000252f, 0.086237f},
{ 0.995847f, -0.001202f, 0.091032f},
{ 0.990292f, -0.015518f, 0.138137f},
{ 0.989360f, -0.017438f, 0.144437f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannarun1.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117