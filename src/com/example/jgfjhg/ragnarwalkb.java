package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarwalkb {

static String TextureName = "RagWalk2.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -2.076178f, 10.169148f, 4.238584f,
 -0.548481f, 10.976451f, 5.311684f,
 -1.850105f, 14.877173f, 6.370114f,
 -3.468869f, 12.756278f, 4.088647f,
 1.515855f, 10.152667f, 4.097415f,
 0.076139f, 10.974632f, 5.286777f,
 1.463547f, 14.868289f, 6.238549f,
 2.895561f, 12.717999f, 3.853146f,
 -1.769165f, 11.156034f, 5.176571f,
 -1.753688f, 9.889490f, 5.560903f,
 -1.454159f, 7.823952f, 4.713137f,
 0.010691f, 6.144594f, 4.041301f,
 -0.205254f, 9.654110f, 6.037275f,
 -0.229487f, 11.955768f, 5.455507f,
 -2.318737f, 10.095242f, 3.693490f,
 -2.152228f, 11.469892f, 3.045074f,
 -0.253259f, 12.245929f, 3.118577f,
 -0.121382f, 6.002281f, 0.634779f,
 -1.637589f, 7.520719f, 2.338120f,
 -2.258412f, 4.559359f, 1.396544f,
 -2.359494f, 4.986074f, -1.319772f,
 -3.368326f, 9.647322f, 4.064590f,
 -5.060376f, 9.731976f, -0.326219f,
 -0.467909f, 9.986121f, 5.130252f,
 -0.263472f, 11.322479f, -0.787735f,
 -0.225328f, 3.706880f, -1.933369f,
 -0.066552f, 3.494059f, 2.564426f,
 -5.346087f, 10.973744f, 2.536209f,
 -0.190238f, 13.106070f, 2.899603f,
 -1.690883f, 6.145602f, 1.386661f,
 0.006253f, 5.962164f, 1.518929f,
 -0.465869f, 7.356112f, -1.154770f,
 -1.980199f, 7.026678f, -0.432840f,
 -2.284242f, 6.679084f, 0.691534f,
 -2.933646f, 3.997338f, 0.073696f,
 -0.060679f, 2.618465f, 0.076284f,
 -5.170416f, 9.099289f, 2.041767f,
 -3.826755f, 7.433965f, 1.548788f,
 -5.167469f, 6.648443f, 0.567134f,
 -6.413694f, 7.840839f, 0.697290f,
 -4.809457f, 5.938927f, 3.884841f,
 -3.921835f, 5.086123f, 3.345972f,
 -4.796116f, 4.566489f, 2.706172f,
 -5.692153f, 5.414262f, 3.246357f,
 -3.363947f, 11.019734f, 0.850417f,
 -3.436792f, 10.935626f, 3.166481f,
 -3.159733f, 9.432298f, 0.697589f,
 -3.317568f, 8.836030f, 2.442798f,
 -1.114031f, 2.352897f, 0.590741f,
 -1.097916f, 2.647746f, 2.540500f,
 -2.224277f, 2.381481f, 0.958073f,
 -2.210955f, 2.621475f, 2.432765f,
 -1.030026f, -0.007001f, -0.452002f,
 -0.889386f, -0.006621f, 3.829964f,
 -2.384057f, -0.007885f, -0.289145f,
 -2.384393f, -0.006516f, 3.775177f,
 -0.651296f, 4.792293f, -0.650366f,
 -1.643475f, 4.869965f, -0.421664f,
 -1.638577f, 4.846876f, 0.623636f,
 -0.505504f, 4.574998f, 0.517133f,
 -2.163214f, 1.197514f, 1.419948f,
 -2.197290f, 0.822579f, 0.168856f,
 -1.104567f, 0.822652f, -0.070516f,
 -1.070377f, 1.226026f, 1.485793f,
 1.283409f, 11.148171f, 5.054302f,
 1.299267f, 9.887068f, 5.435395f,
 0.931234f, 7.824085f, 4.614251f,
 1.467728f, 9.845306f, 3.824700f,
 1.528240f, 11.226871f, 3.172474f,
 1.071535f, 7.513274f, 2.204236f,
 2.086594f, 4.654800f, 0.985303f,
 1.780519f, 5.364654f, -1.809641f,
 3.242793f, 8.692737f, 4.014040f,
 4.221354f, 10.012012f, -0.420494f,
 4.829115f, 10.813500f, 2.467087f,
 1.560099f, 6.372805f, 0.929398f,
 1.227287f, 7.255151f, -0.876719f,
 1.861177f, 6.968933f, 0.107962f,
 2.635127f, 4.331843f, -0.523472f,
 5.111110f, 9.336351f, 1.370648f,
 4.486210f, 7.495227f, 0.345827f,
 5.179135f, 8.135016f, -1.239388f,
 5.735518f, 9.701146f, -0.766474f,
 7.121551f, 6.280163f, 0.855596f,
 6.476051f, 5.307402f, 0.186041f,
 6.933433f, 5.721392f, -0.855188f,
 7.582223f, 6.691056f, -0.182566f,
 2.818405f, 10.611877f, 1.064741f,
 2.745070f, 10.505478f, 3.375521f,
 2.418865f, 9.064073f, 0.890931f,
 2.384635f, 8.455620f, 2.637305f,
 1.005804f, 2.616267f, -0.146448f,
 1.039620f, 2.080950f, 1.684214f,
 2.115857f, 2.643719f, 0.190371f,
 2.141551f, 2.277063f, 1.580734f,
 1.030630f, 1.096557f, -2.167370f,
 0.889387f, -0.330027f, 1.870595f,
 2.384676f, 1.043978f, -2.015560f,
 2.384437f, -0.311721f, 1.819116f,
 0.190359f, 4.862961f, -0.787909f,
 1.226987f, 5.079144f, -0.829738f,
 1.411644f, 4.996666f, 0.233090f,
 0.331786f, 4.612079f, 0.371693f,
 2.170117f, 1.560157f, 0.004935f,
 2.197245f, 1.671370f, -1.305719f,
 1.104339f, 1.750676f, -1.530139f,
 1.079863f, 1.490874f, 0.088037f,
 8.080813f, 9.616215f, -4.820828f,
 10.478495f, 6.001814f, -5.429945f,
 4.520046f, 6.103585f, 3.606928f,
 7.018748f, 2.455566f, 3.034087f,
 -3.001701f, 10.031650f, 3.840574f,
 -2.655083f, 5.085204f, 7.220297f,
 -7.342864f, 2.380949f, 3.648658f,
 -7.733251f, 7.326776f, 0.298304f,
 -5.346087f, 10.973744f, 2.536209f,
 -0.190238f, 13.106070f, 2.899603f,
 -0.190238f, 13.106070f, 2.899603f,
 -2.284242f, 6.679084f, 0.691534f,
 -2.284242f, 6.679084f, 0.691534f,
 -5.346087f, 10.973744f, 2.536209f,
 -2.933646f, 3.997338f, 0.073696f,
 -2.284242f, 6.679084f, 0.691534f,
 -2.284242f, 6.679084f, 0.691534f,
 -2.933646f, 3.997338f, 0.073696f,
 -0.060679f, 2.618465f, 0.076284f,
 -4.796116f, 4.566489f, 2.706172f,
 -5.692153f, 5.414262f, 3.246357f,
 -5.692153f, 5.414262f, 3.246357f,
 -4.796116f, 4.566489f, 2.706172f,
 -4.796116f, 4.566489f, 2.706172f,
 -5.167469f, 6.648443f, 0.567134f,
 -5.692153f, 5.414262f, 3.246357f,
 -5.692153f, 5.414262f, 3.246357f,
 -5.167469f, 6.648443f, 0.567134f,
 -3.159733f, 9.432298f, 0.697589f,
 -3.159733f, 9.432298f, 0.697589f,
 -1.114031f, 2.352897f, 0.590741f,
 -1.114031f, 2.352897f, 0.590741f,
 -1.104567f, 0.822652f, -0.070516f,
 -0.651296f, 4.792293f, -0.650366f,
 -1.114031f, 2.352897f, 0.590741f,
 -1.114031f, 2.352897f, 0.590741f,
 -2.197290f, 0.822579f, 0.168856f,
 -2.163214f, 1.197514f, 1.419948f,
 -2.163214f, 1.197514f, 1.419948f,
 -1.030026f, -0.007001f, -0.452002f,
 -1.104567f, 0.822652f, -0.070516f,
 -1.104567f, 0.822652f, -0.070516f,
 -2.197290f, 0.822579f, 0.168856f,
 -0.889386f, -0.006621f, 3.829964f,
 -1.030026f, -0.007001f, -0.452002f,
 -1.070377f, 1.226026f, 1.485793f,
 -1.070377f, 1.226026f, 1.485793f,
 -1.030026f, -0.007001f, -0.452002f,
 -1.104567f, 0.822652f, -0.070516f,
 -2.163214f, 1.197514f, 1.419948f,
 -1.070377f, 1.226026f, 1.485793f,
 -1.070377f, 1.226026f, 1.485793f,
 -0.889386f, -0.006621f, 3.829964f,
 0.010691f, 6.144594f, 4.041301f,
 -0.205254f, 9.654110f, 6.037275f,
 -0.205254f, 9.654110f, 6.037275f,
 -0.205254f, 9.654110f, 6.037275f,
 -0.205254f, 9.654110f, 6.037275f,
 -0.229487f, 11.955768f, 5.455507f,
 -0.253259f, 12.245929f, 3.118577f,
 -0.253259f, 12.245929f, 3.118577f,
 -0.229487f, 11.955768f, 5.455507f,
 0.010691f, 6.144594f, 4.041301f,
 0.010691f, 6.144594f, 4.041301f,
 -0.121382f, 6.002281f, 0.634779f,
 -0.190238f, 13.106070f, 2.899603f,
 -0.263472f, 11.322479f, -0.787735f,
 -0.263472f, 11.322479f, -0.787735f,
 4.829115f, 10.813500f, 2.467087f,
 -0.190238f, 13.106070f, 2.899603f,
 -0.190238f, 13.106070f, 2.899603f,
 -0.467909f, 9.986121f, 5.130252f,
 -0.465869f, 7.356112f, -1.154770f,
 -0.263472f, 11.322479f, -0.787735f,
 -0.263472f, 11.322479f, -0.787735f,
 0.006253f, 5.962164f, 1.518929f,
 0.006253f, 5.962164f, 1.518929f,
 -0.066552f, 3.494059f, 2.564426f,
 4.829115f, 10.813500f, 2.467087f,
 1.861177f, 6.968933f, 0.107962f,
 1.861177f, 6.968933f, 0.107962f,
 -0.465869f, 7.356112f, -1.154770f,
 -0.465869f, 7.356112f, -1.154770f,
 -0.225328f, 3.706880f, -1.933369f,
 -0.467909f, 9.986121f, 5.130252f,
 0.006253f, 5.962164f, 1.518929f,
 0.006253f, 5.962164f, 1.518929f,
 2.635127f, 4.331843f, -0.523472f,
 1.861177f, 6.968933f, 0.107962f,
 1.861177f, 6.968933f, 0.107962f,
 -0.066552f, 3.494059f, 2.564426f,
 -0.060679f, 2.618465f, 0.076284f,
 -0.060679f, 2.618465f, 0.076284f,
 2.635127f, 4.331843f, -0.523472f,
 -0.060679f, 2.618465f, 0.076284f,
 -0.225328f, 3.706880f, -1.933369f,
 -0.225328f, 3.706880f, -1.933369f,
 7.582223f, 6.691056f, -0.182566f,
 7.582223f, 6.691056f, -0.182566f,
 6.933433f, 5.721392f, -0.855188f,
 6.933433f, 5.721392f, -0.855188f,
 6.933433f, 5.721392f, -0.855188f,
 5.179135f, 8.135016f, -1.239388f,
 7.582223f, 6.691056f, -0.182566f,
 7.582223f, 6.691056f, -0.182566f,
 2.418865f, 9.064073f, 0.890931f,
 2.418865f, 9.064073f, 0.890931f,
 5.179135f, 8.135016f, -1.239388f,
 1.104339f, 1.750676f, -1.530139f,
 1.005804f, 2.616267f, -0.146448f,
 1.005804f, 2.616267f, -0.146448f,
 1.005804f, 2.616267f, -0.146448f,
 1.005804f, 2.616267f, -0.146448f,
 0.190359f, 4.862961f, -0.787909f,
 2.170117f, 1.560157f, 0.004935f,
 2.170117f, 1.560157f, 0.004935f,
 2.197245f, 1.671370f, -1.305719f,
 2.197245f, 1.671370f, -1.305719f,
 1.104339f, 1.750676f, -1.530139f,
 1.104339f, 1.750676f, -1.530139f,
 1.030630f, 1.096557f, -2.167370f,
 1.104339f, 1.750676f, -1.530139f,
 1.030630f, 1.096557f, -2.167370f,
 1.079863f, 1.490874f, 0.088037f,
 1.079863f, 1.490874f, 0.088037f,
 1.030630f, 1.096557f, -2.167370f,
 0.889387f, -0.330027f, 1.870595f,
 2.170117f, 1.560157f, 0.004935f,
 1.079863f, 1.490874f, 0.088037f,
 1.079863f, 1.490874f, 0.088037f,
 0.889387f, -0.330027f, 1.870595f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.484444f, -0.211589f, 0.848849f},
{ -0.527863f, -0.327690f, 0.783569f},
{ -0.536304f, -0.353232f, 0.766554f},
{ -0.545954f, -0.384200f, 0.744530f},
{ 0.545470f, -0.216265f, 0.809748f},
{ 0.588554f, -0.354208f, 0.726733f},
{ 0.581893f, -0.329700f, 0.743437f},
{ 0.596188f, -0.384690f, 0.704680f},
{ 0.017229f, -0.928938f, 0.369835f},
{ 0.031035f, -0.182649f, 0.982688f},
{ -0.669799f, -0.524543f, 0.525570f},
{ -0.713444f, -0.145102f, 0.685524f},
{ -0.629690f, 0.573526f, 0.523983f},
{ 0.019562f, 0.793047f, 0.608847f},
{ -0.972474f, -0.115583f, 0.202325f},
{ -0.615864f, 0.755932f, 0.221989f},
{ 0.005364f, 0.988363f, 0.152017f},
{ -0.782540f, -0.615203f, 0.095691f},
{ -0.042778f, -0.998143f, 0.043358f},
{ 0.049154f, 0.995774f, 0.077571f},
{ -0.007012f, 0.671714f, -0.740778f},
{ -0.843341f, 0.518077f, 0.142732f},
{ -0.729961f, 0.160064f, -0.664482f},
{ -0.501154f, -0.200924f, 0.841709f},
{ -0.005040f, -0.080598f, 0.996734f},
{ -0.157092f, 0.184955f, -0.970110f},
{ -0.414523f, -0.044297f, -0.908960f},
{ -0.871322f, -0.475907f, 0.119627f},
{ 0.053899f, -0.504095f, 0.861965f},
{ 0.038276f, -0.445997f, 0.894216f},
{ -0.622929f, -0.298354f, 0.723149f},
{ -0.377442f, -0.482071f, 0.790661f},
{ -0.595018f, 0.024992f, -0.803324f},
{ -0.829606f, -0.556637f, -0.043696f},
{ -0.058608f, -0.464042f, -0.883873f},
{ 0.047318f, -0.997261f, -0.056843f},
{ 0.119867f, 0.342808f, 0.931726f},
{ -0.923272f, -0.212904f, 0.319752f},
{ 0.936101f, -0.288243f, 0.201572f},
{ 0.074562f, -0.873749f, -0.480628f},
{ -0.013159f, -0.494121f, -0.869294f},
{ -0.923323f, 0.181157f, -0.338610f},
{ -0.649651f, 0.527247f, 0.547690f},
{ -0.637686f, 0.625924f, -0.448972f},
{ -0.777362f, 0.500446f, 0.381134f},
{ 0.976492f, -0.212312f, 0.037244f},
{ 0.223285f, -0.043494f, -0.973783f},
{ 0.146500f, -0.501091f, 0.852904f},
{ -0.901690f, 0.068966f, -0.426848f},
{ -0.643388f, -0.235090f, -0.728550f},
{ 0.754290f, -0.221947f, -0.617889f},
{ 0.334595f, -0.476972f, -0.812738f},
{ -0.651285f, 0.604315f, 0.458945f},
{ -0.692109f, 0.222794f, 0.686548f},
{ 0.642507f, 0.096653f, 0.760160f},
{ 0.949046f, 0.117683f, 0.292340f},
{ 0.938991f, 0.231299f, 0.254552f},
{ 0.588582f, 0.369506f, -0.719052f},
{ -0.653397f, 0.392893f, -0.647076f},
{ -0.922499f, 0.259365f, 0.285877f},
{ 0.000661f, -1.000000f, 0.000067f},
{ 0.000068f, -1.000000f, 0.000282f},
{ 0.000503f, -1.000000f, 0.000125f},
{ -0.000082f, -1.000000f, 0.000337f},
{ -0.875436f, 0.336418f, -0.347038f},
{ -0.382914f, 0.832425f, 0.400556f},
{ 0.861186f, 0.262211f, -0.435435f},
{ 0.381465f, 0.829973f, 0.406976f},
{ 0.760105f, -0.432782f, 0.484707f},
{ 0.752296f, -0.135797f, 0.644678f},
{ 0.690142f, 0.553870f, 0.465759f},
{ 0.735587f, 0.666067f, 0.123558f},
{ 0.984949f, -0.137716f, 0.104452f},
{ 0.863750f, -0.501940f, 0.044630f},
{ 0.833766f, 0.505735f, 0.221512f},
{ 0.693055f, 0.266224f, -0.669925f},
{ 0.509346f, -0.305988f, 0.804325f},
{ 0.285768f, 0.085643f, -0.954464f},
{ 0.900425f, -0.402069f, -0.166060f},
{ 0.676659f, -0.558295f, 0.480040f},
{ 0.751668f, -0.271034f, 0.601279f},
{ 0.867006f, -0.457205f, -0.198152f},
{ 0.408725f, 0.086426f, -0.908556f},
{ 0.335274f, -0.155328f, 0.929228f},
{ -0.452996f, -0.861486f, 0.229428f},
{ 0.932952f, 0.328078f, -0.148209f},
{ -0.012678f, -0.489010f, -0.872186f},
{ 0.460167f, 0.784997f, -0.414759f},
{ -0.289967f, -0.074014f, -0.954170f},
{ 0.691725f, 0.220794f, 0.687580f},
{ 0.634613f, 0.311710f, 0.707179f},
{ 0.146541f, 0.910018f, -0.387806f},
{ -0.499963f, -0.824982f, 0.263518f},
{ -0.661922f, -0.270459f, -0.699079f},
{ 0.271179f, -0.695964f, 0.664903f},
{ -0.538250f, -0.406194f, -0.738440f},
{ 0.543158f, -0.077273f, -0.836067f},
{ -0.790154f, -0.112517f, -0.602492f},
{ 0.901328f, 0.271220f, -0.337709f},
{ 0.710395f, 0.502348f, 0.492935f},
{ 0.587516f, 0.067731f, 0.806373f},
{ -0.805799f, 0.038760f, 0.590919f},
{ -0.556240f, -0.180259f, 0.811236f},
{ -0.549268f, 0.679627f, -0.486222f},
{ -0.941451f, 0.113052f, 0.317630f},
{ 0.590732f, 0.698033f, -0.404704f},
{ 0.930834f, 0.161223f, 0.327956f},
{ 0.000066f, -0.942814f, -0.333320f},
{ 0.000201f, -0.942830f, -0.333274f},
{ 0.000589f, -0.942877f, -0.333141f},
{ 0.000731f, -0.942894f, -0.333092f},
{ 0.368255f, 0.669629f, 0.644969f},
{ 0.866220f, 0.445689f, -0.225887f},
{ -0.833331f, 0.430374f, -0.346897f},
{ -0.345590f, 0.674652f, 0.652236f},
{ -0.762552f, -0.423426f, -0.489106f},
{ -0.753199f, -0.432221f, -0.495859f},
{ -0.759098f, -0.426702f, -0.491626f},
{ -0.749815f, -0.435345f, -0.498249f},
{ -0.683581f, 0.378499f, 0.624064f},
{ -0.686171f, 0.373378f, 0.624306f},
{ -0.685921f, 0.373874f, 0.624284f},
{ -0.688511f, 0.368703f, 0.624509f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagWalk2.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105