package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarattacke {

static String TextureName = "RagAttack5.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -2.174975f, 9.901061f, 4.098823f,
 -1.250325f, 10.254121f, 5.878635f,
 -3.294407f, 13.567356f, 7.571034f,
 -3.663597f, 12.447976f, 4.230080f,
 1.178545f, 9.884246f, 5.358339f,
 -0.664868f, 10.253090f, 6.094957f,
 -0.193254f, 13.561756f, 8.714685f,
 2.214402f, 12.394486f, 6.489203f,
 -2.349566f, 10.494568f, 5.350616f,
 -2.321635f, 9.162762f, 5.277789f,
 -1.486698f, 7.521416f, 3.980977f,
 0.138884f, 6.063386f, 4.308813f,
 -1.031563f, 8.749710f, 6.201462f,
 -1.123845f, 11.113155f, 6.448091f,
 -2.188647f, 10.526918f, 2.866605f,
 -1.470515f, 11.858612f, 2.650722f,
 -0.148562f, 12.389798f, 4.128153f,
 -0.157465f, 5.986909f, 1.983336f,
 -1.053427f, 7.826007f, 2.854147f,
 -2.565997f, 4.876844f, 2.889054f,
 -2.598214f, 5.259771f, 0.157971f,
 -3.538089f, 10.180079f, 2.006782f,
 -0.993506f, 10.858171f, -2.008149f,
 -1.953956f, 10.191164f, 5.185850f,
 2.297867f, 11.393428f, 1.266831f,
 -0.853988f, 3.811656f, -0.368392f,
 0.849100f, 2.984131f, 2.904874f,
 -3.134773f, 12.236094f, -0.171610f,
 0.138529f, 13.230946f, 4.092866f,
 -1.643492f, 6.441120f, 2.783185f,
 -0.007092f, 5.942039f, 2.863736f,
 -0.312098f, 7.341041f, 0.181804f,
 -1.837765f, 7.313239f, 0.961459f,
 -2.150642f, 7.063256f, 2.092781f,
 -3.232270f, 4.333991f, 1.591413f,
 -0.064082f, 2.632114f, 0.821521f,
 -2.837538f, 10.781972f, -0.979869f,
 -2.303285f, 8.660903f, -0.872454f,
 -2.434222f, 8.542248f, -2.700388f,
 -2.768126f, 10.189274f, -3.109184f,
 -5.157633f, 7.956711f, -0.730416f,
 -4.555571f, 6.753457f, -0.696525f,
 -4.646695f, 6.670525f, -1.894985f,
 -5.251753f, 7.872920f, -1.932115f,
 -0.756041f, 11.531159f, 0.226580f,
 -2.496844f, 11.486229f, 1.779804f,
 -0.662616f, 9.928344f, 0.139812f,
 -2.095815f, 9.382177f, 1.181925f,
 -1.209808f, 2.866280f, 2.147242f,
 -1.175380f, 2.993422f, 4.093049f,
 -2.318758f, 2.801162f, 2.537728f,
 -2.291143f, 2.909618f, 4.001202f,
 -1.029360f, 0.797246f, 0.733913f,
 -0.889358f, 0.140378f, 4.965924f,
 -2.383256f, 0.770693f, 0.895610f,
 -2.384266f, 0.148937f, 4.911823f,
 -0.946916f, 4.887365f, 0.767105f,
 -1.913283f, 5.148266f, 1.010329f,
 -1.947345f, 5.153383f, 2.054089f,
 -0.774447f, 4.653576f, 1.950267f,
 -2.157830f, 1.671574f, 2.783608f,
 -2.197237f, 1.521397f, 1.475621f,
 -1.104609f, 1.558480f, 1.238406f,
 -1.063556f, 1.735582f, 2.833066f,
 0.507069f, 10.486309f, 6.412392f,
 0.544689f, 9.160912f, 6.332675f,
 0.754193f, 7.520518f, 4.802182f,
 0.280548f, 9.802721f, 5.658592f,
 0.930677f, 11.155363f, 5.361809f,
 1.147125f, 7.393964f, 3.660587f,
 2.339232f, 4.023840f, 1.295733f,
 0.892469f, 5.450918f, -0.078290f,
 0.992093f, 9.204241f, 7.187531f,
 5.266862f, 9.170165f, 4.971283f,
 3.645760f, 10.821212f, 7.018407f,
 1.573532f, 6.035009f, 2.214283f,
 1.318649f, 6.929302f, 0.454744f,
 1.949645f, 6.547052f, 1.366619f,
 1.984693f, 4.443254f, -0.094499f,
 4.512363f, 9.667406f, 6.131609f,
 3.924484f, 7.608269f, 5.714198f,
 5.327141f, 7.041848f, 6.732073f,
 6.062008f, 8.562672f, 7.080162f,
 2.283392f, 7.636239f, 8.157464f,
 2.110342f, 6.384473f, 7.694067f,
 3.029559f, 6.008650f, 8.374782f,
 3.204242f, 7.261793f, 8.834846f,
 3.275307f, 10.348642f, 4.785180f,
 1.552573f, 10.329666f, 6.292479f,
 2.975108f, 8.861299f, 4.253460f,
 1.628122f, 8.292505f, 5.388146f,
 0.869307f, 2.514909f, -1.157288f,
 2.412859f, 1.888413f, -0.091290f,
 1.785726f, 3.052833f, -1.538051f,
 2.960493f, 2.613038f, -0.745243f,
 0.440949f, 0.798018f, -3.297005f,
 2.432458f, 0.140376f, 0.438687f,
 1.689070f, 0.783522f, -3.837526f,
 3.700238f, 0.148890f, -0.355891f,
 -0.101530f, 4.722131f, 0.645934f,
 0.890528f, 4.789099f, 0.613802f,
 1.455677f, 4.370987f, 1.420465f,
 0.280487f, 4.202726f, 1.727353f,
 2.405637f, 1.833219f, -2.159310f,
 1.818166f, 1.525161f, -3.237694f,
 0.755001f, 1.556416f, -2.892915f,
 1.679236f, 1.445827f, -1.536509f,
 8.336798f, 6.023793f, 10.361224f,
 5.828949f, 3.706004f, 12.626100f,
 0.739867f, 9.005139f, 4.984558f,
 -1.851728f, 6.501308f, 7.639176f,
 -2.894136f, 10.697666f, 1.989923f,
 -7.045555f, 6.363558f, 2.526051f,
 -7.402163f, 5.989166f, -3.968329f,
 -3.260946f, 10.340669f, -4.479255f,
 -3.134773f, 12.236094f, -0.171610f,
 0.138529f, 13.230946f, 4.092866f,
 0.138529f, 13.230946f, 4.092866f,
 -2.150642f, 7.063256f, 2.092781f,
 -2.150642f, 7.063256f, 2.092781f,
 -3.134773f, 12.236094f, -0.171610f,
 -3.232270f, 4.333991f, 1.591413f,
 -2.150642f, 7.063256f, 2.092781f,
 -2.150642f, 7.063256f, 2.092781f,
 -3.232270f, 4.333991f, 1.591413f,
 -0.064082f, 2.632114f, 0.821521f,
 -4.646695f, 6.670525f, -1.894985f,
 -5.251753f, 7.872920f, -1.932115f,
 -5.251753f, 7.872920f, -1.932115f,
 -4.646695f, 6.670525f, -1.894985f,
 -4.646695f, 6.670525f, -1.894985f,
 -2.434222f, 8.542248f, -2.700388f,
 -5.251753f, 7.872920f, -1.932115f,
 -5.251753f, 7.872920f, -1.932115f,
 -2.434222f, 8.542248f, -2.700388f,
 -0.662616f, 9.928344f, 0.139812f,
 -0.662616f, 9.928344f, 0.139812f,
 -1.209808f, 2.866280f, 2.147242f,
 -1.209808f, 2.866280f, 2.147242f,
 -1.104609f, 1.558480f, 1.238406f,
 -0.946916f, 4.887365f, 0.767105f,
 -1.209808f, 2.866280f, 2.147242f,
 -1.209808f, 2.866280f, 2.147242f,
 -2.197237f, 1.521397f, 1.475621f,
 -2.157830f, 1.671574f, 2.783608f,
 -2.157830f, 1.671574f, 2.783608f,
 -1.029360f, 0.797246f, 0.733913f,
 -1.104609f, 1.558480f, 1.238406f,
 -1.104609f, 1.558480f, 1.238406f,
 -2.197237f, 1.521397f, 1.475621f,
 -0.889358f, 0.140378f, 4.965924f,
 -1.029360f, 0.797246f, 0.733913f,
 -1.063556f, 1.735582f, 2.833066f,
 -1.063556f, 1.735582f, 2.833066f,
 -1.029360f, 0.797246f, 0.733913f,
 -1.104609f, 1.558480f, 1.238406f,
 -2.157830f, 1.671574f, 2.783608f,
 -1.063556f, 1.735582f, 2.833066f,
 -1.063556f, 1.735582f, 2.833066f,
 -0.889358f, 0.140378f, 4.965924f,
 0.138884f, 6.063386f, 4.308813f,
 -1.031563f, 8.749710f, 6.201462f,
 -1.031563f, 8.749710f, 6.201462f,
 -1.031563f, 8.749710f, 6.201462f,
 -1.031563f, 8.749710f, 6.201462f,
 -1.123845f, 11.113155f, 6.448091f,
 -0.148562f, 12.389798f, 4.128153f,
 -0.148562f, 12.389798f, 4.128153f,
 -1.123845f, 11.113155f, 6.448091f,
 0.138884f, 6.063386f, 4.308813f,
 0.138884f, 6.063386f, 4.308813f,
 -0.157465f, 5.986909f, 1.983336f,
 0.138529f, 13.230946f, 4.092866f,
 2.297867f, 11.393428f, 1.266831f,
 2.297867f, 11.393428f, 1.266831f,
 3.645760f, 10.821212f, 7.018407f,
 0.138529f, 13.230946f, 4.092866f,
 0.138529f, 13.230946f, 4.092866f,
 -1.953956f, 10.191164f, 5.185850f,
 -0.312098f, 7.341041f, 0.181804f,
 2.297867f, 11.393428f, 1.266831f,
 2.297867f, 11.393428f, 1.266831f,
 -0.007092f, 5.942039f, 2.863736f,
 -0.007092f, 5.942039f, 2.863736f,
 0.849100f, 2.984131f, 2.904874f,
 3.645760f, 10.821212f, 7.018407f,
 1.949645f, 6.547052f, 1.366619f,
 1.949645f, 6.547052f, 1.366619f,
 -0.312098f, 7.341041f, 0.181804f,
 -0.312098f, 7.341041f, 0.181804f,
 -0.853988f, 3.811656f, -0.368392f,
 -1.953956f, 10.191164f, 5.185850f,
 -0.007092f, 5.942039f, 2.863736f,
 -0.007092f, 5.942039f, 2.863736f,
 1.984693f, 4.443254f, -0.094499f,
 1.949645f, 6.547052f, 1.366619f,
 1.949645f, 6.547052f, 1.366619f,
 0.849100f, 2.984131f, 2.904874f,
 -0.064082f, 2.632114f, 0.821521f,
 -0.064082f, 2.632114f, 0.821521f,
 1.984693f, 4.443254f, -0.094499f,
 -0.064082f, 2.632114f, 0.821521f,
 -0.853988f, 3.811656f, -0.368392f,
 -0.853988f, 3.811656f, -0.368392f,
 3.204242f, 7.261793f, 8.834846f,
 3.204242f, 7.261793f, 8.834846f,
 3.029559f, 6.008650f, 8.374782f,
 3.029559f, 6.008650f, 8.374782f,
 3.029559f, 6.008650f, 8.374782f,
 5.327141f, 7.041848f, 6.732073f,
 3.204242f, 7.261793f, 8.834846f,
 3.204242f, 7.261793f, 8.834846f,
 2.975108f, 8.861299f, 4.253460f,
 2.975108f, 8.861299f, 4.253460f,
 5.327141f, 7.041848f, 6.732073f,
 0.755001f, 1.556416f, -2.892915f,
 0.869307f, 2.514909f, -1.157288f,
 0.869307f, 2.514909f, -1.157288f,
 0.869307f, 2.514909f, -1.157288f,
 0.869307f, 2.514909f, -1.157288f,
 -0.101530f, 4.722131f, 0.645934f,
 2.405637f, 1.833219f, -2.159310f,
 2.405637f, 1.833219f, -2.159310f,
 1.818166f, 1.525161f, -3.237694f,
 1.818166f, 1.525161f, -3.237694f,
 0.755001f, 1.556416f, -2.892915f,
 0.755001f, 1.556416f, -2.892915f,
 0.440949f, 0.798018f, -3.297005f,
 0.755001f, 1.556416f, -2.892915f,
 0.440949f, 0.798018f, -3.297005f,
 1.679236f, 1.445827f, -1.536509f,
 1.679236f, 1.445827f, -1.536509f,
 0.440949f, 0.798018f, -3.297005f,
 2.432458f, 0.140376f, 0.438687f,
 2.405637f, 1.833219f, -2.159310f,
 1.679236f, 1.445827f, -1.536509f,
 1.679236f, 1.445827f, -1.536509f,
 2.432458f, 0.140376f, 0.438687f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.746687f, -0.461130f, 0.479394f},
{ -0.749781f, -0.560437f, 0.351766f},
{ -0.747821f, -0.580405f, 0.322325f},
{ -0.744012f, -0.604459f, 0.284739f},
{ 0.241172f, -0.479604f, 0.843692f},
{ 0.337025f, -0.588462f, 0.734933f},
{ 0.319419f, -0.568995f, 0.757770f},
{ 0.357308f, -0.610553f, 0.706793f},
{ -0.110167f, -0.913444f, 0.391770f},
{ -0.331207f, -0.477348f, 0.813905f},
{ -0.808044f, -0.588312f, 0.030894f},
{ -0.919952f, -0.344379f, 0.187328f},
{ -0.847648f, 0.409813f, 0.336966f},
{ -0.290666f, 0.581793f, 0.759625f},
{ -0.983722f, 0.089695f, -0.155710f},
{ -0.682021f, 0.717702f, 0.140541f},
{ -0.377874f, 0.864687f, 0.330949f},
{ -0.834723f, -0.498596f, -0.233752f},
{ -0.496668f, -0.863085f, 0.091677f},
{ 0.044562f, 0.985194f, 0.165550f},
{ 0.698739f, 0.445428f, -0.559784f},
{ -0.619775f, 0.646148f, -0.445389f},
{ 0.171479f, -0.123970f, -0.977357f},
{ -0.972936f, 0.021587f, 0.230063f},
{ -0.758888f, -0.039420f, 0.650027f},
{ -0.158287f, 0.325788f, -0.932098f},
{ -0.244968f, -0.117909f, -0.962335f},
{ -0.969116f, -0.145232f, -0.199304f},
{ 0.212575f, -0.596564f, 0.773901f},
{ -0.151582f, -0.489534f, 0.858708f},
{ -0.484379f, -0.341173f, 0.805591f},
{ -0.142987f, 0.182243f, 0.972801f},
{ -0.628749f, 0.102853f, -0.770776f},
{ -0.862573f, -0.499313f, 0.081579f},
{ -0.228524f, -0.403288f, -0.886079f},
{ -0.136339f, -0.980460f, -0.141812f},
{ -0.578831f, 0.302568f, 0.757237f},
{ -0.784788f, 0.267429f, -0.559097f},
{ 0.211176f, -0.682222f, 0.699985f},
{ 0.139810f, -0.833367f, -0.534746f},
{ 0.558501f, -0.455125f, -0.693496f},
{ -0.063402f, 0.559170f, -0.826625f},
{ -0.692278f, 0.718047f, 0.071832f},
{ 0.364260f, 0.777962f, -0.511948f},
{ -0.875962f, 0.482150f, -0.014901f},
{ 0.268902f, -0.715191f, 0.645131f},
{ 0.890454f, -0.258190f, -0.374739f},
{ -0.764766f, -0.580103f, 0.280379f},
{ -0.930456f, 0.017410f, -0.365991f},
{ -0.688608f, -0.324747f, -0.648351f},
{ 0.750159f, -0.171864f, -0.638533f},
{ 0.086476f, -0.569464f, -0.817455f},
{ -0.666221f, 0.609970f, 0.429053f},
{ -0.639994f, 0.169148f, 0.749531f},
{ 0.554163f, 0.176434f, 0.813495f},
{ 0.923733f, 0.248202f, 0.291743f},
{ 0.937490f, 0.208498f, 0.278641f},
{ 0.573194f, 0.508219f, -0.642777f},
{ -0.653256f, 0.495715f, -0.572297f},
{ -0.918344f, 0.203506f, 0.339454f},
{ 0.001058f, -0.988162f, -0.153412f},
{ 0.000119f, -0.988215f, -0.153075f},
{ 0.000807f, -0.988176f, -0.153322f},
{ -0.000121f, -0.988228f, -0.152989f},
{ -0.869240f, 0.395005f, -0.297310f},
{ -0.376033f, 0.762782f, 0.526083f},
{ 0.865408f, 0.318776f, -0.386588f},
{ 0.386735f, 0.753362f, 0.531867f},
{ 0.679885f, -0.336194f, 0.651713f},
{ 0.523773f, -0.322318f, 0.788525f},
{ 0.371328f, 0.340339f, 0.863878f},
{ 0.407485f, 0.686910f, 0.601756f},
{ 0.997197f, 0.032956f, -0.067178f},
{ 0.882775f, -0.453139f, 0.123993f},
{ 0.628689f, 0.217154f, 0.746722f},
{ 0.962123f, -0.235534f, 0.137273f},
{ -0.082420f, -0.393424f, 0.915655f},
{ 0.601654f, 0.023836f, -0.798401f},
{ 0.880283f, -0.473244f, 0.033796f},
{ 0.674519f, -0.445629f, 0.588591f},
{ 0.904289f, -0.354484f, 0.237915f},
{ 0.638653f, -0.233020f, -0.733365f},
{ 0.192598f, 0.225691f, -0.954971f},
{ -0.780874f, 0.616815f, 0.098873f},
{ -0.718427f, -0.496504f, -0.487182f},
{ 0.209322f, 0.267363f, 0.940586f},
{ 0.218022f, -0.954331f, 0.204251f},
{ 0.896656f, 0.375300f, 0.234859f},
{ 0.702767f, -0.664613f, -0.253789f},
{ 0.039215f, -0.066918f, 0.996988f},
{ -0.103212f, 0.720908f, 0.685302f},
{ 0.654471f, 0.638264f, -0.405324f},
{ -0.641676f, -0.611144f, -0.463416f},
{ 0.498584f, -0.264234f, -0.825588f},
{ -0.151337f, -0.626366f, 0.764698f},
{ -0.924815f, -0.109027f, -0.364458f},
{ 0.329381f, 0.739238f, -0.587397f},
{ -0.935392f, -0.351977f, -0.033961f},
{ 0.077340f, 0.802783f, -0.591235f},
{ 0.771688f, 0.114017f, 0.625697f},
{ 0.927509f, 0.370515f, -0.049456f},
{ -0.525111f, -0.686682f, 0.502718f},
{ 0.086256f, -0.802299f, 0.590658f},
{ -0.766179f, 0.611082f, -0.198868f},
{ -0.627634f, 0.076352f, 0.774756f},
{ 0.139822f, 0.720808f, -0.678885f},
{ 0.885837f, 0.338693f, -0.317143f},
{ -0.077981f, -0.987772f, -0.135005f},
{ -0.076478f, -0.987852f, -0.135279f},
{ -0.072123f, -0.988071f, -0.136069f},
{ -0.070528f, -0.988146f, -0.136357f},
{ 0.592453f, 0.778353f, 0.207763f},
{ 0.647720f, 0.355296f, -0.673962f},
{ -0.889361f, 0.456041f, 0.032609f},
{ -0.009890f, 0.832476f, 0.553973f},
{ 0.133337f, -0.762691f, -0.632869f},
{ 0.128462f, -0.776387f, -0.617026f},
{ 0.131436f, -0.768095f, -0.626701f},
{ 0.126974f, -0.780463f, -0.612172f},
{ -0.721990f, 0.691898f, 0.002756f},
{ -0.723255f, 0.690580f, 0.001324f},
{ -0.723139f, 0.690701f, 0.001455f},
{ -0.724391f, 0.689389f, 0.000034f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagAttack5.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105