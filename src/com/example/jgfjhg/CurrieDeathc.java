package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeathc {

static String TextureName = "CurrieDeath3.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 3.849668f, 4.178105f, -4.287058f,
 2.281221f, 1.624917f, -3.962231f,
 2.841568f, 4.656342f, -5.220660f,
 1.272034f, 2.104453f, -4.897728f,
 1.414035f, 6.041648f, -5.520349f,
 1.042929f, 4.717139f, -6.799771f,
 -0.623346f, 6.401010f, -5.402818f,
 -0.868988f, 5.007854f, -6.817364f,
 0.315058f, 6.038062f, -5.529109f,
 0.861197f, 5.325006f, -5.935647f,
 0.139594f, 4.949220f, -6.223627f,
 0.287807f, 6.867243f, -6.058952f,
 1.382934f, 5.979955f, -6.508157f,
 0.450390f, 5.090051f, -7.399851f,
 0.405516f, 7.254227f, -7.094607f,
 1.315817f, 6.476978f, -7.301814f,
 0.540852f, 5.780086f, -8.084250f,
 0.471518f, 6.280106f, -7.541099f,
 0.904385f, 5.911010f, -7.446328f,
 0.448346f, 5.489709f, -7.384343f,
 0.577564f, 6.315792f, -8.258475f,
 1.165417f, 5.720829f, -7.988962f,
 0.496958f, 5.138235f, -7.899818f,
 0.629453f, 5.974500f, -8.670667f,
 1.039395f, 5.595475f, -8.432333f,
 0.567644f, 5.142834f, -8.417160f,
 0.353179f, 4.525136f, -3.455120f,
 -0.149524f, 3.295671f, -4.273839f,
 0.940160f, 3.067098f, 0.375539f,
 -0.647581f, 1.141809f, -1.688704f,
 0.518013f, 5.818229f, -4.745448f,
 -0.133492f, 4.610444f, -6.497659f,
 0.314433f, 6.048703f, -5.707841f,
 0.163085f, 5.100608f, -6.570476f,
 0.815902f, 5.523661f, -6.149492f,
 0.602898f, 5.768392f, -5.961175f,
 0.446595f, 5.215668f, -6.445500f,
 0.959442f, 4.129388f, -3.714734f,
 0.980857f, 3.505224f, -4.124711f,
 1.660318f, 1.449421f, -1.674950f,
 1.902502f, 2.410914f, -0.558815f,
 0.438238f, 3.243731f, -4.294243f,
 0.818640f, 1.096527f, -1.967949f,
 1.256703f, 5.440432f, -5.152043f,
 1.514887f, 4.867826f, -6.143171f,
 0.945620f, 4.515547f, -6.516929f,
 2.275163f, 3.162755f, -4.216785f,
 1.414480f, 3.551781f, -5.175993f,
 1.683389f, 3.887899f, -5.135371f,
 2.525077f, 3.500111f, -4.190279f,
 0.791442f, 4.467981f, -5.751843f,
 0.925756f, 4.779168f, -5.509535f,
 2.049511f, 3.856176f, -5.270371f,
 3.145303f, 3.371414f, -4.144469f,
 0.979689f, 5.284608f, -5.798208f,
 2.004416f, 3.657875f, -5.576005f,
 3.154035f, 3.066453f, -4.732389f,
 1.563047f, 4.673426f, -6.225490f,
 1.740500f, 3.320861f, -5.612710f,
 2.904059f, 2.729052f, -4.758951f,
 1.247867f, 4.440800f, -6.453970f,
 1.519234f, 3.187829f, -5.345905f,
 2.635088f, 2.682590f, -4.198530f,
 0.711398f, 4.744279f, -6.432092f,
 -0.405201f, 4.505054f, -3.490469f,
 -0.525979f, 3.111860f, 0.655289f,
 -1.658217f, 2.407313f, -0.015832f,
 -0.874068f, 3.993664f, -3.841020f,
 -1.609890f, 1.797542f, -0.753914f,
 -0.652906f, 3.545251f, -4.126777f,
 -1.195286f, 5.673145f, -5.689873f,
 -0.465608f, 5.952785f, -4.864914f,
 -1.056518f, 5.115591f, -6.190803f,
 -0.328533f, 5.690578f, -6.141325f,
 -0.038698f, 5.870867f, -5.946578f,
 -0.186438f, 5.354429f, -6.394471f,
 -1.954204f, 4.366938f, -3.382792f,
 -1.798519f, 4.713281f, -3.200998f,
 -1.467615f, 4.925260f, -4.484099f,
 -1.622336f, 4.578074f, -4.670184f,
 -0.583982f, 5.230707f, -5.257337f,
 -0.720567f, 4.914666f, -5.502455f,
 -2.176821f, 4.981183f, -2.766917f,
 -1.711658f, 5.204500f, -4.357305f,
 -0.445176f, 5.707225f, -5.560537f,
 -2.654590f, 5.093494f, -3.211642f,
 -1.979351f, 5.195732f, -4.611214f,
 -1.284676f, 5.764646f, -5.538906f,
 -2.810063f, 4.747356f, -3.393249f,
 -2.133413f, 4.849545f, -4.794665f,
 -1.443465f, 5.510237f, -5.878263f,
 -2.494287f, 4.274487f, -3.137717f,
 -2.025135f, 4.500004f, -4.733306f,
 -0.711630f, 5.167321f, -6.194436f,
 -0.430347f, 5.509928f, -5.925419f,
 -0.706216f, 5.994368f, -6.802359f,
 -0.406410f, 6.477880f, -7.555527f,
 0.027200f, 5.912720f, -7.574768f,
 -0.073909f, 5.726031f, -8.168483f,
 0.165844f, 5.598509f, -8.559187f,
 -0.658191f, 3.954775f, -1.787345f,
 0.467408f, 4.000981f, -1.777219f,
 1.342105f, 3.378475f, -2.118960f,
 1.347068f, 2.683489f, -2.622862f,
 0.626928f, 2.310847f, -2.841013f,
 -0.416088f, 2.335073f, -2.749899f,
 -1.189200f, 2.807705f, -2.334585f,
 -1.337907f, 3.369710f, -1.915031f,
 2.275163f, 3.162755f, -4.216785f,
 2.275163f, 3.162755f, -4.216785f,
 1.414480f, 3.551781f, -5.175993f,
 1.414480f, 3.551781f, -5.175993f,
 0.791442f, 4.467981f, -5.751843f,
 0.791442f, 4.467981f, -5.751843f,
 2.635088f, 2.682590f, -4.198530f,
 2.635088f, 2.682590f, -4.198530f,
 -0.416088f, 2.335073f, -2.749899f,
 -0.416088f, 2.335073f, -2.749899f,
 -0.149524f, 3.295671f, -4.273839f,
 0.467408f, 4.000981f, -1.777219f,
 0.467408f, 4.000981f, -1.777219f,
 0.353179f, 4.525136f, -3.455120f,
 0.353179f, 4.525136f, -3.455120f,
 0.518013f, 5.818229f, -4.745448f,
 0.518013f, 5.818229f, -4.745448f,
 -0.149524f, 3.295671f, -4.273839f,
 -0.133492f, 4.610444f, -6.497659f,
 -0.133492f, 4.610444f, -6.497659f,
 0.518013f, 5.818229f, -4.745448f,
 0.314433f, 6.048703f, -5.707841f,
 0.314433f, 6.048703f, -5.707841f,
 -0.133492f, 4.610444f, -6.497659f,
 -0.133492f, 4.610444f, -6.497659f,
 0.163085f, 5.100608f, -6.570476f,
 -1.954204f, 4.366938f, -3.382792f,
 -1.954204f, 4.366938f, -3.382792f,
 -1.622336f, 4.578074f, -4.670184f,
 -0.720567f, 4.914666f, -5.502455f,
 -0.720567f, 4.914666f, -5.502455f,
 -1.622336f, 4.578074f, -4.670184f,
 -2.494287f, 4.274487f, -3.137717f,
 -2.494287f, 4.274487f, -3.137717f,
 0.287807f, 6.867243f, -6.058952f,
 0.315058f, 6.038062f, -5.529109f,
 0.315058f, 6.038062f, -5.529109f,
 0.450390f, 5.090051f, -7.399851f,
 0.139594f, 4.949220f, -6.223627f,
 0.139594f, 4.949220f, -6.223627f,
 0.405516f, 7.254227f, -7.094607f,
 0.287807f, 6.867243f, -6.058952f,
 0.287807f, 6.867243f, -6.058952f,
 0.450390f, 5.090051f, -7.399851f,
 0.450390f, 5.090051f, -7.399851f,
 0.540852f, 5.780086f, -8.084250f,
 0.540852f, 5.780086f, -8.084250f,
 0.405516f, 7.254227f, -7.094607f,
 0.577564f, 6.315792f, -8.258475f,
 0.577564f, 6.315792f, -8.258475f,
 0.471518f, 6.280106f, -7.541099f,
 0.496958f, 5.138235f, -7.899818f,
 0.448346f, 5.489709f, -7.384343f,
 0.448346f, 5.489709f, -7.384343f,
 0.629453f, 5.974500f, -8.670667f,
 0.577564f, 6.315792f, -8.258475f,
 0.577564f, 6.315792f, -8.258475f,
 0.567644f, 5.142834f, -8.417160f,
 0.496958f, 5.138235f, -7.899818f,
 0.496958f, 5.138235f, -7.899818f,
 0.567644f, 5.142834f, -8.417160f,
 0.629453f, 5.974500f, -8.670667f,
 0.467408f, 4.000981f, -1.777219f,
 0.940160f, 3.067098f, 0.375539f,
 0.940160f, 3.067098f, 0.375539f,
 -0.647581f, 1.141809f, -1.688704f,
 -0.647581f, 1.141809f, -1.688704f,
 -0.416088f, 2.335073f, -2.749899f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.508217f, -0.408651f, -0.758103f},
{ 0.508379f, -0.408639f, -0.758001f},
{ 0.508282f, -0.408646f, -0.758062f},
{ 0.508444f, -0.408634f, -0.757960f},
{ 0.078165f, 0.681217f, -0.727897f},
{ 0.094985f, 0.689598f, -0.717937f},
{ 0.095700f, 0.689948f, -0.717505f},
{ 0.112653f, 0.698088f, -0.707095f},
{ 0.840678f, 0.540325f, 0.036191f},
{ 0.872381f, -0.220869f, -0.436083f},
{ 0.890489f, 0.394484f, 0.226742f},
{ 0.874026f, -0.432939f, -0.220551f},
{ 0.156839f, -0.708078f, -0.688497f},
{ 0.164667f, -0.850856f, -0.498928f},
{ -0.294240f, -0.807204f, -0.511708f},
{ -0.375162f, -0.679183f, -0.630844f},
{ 0.289389f, 0.906698f, 0.306842f},
{ 0.304937f, 0.811739f, 0.498090f},
{ 0.960610f, -0.174377f, -0.216383f},
{ 0.884152f, 0.356029f, 0.302519f},
{ 0.321972f, 0.763683f, 0.559573f},
{ -0.319295f, -0.721349f, -0.614578f},
{ 0.260161f, -0.725839f, -0.636768f},
{ 0.595304f, 0.633379f, -0.494414f},
{ 0.620059f, 0.760502f, -0.192779f},
{ 0.205806f, 0.978540f, 0.010189f},
{ -0.008339f, -0.142002f, -0.989831f},
{ 0.188668f, 0.198209f, -0.961830f},
{ -0.095719f, 0.720592f, 0.686721f},
{ -0.236323f, 0.559909f, 0.794137f},
{ -0.677791f, -0.177134f, 0.713598f},
{ -0.762012f, -0.087984f, 0.641558f},
{ -0.872871f, -0.455275f, 0.175562f},
{ -0.061723f, 0.297946f, 0.952585f},
{ 0.774410f, 0.540392f, 0.329040f},
{ 0.647887f, 0.761735f, 0.001574f},
{ 0.627932f, 0.763697f, 0.149891f},
{ 0.878438f, 0.169709f, -0.446705f},
{ 0.698562f, -0.040645f, -0.714395f},
{ 0.790515f, 0.536261f, -0.295822f},
{ 0.204390f, -0.862835f, -0.462320f},
{ 0.119201f, -0.618205f, -0.776925f},
{ -0.016859f, -0.327632f, -0.944655f},
{ -0.187501f, -0.906709f, 0.377786f},
{ -0.591130f, -0.797168f, -0.122835f},
{ -0.377398f, -0.165895f, -0.911071f},
{ -0.109672f, 0.776367f, 0.620666f},
{ -0.023922f, 0.508373f, 0.860804f},
{ 0.972076f, -0.088257f, 0.217439f},
{ 0.853233f, -0.451483f, 0.261069f},
{ 0.093290f, -0.908407f, -0.407546f},
{ -0.099458f, -0.981099f, -0.165992f},
{ 0.024838f, 0.973974f, -0.225294f},
{ 0.851704f, 0.350981f, -0.389119f},
{ 0.140377f, -0.156048f, -0.977724f},
{ -0.005671f, 0.998790f, 0.048847f},
{ 0.894116f, 0.248178f, 0.372779f},
{ 0.046521f, 0.960895f, -0.272979f},
{ 0.992635f, 0.017676f, 0.119847f},
{ -0.066067f, -0.825354f, 0.560737f},
{ -0.060644f, -0.941350f, 0.331938f},
{ 0.133498f, 0.370057f, -0.919367f},
{ 0.812919f, -0.217214f, -0.540352f},
{ 0.066614f, -0.859671f, -0.506487f},
{ -0.986129f, 0.157809f, 0.051440f},
{ -0.898693f, 0.438534f, 0.006326f},
{ -0.459227f, 0.778378f, 0.428063f},
{ -0.328393f, 0.895070f, 0.301676f},
{ -0.716091f, -0.582352f, -0.384811f},
{ -0.837929f, -0.334204f, -0.431490f},
{ -0.443116f, 0.727628f, 0.523647f},
{ -0.914912f, 0.393870f, 0.088333f},
{ -0.786766f, -0.421701f, -0.450742f},
{ -0.292338f, 0.828339f, -0.477904f},
{ -0.367826f, 0.905003f, -0.213712f},
{ -0.299829f, 0.228572f, -0.926206f},
{ 0.525353f, -0.846768f, 0.083592f},
{ 0.850300f, -0.174841f, 0.496408f},
{ 0.470878f, -0.875320f, 0.109950f},
{ 0.884322f, 0.045075f, 0.464696f},
{ 0.280307f, -0.952030f, -0.122748f},
{ 0.675510f, -0.004280f, 0.737339f},
{ 0.286058f, 0.885341f, 0.366527f},
{ 0.186338f, 0.638850f, 0.746424f},
{ 0.257700f, 0.953338f, 0.157282f},
{ -0.461203f, 0.858661f, 0.223593f},
{ -0.625476f, 0.773209f, -0.104536f},
{ -0.180941f, 0.975259f, 0.127009f},
{ -0.957935f, -0.180232f, -0.223333f},
{ -0.878300f, 0.082978f, -0.470854f},
{ -0.607145f, 0.002007f, -0.794589f},
{ -0.413531f, -0.792966f, -0.447434f},
{ -0.469737f, -0.866862f, 0.167026f},
{ -0.268867f, -0.246275f, -0.931160f},
{ -0.996961f, -0.031504f, -0.071245f},
{ -0.954618f, -0.004541f, 0.297798f},
{ -0.711325f, 0.357084f, -0.605399f},
{ -0.985812f, 0.054579f, -0.158731f},
{ -0.960897f, 0.255352f, 0.107111f},
{ -0.637189f, -0.177197f, -0.750061f},
{ -0.250471f, 0.910905f, 0.327897f},
{ 0.319056f, 0.900247f, 0.296242f},
{ 0.866593f, 0.499012f, -0.001802f},
{ 0.850674f, -0.134592f, -0.508172f},
{ 0.084718f, -0.571435f, -0.816263f},
{ -0.524691f, -0.538987f, -0.658933f},
{ -0.929876f, -0.179798f, -0.320942f},
{ -0.791833f, 0.584571f, 0.176851f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath3.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73