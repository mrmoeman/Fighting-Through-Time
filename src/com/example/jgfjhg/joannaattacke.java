package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaattacke {

static String TextureName = "joannaattack5.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.231351f, 0.643695f, -0.979223f,
 0.483647f, 0.844883f, -1.502561f,
 1.044350f, 0.720586f, -1.260875f,
 0.781785f, 0.530081f, -0.770080f,
 0.139152f, 0.064050f, -0.936641f,
 0.290928f, 0.061378f, -1.509805f,
 2.344385f, 0.061377f, -0.966229f,
 2.191690f, 0.061368f, -0.396704f,
 0.086433f, 3.084700f, 0.096241f,
 0.549423f, 3.370358f, -0.460325f,
 1.262578f, 3.571881f, 0.001250f,
 0.901645f, 3.316888f, 0.613028f,
 1.482970f, 2.088640f, 0.180812f,
 1.725185f, 2.252754f, -0.253309f,
 1.206124f, 2.327005f, -0.487504f,
 0.921436f, 2.177533f, -0.027506f,
 0.925409f, 7.874184f, 1.532628f,
 0.418652f, 6.046926f, 1.660285f,
 -0.182335f, 6.970730f, 1.063987f,
 0.274099f, 7.794294f, 1.149773f,
 0.285303f, 7.573472f, 2.609470f,
 0.764569f, 6.455752f, 0.795710f,
 0.474888f, 6.938890f, 0.217204f,
 -0.261766f, 5.217914f, 0.396725f,
 0.450819f, 5.179895f, 0.242001f,
 0.770388f, 4.842824f, 0.619189f,
 0.282064f, 4.487424f, 1.103766f,
 0.273460f, 8.876795f, 2.672730f,
 0.911431f, 8.627136f, 2.329624f,
 0.912005f, 7.769967f, 2.281430f,
 0.674840f, 7.305174f, 1.736816f,
 1.537589f, 6.822217f, 0.817137f,
 0.298952f, 8.927471f, 1.247244f,
 0.925013f, 8.653485f, 1.569858f,
 0.500225f, 7.469628f, 1.269104f,
 1.581689f, 7.006423f, 0.443803f,
 1.084670f, 7.356501f, 1.055612f,
 1.043352f, 7.541558f, 0.568805f,
 2.030514f, 6.180879f, 0.289265f,
 2.337184f, 6.395475f, 0.393818f,
 2.494664f, 6.327538f, 0.127679f,
 2.224097f, 6.112700f, -0.001540f,
 0.357294f, 7.106167f, 2.130181f,
 0.300550f, 7.420079f, 1.177708f,
 1.668694f, 5.897508f, 2.098590f,
 2.220845f, 6.309873f, 1.884025f,
 2.559590f, 5.948985f, 1.731056f,
 2.243219f, 5.414914f, 1.806196f,
 -0.465474f, 2.493326f, -0.638762f,
 1.653889f, 3.519801f, -0.233938f,
 0.832104f, 3.187666f, -1.025850f,
 0.530457f, 2.935446f, 1.107005f,
 -0.307571f, 7.494395f, 2.338340f,
 0.369746f, 7.274061f, 2.371959f,
 -0.321888f, 7.419103f, 2.791565f,
 0.401452f, 7.232735f, 2.792036f,
 -0.352101f, 8.626616f, 2.307575f,
 -0.338600f, 8.652724f, 1.548668f,
 -0.439570f, 4.625139f, 1.336184f,
 -0.706210f, 4.975659f, 0.921924f,
 -0.186125f, 6.461772f, 2.178957f,
 -0.546206f, 6.696085f, 2.423114f,
 -0.296172f, 7.361072f, 1.738128f,
 -0.102675f, 7.228833f, 2.118664f,
 -0.351598f, 7.769688f, 2.258946f,
 -0.338041f, 7.873586f, 1.511366f,
 2.268388f, 7.202904f, 0.910608f,
 2.799015f, 7.135532f, 1.534876f,
 2.132581f, 7.732206f, 1.380716f,
 2.502359f, 7.658347f, 1.737574f,
 1.343460f, 6.879673f, 2.506624f,
 1.518861f, 6.813361f, 2.918193f,
 1.569261f, 7.174922f, 2.970973f,
 1.418450f, 7.251003f, 2.607035f,
 -1.048352f, 3.590149f, 1.708929f,
 -1.445593f, 2.739542f, 0.679293f,
 -0.345259f, 0.644187f, 1.188699f,
 -0.936135f, 0.668732f, 1.190358f,
 -0.950399f, 0.704440f, 1.812331f,
 -0.361928f, 0.690321f, 1.818236f,
 -0.357444f, 0.062652f, 1.058200f,
 -0.946553f, 0.061390f, 1.067393f,
 -0.941862f, 0.061387f, 3.191572f,
 -0.352663f, 0.061383f, 3.187841f,
 -0.103416f, 2.889000f, 0.699544f,
 -0.858029f, 3.020885f, 0.803302f,
 -0.847757f, 3.647291f, 1.410311f,
 -0.094331f, 3.605113f, 1.398205f,
 -0.356265f, 2.564529f, 2.373458f,
 -0.875574f, 2.584984f, 2.384432f,
 -0.866518f, 2.433064f, 1.859722f,
 -0.330566f, 2.401259f, 1.784585f,
 3.126327f, 11.839989f, 0.422439f,
 2.932343f, 11.707799f, 1.678140f,
 1.855670f, 4.728573f, 1.130710f,
 1.872171f, 4.806169f, 2.222489f,
 0.921436f, 2.177533f, -0.027506f,
 0.921436f, 2.177533f, -0.027506f,
 0.086433f, 3.084700f, 0.096241f,
 0.231351f, 0.643695f, -0.979223f,
 0.139152f, 0.064050f, -0.936641f,
 0.139152f, 0.064050f, -0.936641f,
 0.231351f, 0.643695f, -0.979223f,
 0.139152f, 0.064050f, -0.936641f,
 0.781785f, 0.530081f, -0.770080f,
 0.781785f, 0.530081f, -0.770080f,
 0.139152f, 0.064050f, -0.936641f,
 2.191690f, 0.061368f, -0.396704f,
 0.781785f, 0.530081f, -0.770080f,
 2.191690f, 0.061368f, -0.396704f,
 2.191690f, 0.061368f, -0.396704f,
 1.044350f, 0.720586f, -1.260875f,
 1.044350f, 0.720586f, -1.260875f,
 1.044350f, 0.720586f, -1.260875f,
 1.044350f, 0.720586f, -1.260875f,
 0.483647f, 0.844883f, -1.502561f,
 0.483647f, 0.844883f, -1.502561f,
 0.921436f, 2.177533f, -0.027506f,
 0.921436f, 2.177533f, -0.027506f,
 0.483647f, 0.844883f, -1.502561f,
 0.231351f, 0.643695f, -0.979223f,
 0.674840f, 7.305174f, 1.736816f,
 0.674840f, 7.305174f, 1.736816f,
 0.764569f, 6.455752f, 0.795710f,
 0.764569f, 6.455752f, 0.795710f,
 0.674840f, 7.305174f, 1.736816f,
 0.674840f, 7.305174f, 1.736816f,
 0.500225f, 7.469628f, 1.269104f,
 0.500225f, 7.469628f, 1.269104f,
 0.500225f, 7.469628f, 1.269104f,
 0.674840f, 7.305174f, 1.736816f,
 0.674840f, 7.305174f, 1.736816f,
 0.764569f, 6.455752f, 0.795710f,
 0.474888f, 6.938890f, 0.217204f,
 2.030514f, 6.180879f, 0.289265f,
 2.030514f, 6.180879f, 0.289265f,
 0.474888f, 6.938890f, 0.217204f,
 0.474888f, 6.938890f, 0.217204f,
 0.764569f, 6.455752f, 0.795710f,
 1.668694f, 5.897508f, 2.098590f,
 1.668694f, 5.897508f, 2.098590f,
 2.030514f, 6.180879f, 0.289265f,
 2.243219f, 5.414914f, 1.806196f,
 2.243219f, 5.414914f, 1.806196f,
 2.030514f, 6.180879f, 0.289265f,
 0.474888f, 6.938890f, 0.217204f,
 0.474888f, 6.938890f, 0.217204f,
 0.500225f, 7.469628f, 1.269104f,
 0.500225f, 7.469628f, 1.269104f,
 2.243219f, 5.414914f, 1.806196f,
 -0.465474f, 2.493326f, -0.638762f,
 0.832104f, 3.187666f, -1.025850f,
 0.530457f, 2.935446f, 1.107005f,
 0.530457f, 2.935446f, 1.107005f,
 0.832104f, 3.187666f, -1.025850f,
 1.653889f, 3.519801f, -0.233938f,
 0.273460f, 8.876795f, 2.672730f,
 0.298952f, 8.927471f, 1.247244f,
 0.298952f, 8.927471f, 1.247244f,
 0.418652f, 6.046926f, 1.660285f,
 -0.102675f, 7.228833f, 2.118664f,
 0.418652f, 6.046926f, 1.660285f,
 0.357294f, 7.106167f, 2.130181f,
 -0.102675f, 7.228833f, 2.118664f,
 -0.186125f, 6.461772f, 2.178957f,
 -0.186125f, 6.461772f, 2.178957f,
 0.357294f, 7.106167f, 2.130181f,
 0.285303f, 7.573472f, 2.609470f,
 -0.102675f, 7.228833f, 2.118664f,
 0.285303f, 7.573472f, 2.609470f,
 -0.102675f, 7.228833f, 2.118664f,
 0.300550f, 7.420079f, 1.177708f,
 -0.296172f, 7.361072f, 1.738128f,
 0.274099f, 7.794294f, 1.149773f,
 -0.296172f, 7.361072f, 1.738128f,
 0.274099f, 7.794294f, 1.149773f,
 -0.296172f, 7.361072f, 1.738128f,
 -0.102675f, 7.228833f, 2.118664f,
 -0.102675f, 7.228833f, 2.118664f,
 0.282064f, 4.487424f, 1.103766f,
 0.418652f, 6.046926f, 1.660285f,
 0.418652f, 6.046926f, 1.660285f,
 -0.186125f, 6.461772f, 2.178957f,
 1.343460f, 6.879673f, 2.506624f,
 -0.546206f, 6.696085f, 2.423114f,
 1.343460f, 6.879673f, 2.506624f,
 -0.546206f, 6.696085f, 2.423114f,
 -0.546206f, 6.696085f, 2.423114f,
 -0.186125f, 6.461772f, 2.178957f,
 2.268388f, 7.202904f, 0.910608f,
 2.268388f, 7.202904f, 0.910608f,
 2.799015f, 7.135532f, 1.534876f,
 1.343460f, 6.879673f, 2.506624f,
 2.799015f, 7.135532f, 1.534876f,
 1.343460f, 6.879673f, 2.506624f,
 -0.546206f, 6.696085f, 2.423114f,
 -0.546206f, 6.696085f, 2.423114f,
 -0.296172f, 7.361072f, 1.738128f,
 -0.182335f, 6.970730f, 1.063987f,
 -0.296172f, 7.361072f, 1.738128f,
 0.300550f, 7.420079f, 1.177708f,
 -0.182335f, 6.970730f, 1.063987f,
 2.799015f, 7.135532f, 1.534876f,
 0.274099f, 7.794294f, 1.149773f,
 0.298952f, 8.927471f, 1.247244f,
 0.274099f, 7.794294f, 1.149773f,
 0.273460f, 8.876795f, 2.672730f,
 0.285303f, 7.573472f, 2.609470f,
 0.285303f, 7.573472f, 2.609470f,
 -0.261766f, 5.217914f, 0.396725f,
 -0.182335f, 6.970730f, 1.063987f,
 -0.261766f, 5.217914f, 0.396725f,
 -0.465474f, 2.493326f, -0.638762f,
 -0.261766f, 5.217914f, 0.396725f,
 -0.261766f, 5.217914f, 0.396725f,
 0.530457f, 2.935446f, 1.107005f,
 0.282064f, 4.487424f, 1.103766f,
 0.282064f, 4.487424f, 1.103766f,
 -0.465474f, 2.493326f, -0.638762f,
 0.530457f, 2.935446f, 1.107005f,
 -1.445593f, 2.739542f, 0.679293f,
 0.530457f, 2.935446f, 1.107005f,
 -1.048352f, 3.590149f, 1.708929f,
 -1.445593f, 2.739542f, 0.679293f,
 -0.330566f, 2.401259f, 1.784585f,
 -0.103416f, 2.889000f, 0.699544f,
 -0.330566f, 2.401259f, 1.784585f,
 -0.345259f, 0.644187f, 1.188699f,
 -0.357444f, 0.062652f, 1.058200f,
 -0.357444f, 0.062652f, 1.058200f,
 -0.345259f, 0.644187f, 1.188699f,
 -0.361928f, 0.690321f, 1.818236f,
 -0.357444f, 0.062652f, 1.058200f,
 -0.361928f, 0.690321f, 1.818236f,
 -0.352663f, 0.061383f, 3.187841f,
 -0.357444f, 0.062652f, 1.058200f,
 -0.361928f, 0.690321f, 1.818236f,
 -0.352663f, 0.061383f, 3.187841f,
 -0.352663f, 0.061383f, 3.187841f,
 -0.950399f, 0.704440f, 1.812331f,
 -0.950399f, 0.704440f, 1.812331f,
 -0.950399f, 0.704440f, 1.812331f,
 -0.936135f, 0.668732f, 1.190358f,
 -0.950399f, 0.704440f, 1.812331f,
 -0.330566f, 2.401259f, 1.784585f,
 -0.936135f, 0.668732f, 1.190358f,
 -0.330566f, 2.401259f, 1.784585f,
 -0.345259f, 0.644187f, 1.188699f,
 -0.936135f, 0.668732f, 1.190358f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.393220f, -0.859590f, 0.326317f},
{ -0.156582f, -0.765390f, -0.624228f},
{ 0.434961f, -0.703348f, 0.562237f},
{ 0.656904f, -0.629287f, -0.415302f},
{ 0.265693f, -0.203726f, 0.942286f},
{ 0.453508f, -0.388130f, 0.802300f},
{ 0.915314f, 0.356585f, -0.187209f},
{ 0.974814f, 0.019920f, -0.222126f},
{ -0.718622f, -0.680796f, 0.141774f},
{ -0.828852f, -0.295980f, 0.474764f},
{ -0.071986f, 0.391294f, -0.917446f},
{ -0.094390f, -0.079694f, -0.992341f},
{ -0.928101f, 0.204353f, 0.311235f},
{ -0.353790f, 0.479599f, -0.803005f},
{ 0.657367f, 0.245100f, -0.712597f},
{ 0.044856f, -0.088013f, 0.995109f},
{ 0.758991f, 0.170115f, 0.628484f},
{ 0.421906f, -0.135692f, 0.896428f},
{ -0.002929f, 0.839767f, -0.542939f},
{ 0.342301f, 0.669784f, -0.658953f},
{ -0.015481f, 0.674089f, 0.738488f},
{ 0.740608f, 0.478778f, 0.471457f},
{ 0.018206f, 0.705759f, -0.708218f},
{ 0.790458f, 0.408127f, -0.456736f},
{ 0.930943f, 0.115002f, 0.346584f},
{ 0.266500f, 0.383258f, -0.884359f},
{ 0.888376f, -0.456573f, 0.048272f},
{ -0.383852f, 0.268398f, -0.883527f},
{ -0.048848f, 0.849415f, -0.525460f},
{ 0.891142f, -0.318197f, 0.323445f},
{ 0.716530f, -0.270872f, 0.642817f},
{ 0.437928f, -0.437316f, 0.785477f},
{ 0.043767f, -0.316039f, 0.947736f},
{ 0.817681f, -0.304912f, 0.488289f},
{ -0.452599f, 0.243538f, -0.857813f},
{ -0.075785f, -0.003788f, -0.997117f},
{ 0.891080f, -0.113692f, -0.439375f},
{ 0.566529f, -0.039827f, 0.823079f},
{ -0.979703f, -0.122530f, 0.158644f},
{ -0.097060f, -0.991572f, -0.085815f},
{ -0.107150f, 0.932843f, 0.343982f},
{ 0.989788f, -0.111967f, 0.088219f},
{ -0.704576f, -0.708882f, 0.032536f},
{ 0.245463f, -0.424660f, -0.871442f},
{ 0.824217f, -0.112563f, -0.554974f},
{ 0.288581f, 0.895026f, 0.340074f},
{ -0.870984f, 0.300453f, -0.388735f},
{ 0.975285f, -0.102374f, -0.195805f},
{ 0.148561f, -0.175542f, -0.973198f},
{ -0.649232f, 0.319113f, -0.690409f},
{ -0.478266f, -0.426272f, -0.767824f},
{ 0.504584f, -0.602095f, 0.618770f},
{ 0.173645f, 0.743343f, -0.645979f},
{ -0.617612f, 0.251392f, 0.745223f},
{ 0.192117f, 0.463932f, -0.864788f},
{ -0.152899f, 0.105514f, 0.982593f},
{ -0.755994f, 0.475516f, 0.449841f},
{ -0.777530f, 0.416938f, -0.470755f},
{ -0.154072f, -0.007778f, 0.988029f},
{ 0.317276f, -0.572598f, 0.755955f},
{ -0.930273f, 0.324779f, -0.170619f},
{ -0.959564f, -0.136953f, 0.245930f},
{ -0.941156f, 0.228542f, -0.248985f},
{ 0.004747f, -0.352720f, 0.935717f},
{ -0.869700f, -0.189458f, 0.455772f},
{ -0.850474f, -0.128183f, -0.510160f},
{ -0.269777f, -0.658797f, -0.702287f},
{ -0.558256f, 0.711892f, -0.426100f},
{ 0.655026f, -0.751771f, 0.076032f},
{ 0.588971f, 0.629381f, 0.506945f},
{ -0.111133f, -0.812820f, -0.571816f},
{ 0.301501f, -0.782124f, 0.545325f},
{ 0.403122f, 0.384262f, 0.830563f},
{ -0.342560f, 0.927055f, -0.152386f},
{ -0.500127f, -0.163708f, 0.850337f},
{ -0.884609f, -0.433553f, -0.171752f},
{ 0.519203f, -0.817997f, -0.247605f},
{ 0.540434f, -0.640341f, 0.545797f},
{ -0.529987f, -0.812470f, -0.242911f},
{ -0.544743f, -0.634229f, 0.548643f},
{ 0.724450f, 0.354513f, 0.591179f},
{ -0.647270f, 0.522267f, 0.555229f},
{ 0.563447f, 0.100737f, 0.819987f},
{ -0.561188f, 0.130726f, 0.817299f},
{ 0.647572f, -0.736499f, -0.195500f},
{ 0.882507f, -0.215667f, -0.417934f},
{ -0.905017f, -0.034972f, -0.423935f},
{ -0.772712f, -0.562973f, -0.293220f},
{ 0.667480f, 0.212833f, -0.713564f},
{ -0.640172f, 0.247698f, -0.727204f},
{ -0.904331f, 0.150523f, 0.399409f},
{ 0.894738f, 0.136916f, 0.425086f},
{ 0.977750f, -0.161351f, 0.134059f},
{ 0.979203f, -0.160767f, 0.123757f},
{ 0.988057f, -0.153489f, 0.013556f},
{ 0.988349f, -0.152148f, -0.004124f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaattack5.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117