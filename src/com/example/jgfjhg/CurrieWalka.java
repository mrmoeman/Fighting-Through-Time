package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieWalka {

static String TextureName = "CurrieWalk1.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 2.970562f, 4.385847f, 3.114500f,
 3.152055f, 1.857301f, 1.484267f,
 2.191665f, 4.995937f, 2.048459f,
 2.373149f, 2.469715f, 0.415438f,
 0.874127f, 5.195313f, 1.453115f,
 0.899604f, 5.601540f, -0.392687f,
 -1.167896f, 4.876556f, 1.494821f,
 -1.086952f, 5.738995f, -0.269197f,
 -0.136417f, 5.022211f, 1.295667f,
 0.540284f, 5.143305f, 0.504597f,
 -0.090962f, 5.198716f, -0.011017f,
 -0.119624f, 5.817743f, 1.830924f,
 0.935189f, 6.033102f, 0.776659f,
 -0.134932f, 6.393795f, -0.317070f,
 -0.106884f, 6.921296f, 1.804367f,
 0.752139f, 6.942314f, 0.945515f,
 -0.130324f, 7.289693f, 0.052115f,
 -0.121080f, 6.973456f, 0.732126f,
 0.317246f, 6.806193f, 0.395295f,
 -0.129989f, 6.529564f, 0.059283f,
 -0.124251f, 7.658878f, 0.492681f,
 0.494322f, 7.265925f, -0.000907f,
 -0.133724f, 6.868453f, -0.479581f,
 -0.131029f, 7.912488f, 0.010355f,
 0.308612f, 7.605355f, -0.277475f,
 -0.136206f, 7.351150f, -0.677015f,
 -0.145689f, 2.736187f, 0.631936f,
 0.454303f, 2.251026f, -0.515663f,
 -1.222501f, 0.000166f, 1.332232f,
 1.067573f, 0.000182f, -0.957822f,
 -0.063991f, 4.269259f, 1.522457f,
 -0.109365f, 5.244646f, -0.476201f,
 -0.135816f, 5.191288f, 1.229957f,
 -0.095935f, 5.574511f, -0.022043f,
 0.457605f, 5.415017f, 0.615729f,
 0.197078f, 5.333144f, 0.917478f,
 0.234206f, 5.499248f, 0.221371f,
 0.552109f, 2.668885f, 0.871479f,
 1.054791f, 2.501081f, 0.542621f,
 1.486753f, 0.000165f, 1.332478f,
 0.132205f, -0.000155f, 1.960328f,
 0.872096f, 2.294626f, -0.079207f,
 1.695571f, -0.000162f, 0.396978f,
 0.797496f, 4.495776f, 1.269938f,
 1.327239f, 5.128606f, 0.435811f,
 0.954834f, 5.254271f, -0.210304f,
 2.333093f, 3.121615f, 1.886462f,
 1.725347f, 3.728973f, 0.850135f,
 1.714410f, 4.033125f, 1.140853f,
 2.321799f, 3.425824f, 2.176780f,
 0.728822f, 4.561997f, 0.043240f,
 0.730776f, 4.495819f, 0.451314f,
 2.041879f, 4.223876f, 1.235293f,
 2.857240f, 3.497679f, 2.510749f,
 0.653033f, 4.986573f, 0.759137f,
 2.222343f, 4.237957f, 0.912961f,
 3.208406f, 3.645635f, 1.968931f,
 1.458707f, 5.126191f, 0.371371f,
 2.233354f, 3.934639f, 0.626370f,
 3.219689f, 3.341420f, 1.678562f,
 1.461901f, 4.942705f, -0.041641f,
 2.064237f, 3.604916f, 0.645032f,
 2.880263f, 2.876530f, 1.917994f,
 0.639162f, 5.288877f, -0.059058f,
 -0.628547f, 2.700087f, 0.045493f,
 -1.850551f, -0.000161f, -0.022530f,
 -1.222759f, 0.000165f, -1.377033f,
 -0.623958f, 2.566462f, -0.643775f,
 -0.287188f, -0.000163f, -1.585893f,
 -0.082994f, 2.359338f, -0.750478f,
 -1.530508f, 4.959242f, 0.422296f,
 -1.020211f, 4.386423f, 1.258650f,
 -1.170188f, 5.158749f, -0.218887f,
 -0.707953f, 5.370601f, 0.634834f,
 -0.461063f, 5.309082f, 0.906208f,
 -0.411973f, 5.491707f, 0.185982f,
 -2.402661f, 3.210068f, -0.243803f,
 -2.300660f, 3.346517f, 0.141599f,
 -1.828476f, 4.216137f, -0.587011f,
 -1.887227f, 4.189539f, -1.009588f,
 -0.867223f, 4.400544f, 0.432862f,
 -0.865866f, 4.469599f, 0.028425f,
 -2.758610f, 3.288566f, 0.578203f,
 -2.147966f, 4.271423f, -0.394474f,
 -0.848566f, 4.891937f, 0.753663f,
 -3.166824f, 3.688645f, 0.243014f,
 -2.322846f, 4.527361f, -0.527127f,
 -1.652007f, 4.915487f, 0.527438f,
 -3.269509f, 3.552824f, -0.140812f,
 -2.387911f, 4.505139f, -1.006023f,
 -1.562481f, 5.301219f, 0.314656f,
 -2.968489f, 3.010961f, -0.207005f,
 -2.269762f, 4.192635f, -1.172376f,
 -0.861921f, 5.200184f, -0.066344f,
 -0.769717f, 5.071597f, 0.569619f,
 -1.177081f, 6.029002f, 0.813633f,
 -0.988605f, 6.941993f, 0.969255f,
 -0.568282f, 6.805946f, 0.408480f,
 -0.754772f, 7.266652f, 0.021497f,
 -0.575621f, 7.609203f, -0.256346f,
 -1.644465f, 1.576765f, 0.183223f,
 -1.313916f, 1.387886f, 1.242300f,
 -0.363890f, 1.411351f, 1.848492f,
 0.776592f, 1.362761f, 1.597217f,
 0.701757f, 1.058267f, 0.767255f,
 0.139476f, 0.963593f, -0.125688f,
 -0.728151f, 1.169324f, -0.666699f,
 -1.360653f, 1.480332f, -0.541534f,
 2.333093f, 3.121615f, 1.886462f,
 2.333093f, 3.121615f, 1.886462f,
 1.725347f, 3.728973f, 0.850135f,
 1.725347f, 3.728973f, 0.850135f,
 0.728822f, 4.561997f, 0.043240f,
 0.728822f, 4.561997f, 0.043240f,
 2.880263f, 2.876530f, 1.917994f,
 2.880263f, 2.876530f, 1.917994f,
 0.139476f, 0.963593f, -0.125688f,
 0.139476f, 0.963593f, -0.125688f,
 0.454303f, 2.251026f, -0.515663f,
 -1.313916f, 1.387886f, 1.242300f,
 -1.313916f, 1.387886f, 1.242300f,
 -0.145689f, 2.736187f, 0.631936f,
 -0.145689f, 2.736187f, 0.631936f,
 -0.063991f, 4.269259f, 1.522457f,
 -0.063991f, 4.269259f, 1.522457f,
 0.454303f, 2.251026f, -0.515663f,
 -0.109365f, 5.244646f, -0.476201f,
 -0.109365f, 5.244646f, -0.476201f,
 -0.063991f, 4.269259f, 1.522457f,
 -0.135816f, 5.191288f, 1.229957f,
 -0.135816f, 5.191288f, 1.229957f,
 -0.109365f, 5.244646f, -0.476201f,
 -0.109365f, 5.244646f, -0.476201f,
 -0.095935f, 5.574511f, -0.022043f,
 -2.402661f, 3.210068f, -0.243803f,
 -2.402661f, 3.210068f, -0.243803f,
 -1.887227f, 4.189539f, -1.009588f,
 -0.865866f, 4.469599f, 0.028425f,
 -0.865866f, 4.469599f, 0.028425f,
 -1.887227f, 4.189539f, -1.009588f,
 -2.968489f, 3.010961f, -0.207005f,
 -2.968489f, 3.010961f, -0.207005f,
 -0.119624f, 5.817743f, 1.830924f,
 -0.136417f, 5.022211f, 1.295667f,
 -0.136417f, 5.022211f, 1.295667f,
 -0.134932f, 6.393795f, -0.317070f,
 -0.090962f, 5.198716f, -0.011017f,
 -0.090962f, 5.198716f, -0.011017f,
 -0.106884f, 6.921296f, 1.804367f,
 -0.119624f, 5.817743f, 1.830924f,
 -0.119624f, 5.817743f, 1.830924f,
 -0.134932f, 6.393795f, -0.317070f,
 -0.134932f, 6.393795f, -0.317070f,
 -0.130324f, 7.289693f, 0.052115f,
 -0.130324f, 7.289693f, 0.052115f,
 -0.106884f, 6.921296f, 1.804367f,
 -0.124251f, 7.658878f, 0.492681f,
 -0.124251f, 7.658878f, 0.492681f,
 -0.121080f, 6.973456f, 0.732126f,
 -0.133724f, 6.868453f, -0.479581f,
 -0.129989f, 6.529564f, 0.059283f,
 -0.129989f, 6.529564f, 0.059283f,
 -0.131029f, 7.912488f, 0.010355f,
 -0.124251f, 7.658878f, 0.492681f,
 -0.124251f, 7.658878f, 0.492681f,
 -0.136206f, 7.351150f, -0.677015f,
 -0.133724f, 6.868453f, -0.479581f,
 -0.133724f, 6.868453f, -0.479581f,
 -0.136206f, 7.351150f, -0.677015f,
 -0.131029f, 7.912488f, 0.010355f,
 -1.313916f, 1.387886f, 1.242300f,
 -1.222501f, 0.000166f, 1.332232f,
 -1.222501f, 0.000166f, 1.332232f,
 1.067573f, 0.000182f, -0.957822f,
 1.067573f, 0.000182f, -0.957822f,
 0.139476f, 0.963593f, -0.125688f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.841864f, 0.333829f, -0.424055f},
{ 0.842347f, 0.333807f, -0.423114f},
{ 0.842058f, 0.333820f, -0.423678f},
{ 0.842539f, 0.333798f, -0.422738f},
{ -0.146567f, 0.966504f, 0.210687f},
{ -0.032700f, 0.944475f, 0.326951f},
{ -0.024920f, 0.942051f, 0.334542f},
{ 0.089200f, 0.893176f, 0.440772f},
{ -0.195936f, 0.368835f, 0.908609f},
{ 0.580966f, 0.249168f, 0.774851f},
{ 0.151996f, 0.148346f, 0.977185f},
{ 0.990422f, -0.066978f, 0.120744f},
{ 0.871472f, 0.348345f, -0.345244f},
{ 0.825330f, -0.108358f, -0.554157f},
{ 0.585178f, -0.044881f, -0.809662f},
{ 0.659818f, 0.412250f, -0.628245f},
{ -0.729763f, 0.348705f, 0.588091f},
{ -0.559566f, 0.153936f, 0.814365f},
{ 0.984069f, 0.174355f, 0.034769f},
{ 0.661200f, 0.012145f, 0.750111f},
{ -0.064462f, -0.249186f, 0.966308f},
{ 0.014186f, 0.167911f, -0.985700f},
{ 0.522354f, 0.120131f, -0.844225f},
{ 0.396705f, 0.796533f, 0.456245f},
{ 0.455027f, 0.602328f, 0.655859f},
{ -0.041838f, 0.448061f, 0.893023f},
{ 0.038910f, 0.807942f, -0.587976f},
{ 0.216712f, 0.941016f, -0.259854f},
{ -0.685996f, 0.064958f, 0.724700f},
{ -0.774844f, -0.062732f, 0.629032f},
{ -0.621359f, -0.780285f, 0.071194f},
{ -0.700877f, -0.711137f, 0.055279f},
{ 0.222368f, -0.301065f, -0.927315f},
{ -0.511776f, -0.746305f, 0.425576f},
{ 0.184166f, 0.434717f, 0.881535f},
{ 0.003893f, 0.776965f, 0.629532f},
{ -0.073132f, 0.526716f, 0.846889f},
{ 0.697570f, 0.676374f, 0.236461f},
{ 0.737133f, 0.662017f, -0.135529f},
{ 0.324135f, 0.906554f, 0.270364f},
{ 0.787459f, -0.269980f, -0.554093f},
{ 0.716163f, 0.056768f, -0.695621f},
{ 0.153705f, -0.008184f, -0.988083f},
{ 0.271884f, -0.945484f, -0.179273f},
{ 0.049719f, -0.711905f, -0.700514f},
{ 0.468779f, 0.587621f, -0.659506f},
{ 0.016122f, -0.273787f, 0.961655f},
{ 0.000501f, -0.583329f, 0.812236f},
{ 0.995940f, -0.084465f, -0.031128f},
{ 0.920157f, -0.381716f, -0.087207f},
{ -0.026626f, 0.052657f, -0.998258f},
{ -0.030180f, -0.211843f, -0.976838f},
{ 0.014640f, 0.578888f, 0.815275f},
{ 0.789217f, 0.599590f, 0.132774f},
{ -0.007303f, 0.854879f, -0.518776f},
{ 0.013627f, 0.329820f, 0.943946f},
{ 0.941487f, -0.128491f, 0.311596f},
{ 0.015418f, 0.621074f, 0.783601f},
{ 0.999478f, 0.028322f, 0.015571f},
{ -0.012194f, -0.843874f, -0.536403f},
{ -0.013063f, -0.679156f, -0.733878f},
{ 0.004469f, 0.999841f, -0.017269f},
{ 0.728218f, 0.529969f, -0.434548f},
{ -0.021853f, 0.143969f, -0.989341f},
{ -0.679355f, 0.082038f, -0.729210f},
{ -0.670650f, 0.364784f, -0.645881f},
{ -0.922610f, 0.202617f, 0.328235f},
{ -0.928085f, 0.367731f, 0.058589f},
{ 0.170601f, -0.009608f, -0.985293f},
{ 0.286344f, 0.394577f, -0.873107f},
{ -0.702423f, -0.360600f, 0.613653f},
{ -0.995988f, -0.069465f, 0.056409f},
{ -0.573905f, 0.201865f, -0.793652f},
{ -0.495249f, 0.761436f, 0.418264f},
{ -0.508718f, 0.558551f, 0.655154f},
{ -0.296487f, 0.914443f, -0.275479f},
{ 0.668806f, -0.335017f, -0.663673f},
{ 0.501215f, -0.849868f, 0.162811f},
{ 0.483094f, -0.768014f, -0.420446f},
{ 0.795796f, -0.304158f, 0.523638f},
{ 0.647189f, -0.392079f, -0.653775f},
{ -0.333054f, -0.669904f, 0.663554f},
{ -0.018766f, -0.032475f, 0.999296f},
{ 0.025682f, -0.021450f, 0.999440f},
{ -0.219361f, -0.062770f, 0.973623f},
{ -0.524776f, 0.553417f, 0.646792f},
{ -0.717952f, 0.625445f, 0.305555f},
{ -0.522646f, -0.289968f, 0.801723f},
{ -0.892855f, 0.055814f, -0.446872f},
{ -0.371058f, 0.690216f, -0.621223f},
{ -0.279480f, 0.951261f, -0.130364f},
{ -0.039824f, 0.023768f, -0.998924f},
{ -0.434645f, -0.739929f, -0.513410f},
{ 0.292299f, 0.708658f, -0.642157f},
{ -0.995691f, -0.086576f, -0.033224f},
{ -0.923818f, -0.359602f, -0.131326f},
{ -0.784586f, 0.602634f, 0.145798f},
{ -0.998955f, 0.026003f, 0.037575f},
{ -0.933243f, -0.129215f, 0.335202f},
{ -0.741099f, 0.527755f, -0.415028f},
{ -0.990349f, 0.134031f, -0.035285f},
{ -0.733566f, -0.005864f, 0.679593f},
{ 0.090868f, 0.110355f, 0.989730f},
{ 0.739948f, 0.330416f, 0.585920f},
{ 0.724115f, 0.663217f, -0.189211f},
{ 0.485663f, 0.733185f, -0.475995f},
{ 0.176242f, 0.625091f, -0.760394f},
{ -0.557857f, 0.374576f, -0.740600f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieWalk1.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73