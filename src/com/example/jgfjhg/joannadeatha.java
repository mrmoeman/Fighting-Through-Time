package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannadeatha {

static String TextureName = "joannadeath1.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.275439f, 0.731350f, -1.227761f,
 0.834977f, 0.811138f, -1.393182f,
 1.017326f, 0.622807f, -0.827826f,
 0.452016f, 0.566458f, -0.673481f,
 0.283685f, 0.065627f, -1.392265f,
 0.863753f, 0.061373f, -1.495291f,
 1.227995f, 0.061372f, 0.597433f,
 0.647718f, 0.061363f, 0.697094f,
 0.064727f, 3.453485f, -0.290968f,
 0.828953f, 3.528123f, -0.347102f,
 1.060513f, 3.520821f, 0.494844f,
 0.328331f, 3.445384f, 0.663841f,
 0.670880f, 2.072587f, 0.533539f,
 1.167207f, 2.119887f, 0.401524f,
 0.998490f, 2.300726f, -0.133767f,
 0.488553f, 2.270056f, -0.011808f,
 0.531568f, 8.347634f, 0.513023f,
 0.212659f, 6.619678f, 1.235794f,
 -0.331013f, 7.277709f, -0.233395f,
 -0.141005f, 8.363719f, 0.149768f,
 -0.028435f, 7.800061f, 1.543615f,
 0.765130f, 6.774390f, 0.424739f,
 0.530547f, 7.070171f, -0.403646f,
 -0.123633f, 5.453297f, -0.106138f,
 0.598084f, 5.359089f, -0.050686f,
 0.770905f, 5.117047f, 0.468728f,
 0.152740f, 4.903360f, 0.869305f,
 -0.019972f, 9.015996f, 1.920872f,
 0.587734f, 8.867297f, 1.477635f,
 0.571790f, 8.051987f, 1.208083f,
 0.440025f, 7.735467f, 0.807006f,
 1.189707f, 6.553133f, 0.019850f,
 -0.098714f, 9.437181f, 0.556525f,
 0.545608f, 9.090572f, 0.751449f,
 0.318781f, 7.901125f, 0.247863f,
 1.161371f, 6.707813f, -0.402223f,
 1.376977f, 7.236016f, 0.301902f,
 1.313859f, 7.457803f, -0.154639f,
 0.739294f, 5.709152f, -0.485722f,
 1.116861f, 5.659549f, -0.567061f,
 1.093964f, 5.727513f, -0.988271f,
 0.730390f, 5.781881f, -0.961080f,
 0.050339f, 7.575527f, 1.161556f,
 -0.125542f, 7.999203f, 0.100142f,
 0.765306f, 3.888437f, 0.077528f,
 1.366887f, 4.232261f, -0.114988f,
 1.340006f, 4.194142f, -0.629711f,
 0.787559f, 3.921652f, -0.742474f,
 -0.275096f, 2.591099f, -0.780190f,
 1.470181f, 3.325420f, 0.567780f,
 1.255294f, 3.184607f, -0.662018f,
 0.171498f, 3.204144f, 1.271351f,
 -0.528534f, 7.398185f, 1.451863f,
 -0.469143f, 6.627243f, 1.325394f,
 -0.901797f, 7.279009f, 1.695536f,
 -0.786819f, 6.526528f, 1.544904f,
 -0.674675f, 8.867455f, 1.550952f,
 -0.717211f, 9.090510f, 0.825352f,
 -0.588970f, 5.113561f, 0.860542f,
 -0.709373f, 5.359157f, 0.319832f,
 -0.765252f, 6.843319f, 1.000266f,
 -1.332454f, 6.864862f, 0.798244f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.505856f, 7.734176f, 1.014880f,
 -0.690449f, 8.052097f, 1.281142f,
 -0.731045f, 8.347555f, 0.586772f,
 0.070358f, 7.467023f, 1.410788f,
 0.447007f, 6.962123f, 0.882489f,
 0.337615f, 6.909151f, 1.780947f,
 0.579443f, 6.637929f, 1.410252f,
 -0.651451f, 5.653956f, 1.259321f,
 -0.719954f, 5.459398f, 1.213307f,
 -0.483445f, 5.421156f, 1.485753f,
 -0.407952f, 5.590685f, 1.535816f,
 -1.328024f, 3.502860f, 1.212829f,
 -1.463158f, 3.085210f, 0.077656f,
 -0.293673f, 0.715679f, -0.123744f,
 -0.868644f, 0.747782f, -0.233110f,
 -0.996210f, 0.633302f, 0.366007f,
 -0.418527f, 0.621950f, 0.478149f,
 -0.284114f, 0.064920f, -0.252267f,
 -0.863753f, 0.061377f, -0.345929f,
 -1.227995f, 0.061373f, 1.746794f,
 -0.647716f, 0.061366f, 1.845823f,
 -0.115800f, 3.348481f, 0.196392f,
 -0.882207f, 3.412026f, 0.204520f,
 -1.036195f, 3.674967f, 1.022114f,
 -0.290430f, 3.648309f, 1.138456f,
 -0.619626f, 2.285862f, 1.464509f,
 -1.126141f, 2.298773f, 1.379505f,
 -1.013524f, 2.349744f, 0.813974f,
 -0.496726f, 2.343487f, 0.846548f,
 2.581635f, 6.254909f, 5.183215f,
 1.954915f, 5.380767f, 5.499741f,
 1.012108f, 4.568687f, -1.801589f,
 0.396250f, 3.773386f, -1.467881f,
 0.488553f, 2.270056f, -0.011808f,
 0.488553f, 2.270056f, -0.011808f,
 0.064727f, 3.453485f, -0.290968f,
 0.275439f, 0.731350f, -1.227761f,
 0.283685f, 0.065627f, -1.392265f,
 0.283685f, 0.065627f, -1.392265f,
 0.275439f, 0.731350f, -1.227761f,
 0.283685f, 0.065627f, -1.392265f,
 0.452016f, 0.566458f, -0.673481f,
 0.452016f, 0.566458f, -0.673481f,
 0.283685f, 0.065627f, -1.392265f,
 0.647718f, 0.061363f, 0.697094f,
 0.452016f, 0.566458f, -0.673481f,
 0.647718f, 0.061363f, 0.697094f,
 0.647718f, 0.061363f, 0.697094f,
 1.017326f, 0.622807f, -0.827826f,
 1.017326f, 0.622807f, -0.827826f,
 1.017326f, 0.622807f, -0.827826f,
 1.017326f, 0.622807f, -0.827826f,
 0.834977f, 0.811138f, -1.393182f,
 0.834977f, 0.811138f, -1.393182f,
 0.488553f, 2.270056f, -0.011808f,
 0.488553f, 2.270056f, -0.011808f,
 0.834977f, 0.811138f, -1.393182f,
 0.275439f, 0.731350f, -1.227761f,
 0.440025f, 7.735467f, 0.807006f,
 0.440025f, 7.735467f, 0.807006f,
 0.765130f, 6.774390f, 0.424739f,
 0.765130f, 6.774390f, 0.424739f,
 0.440025f, 7.735467f, 0.807006f,
 0.440025f, 7.735467f, 0.807006f,
 0.318781f, 7.901125f, 0.247863f,
 0.318781f, 7.901125f, 0.247863f,
 0.318781f, 7.901125f, 0.247863f,
 0.440025f, 7.735467f, 0.807006f,
 0.440025f, 7.735467f, 0.807006f,
 0.765130f, 6.774390f, 0.424739f,
 0.530547f, 7.070171f, -0.403646f,
 0.739294f, 5.709152f, -0.485722f,
 0.739294f, 5.709152f, -0.485722f,
 0.530547f, 7.070171f, -0.403646f,
 0.530547f, 7.070171f, -0.403646f,
 0.765130f, 6.774390f, 0.424739f,
 0.765306f, 3.888437f, 0.077528f,
 0.765306f, 3.888437f, 0.077528f,
 0.739294f, 5.709152f, -0.485722f,
 0.787559f, 3.921652f, -0.742474f,
 0.787559f, 3.921652f, -0.742474f,
 0.739294f, 5.709152f, -0.485722f,
 0.530547f, 7.070171f, -0.403646f,
 0.530547f, 7.070171f, -0.403646f,
 0.318781f, 7.901125f, 0.247863f,
 0.318781f, 7.901125f, 0.247863f,
 0.787559f, 3.921652f, -0.742474f,
 -0.275096f, 2.591099f, -0.780190f,
 1.255294f, 3.184607f, -0.662018f,
 0.171498f, 3.204144f, 1.271351f,
 0.171498f, 3.204144f, 1.271351f,
 1.255294f, 3.184607f, -0.662018f,
 1.470181f, 3.325420f, 0.567780f,
 -0.019972f, 9.015996f, 1.920872f,
 -0.098714f, 9.437181f, 0.556525f,
 -0.098714f, 9.437181f, 0.556525f,
 0.212659f, 6.619678f, 1.235794f,
 -0.505856f, 7.734176f, 1.014880f,
 0.212659f, 6.619678f, 1.235794f,
 0.050339f, 7.575527f, 1.161556f,
 -0.505856f, 7.734176f, 1.014880f,
 -0.765252f, 6.843319f, 1.000266f,
 -0.765252f, 6.843319f, 1.000266f,
 0.050339f, 7.575527f, 1.161556f,
 -0.028435f, 7.800061f, 1.543615f,
 -0.505856f, 7.734176f, 1.014880f,
 -0.028435f, 7.800061f, 1.543615f,
 -0.505856f, 7.734176f, 1.014880f,
 -0.125542f, 7.999203f, 0.100142f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.141005f, 8.363719f, 0.149768f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.141005f, 8.363719f, 0.149768f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.505856f, 7.734176f, 1.014880f,
 -0.505856f, 7.734176f, 1.014880f,
 0.152740f, 4.903360f, 0.869305f,
 0.212659f, 6.619678f, 1.235794f,
 0.212659f, 6.619678f, 1.235794f,
 -0.765252f, 6.843319f, 1.000266f,
 -0.651451f, 5.653956f, 1.259321f,
 -1.332454f, 6.864862f, 0.798244f,
 -0.651451f, 5.653956f, 1.259321f,
 -1.332454f, 6.864862f, 0.798244f,
 -1.332454f, 6.864862f, 0.798244f,
 -0.765252f, 6.843319f, 1.000266f,
 0.070358f, 7.467023f, 1.410788f,
 0.070358f, 7.467023f, 1.410788f,
 0.447007f, 6.962123f, 0.882489f,
 -0.651451f, 5.653956f, 1.259321f,
 0.447007f, 6.962123f, 0.882489f,
 -0.651451f, 5.653956f, 1.259321f,
 -1.332454f, 6.864862f, 0.798244f,
 -1.332454f, 6.864862f, 0.798244f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.331013f, 7.277709f, -0.233395f,
 -0.677392f, 7.873096f, 0.514460f,
 -0.125542f, 7.999203f, 0.100142f,
 -0.331013f, 7.277709f, -0.233395f,
 0.447007f, 6.962123f, 0.882489f,
 -0.141005f, 8.363719f, 0.149768f,
 -0.098714f, 9.437181f, 0.556525f,
 -0.141005f, 8.363719f, 0.149768f,
 -0.019972f, 9.015996f, 1.920872f,
 -0.028435f, 7.800061f, 1.543615f,
 -0.028435f, 7.800061f, 1.543615f,
 -0.123633f, 5.453297f, -0.106138f,
 -0.331013f, 7.277709f, -0.233395f,
 -0.123633f, 5.453297f, -0.106138f,
 -0.275096f, 2.591099f, -0.780190f,
 -0.123633f, 5.453297f, -0.106138f,
 -0.123633f, 5.453297f, -0.106138f,
 0.171498f, 3.204144f, 1.271351f,
 0.152740f, 4.903360f, 0.869305f,
 0.152740f, 4.903360f, 0.869305f,
 -0.275096f, 2.591099f, -0.780190f,
 0.171498f, 3.204144f, 1.271351f,
 -1.463158f, 3.085210f, 0.077656f,
 0.171498f, 3.204144f, 1.271351f,
 -1.328024f, 3.502860f, 1.212829f,
 -1.463158f, 3.085210f, 0.077656f,
 -0.496726f, 2.343487f, 0.846548f,
 -0.115800f, 3.348481f, 0.196392f,
 -0.496726f, 2.343487f, 0.846548f,
 -0.293673f, 0.715679f, -0.123744f,
 -0.284114f, 0.064920f, -0.252267f,
 -0.284114f, 0.064920f, -0.252267f,
 -0.293673f, 0.715679f, -0.123744f,
 -0.418527f, 0.621950f, 0.478149f,
 -0.284114f, 0.064920f, -0.252267f,
 -0.418527f, 0.621950f, 0.478149f,
 -0.647716f, 0.061366f, 1.845823f,
 -0.284114f, 0.064920f, -0.252267f,
 -0.418527f, 0.621950f, 0.478149f,
 -0.647716f, 0.061366f, 1.845823f,
 -0.647716f, 0.061366f, 1.845823f,
 -0.996210f, 0.633302f, 0.366007f,
 -0.996210f, 0.633302f, 0.366007f,
 -0.996210f, 0.633302f, 0.366007f,
 -0.868644f, 0.747782f, -0.233110f,
 -0.996210f, 0.633302f, 0.366007f,
 -0.496726f, 2.343487f, 0.846548f,
 -0.868644f, 0.747782f, -0.233110f,
 -0.496726f, 2.343487f, 0.846548f,
 -0.293673f, 0.715679f, -0.123744f,
 -0.868644f, 0.747782f, -0.233110f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.503536f, -0.835959f, -0.218229f},
{ 0.436423f, -0.813986f, -0.383356f},
{ -0.335330f, -0.711417f, 0.617608f},
{ 0.560370f, -0.681293f, 0.470983f},
{ -0.541791f, -0.221962f, 0.810676f},
{ -0.390324f, -0.384474f, 0.836557f},
{ 0.859425f, 0.036588f, 0.509951f},
{ 0.847556f, -0.232176f, 0.477224f},
{ -0.792677f, -0.393687f, -0.465482f},
{ -0.954620f, 0.003735f, -0.297802f},
{ 0.681090f, 0.269208f, -0.680914f},
{ 0.588468f, -0.095560f, -0.802854f},
{ -0.829265f, 0.347199f, -0.437919f},
{ 0.393019f, 0.464779f, -0.793421f},
{ 0.993792f, 0.038101f, 0.104530f},
{ -0.823524f, 0.048365f, 0.565216f},
{ 0.783609f, 0.177783f, 0.595274f},
{ 0.748211f, -0.459041f, 0.479022f},
{ 0.505577f, 0.686026f, -0.523221f},
{ 0.631051f, 0.250697f, -0.734115f},
{ 0.048162f, 0.473218f, 0.879628f},
{ 0.781000f, 0.352089f, 0.515822f},
{ -0.024707f, 0.866167f, -0.499143f},
{ 0.762433f, 0.517940f, -0.387858f},
{ 0.860452f, 0.141958f, 0.489357f},
{ 0.621442f, 0.179222f, -0.762686f},
{ 0.802446f, -0.167312f, 0.572789f},
{ -0.094302f, 0.199588f, -0.975332f},
{ 0.416619f, 0.650966f, -0.634565f},
{ 0.863142f, 0.101058f, 0.494746f},
{ 0.332588f, -0.046040f, 0.941948f},
{ 0.220075f, -0.180958f, 0.958552f},
{ 0.054757f, -0.485647f, 0.872438f},
{ 0.869726f, -0.312898f, 0.381670f},
{ -0.211041f, 0.351166f, -0.912219f},
{ -0.087369f, 0.284727f, -0.954619f},
{ 0.850610f, 0.086912f, -0.518565f},
{ 0.266342f, 0.085813f, 0.960051f},
{ -0.764968f, -0.178686f, 0.618785f},
{ -0.760706f, -0.333483f, -0.556880f},
{ 0.649239f, 0.033915f, 0.759828f},
{ 0.708903f, -0.194528f, -0.677949f},
{ -0.871366f, -0.121438f, 0.475368f},
{ -0.712253f, 0.049448f, -0.700179f},
{ 0.589439f, 0.078669f, -0.803973f},
{ 0.884817f, 0.067208f, 0.461065f},
{ -0.522044f, 0.083236f, -0.848847f},
{ 0.910506f, -0.215102f, 0.353144f},
{ 0.582143f, -0.257728f, -0.771159f},
{ -0.328661f, 0.107228f, -0.938341f},
{ -0.196746f, -0.532479f, -0.823260f},
{ 0.206880f, -0.505714f, 0.837528f},
{ 0.775284f, 0.455371f, 0.437689f},
{ -0.704202f, 0.406057f, 0.582423f},
{ 0.998230f, 0.024073f, -0.054381f},
{ -0.598585f, -0.180214f, 0.780525f},
{ -0.714749f, 0.346764f, 0.607362f},
{ -0.803508f, 0.522031f, -0.286110f},
{ -0.450241f, 0.110446f, 0.886050f},
{ -0.115355f, -0.324228f, 0.938919f},
{ -0.884297f, 0.180857f, -0.430475f},
{ -0.962080f, -0.022038f, -0.271874f},
{ -0.839460f, 0.391526f, -0.376847f},
{ -0.514408f, -0.251027f, 0.819982f},
{ -0.827699f, -0.307725f, 0.469276f},
{ -0.903700f, 0.066416f, -0.422983f},
{ -0.723212f, 0.681373f, -0.112671f},
{ -0.084326f, 0.181282f, 0.979809f},
{ -0.030735f, 0.130714f, -0.990944f},
{ 0.862730f, -0.503503f, -0.046714f},
{ -0.298343f, 0.341858f, -0.891137f},
{ -0.460224f, -0.886065f, -0.055521f},
{ 0.271834f, -0.942595f, -0.193961f},
{ -0.048657f, -0.044612f, 0.997819f},
{ -0.728843f, -0.121424f, 0.673828f},
{ -0.842572f, -0.330308f, -0.425405f},
{ 0.528782f, -0.826655f, -0.192434f},
{ 0.376365f, -0.693132f, 0.614750f},
{ -0.440063f, -0.823017f, -0.359149f},
{ -0.567633f, -0.687604f, 0.452762f},
{ 0.608430f, 0.024523f, 0.793228f},
{ -0.795795f, 0.202229f, 0.570801f},
{ 0.469103f, -0.185005f, 0.863549f},
{ -0.763204f, -0.145734f, 0.629509f},
{ 0.758272f, -0.531576f, -0.377425f},
{ 0.935309f, -0.043436f, -0.351157f},
{ -0.795086f, 0.096419f, -0.598784f},
{ -0.664008f, -0.328683f, -0.671611f},
{ 0.779013f, 0.326368f, -0.535371f},
{ -0.494771f, 0.355903f, -0.792802f},
{ -0.978469f, 0.077212f, 0.191406f},
{ 0.836065f, 0.077334f, 0.543153f},
{ 0.805503f, -0.591356f, -0.038240f},
{ 0.803683f, -0.593861f, -0.037727f},
{ 0.785946f, -0.617424f, -0.032816f},
{ 0.783662f, -0.620353f, -0.032195f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannadeath1.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117