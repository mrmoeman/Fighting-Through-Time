package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class phaidlea {

static String TextureName = "Idle";

static int Vertices = 342;

static int VertTexts = 191;

static int Normals = 106;

static int Faces = 196;

static int FacesB = 30;

static int SmoothGroups = 2;

static float VertArray[] = new float[]{
 1.827151f, -0.075614f, 2.324373f,
 1.442453f, -0.073061f, 2.997937f,
 2.611569f, 10.112185f, 1.971877f,
 1.191868f, 10.100804f, 3.622345f,
 2.058322f, 8.188275f, 2.425086f,
 1.673624f, 8.190828f, 3.098650f,
 1.272911f, 7.955889f, 1.141122f,
 0.936363f, 9.637168f, 1.339881f,
 0.791186f, 9.211608f, -0.013407f,
 0.817567f, 8.291161f, -0.269820f,
 0.562201f, 9.717268f, 1.381939f,
 0.444292f, 9.620123f, -0.069985f,
 0.371258f, 8.134672f, -0.371188f,
 0.442211f, 7.955523f, 1.144212f,
 0.033961f, 7.922462f, 1.423868f,
 0.033961f, 9.879237f, 1.461500f,
 0.033961f, 9.784715f, -0.050527f,
 0.033961f, 8.144949f, -0.458112f,
 0.033961f, 10.073517f, 0.700086f,
 0.541219f, 9.972270f, 0.688117f,
 0.936363f, 9.661089f, 1.138519f,
 0.936363f, 7.986203f, 0.884699f,
 0.429582f, 7.993981f, 0.818900f,
 0.033961f, 7.993981f, 0.818900f,
 0.445001f, 7.693140f, 1.308935f,
 0.782250f, 7.689706f, 1.337982f,
 0.432372f, 7.355465f, 1.278751f,
 0.782250f, 7.347686f, 1.344552f,
 1.200907f, 7.749005f, -0.270188f,
 0.776421f, 7.695155f, 0.783573f,
 0.033961f, 7.729641f, 0.750321f,
 0.033961f, 7.761216f, -0.373395f,
 0.700363f, 4.777358f, -0.069943f,
 0.684600f, 4.777358f, 0.626761f,
 0.033961f, 4.777366f, 0.798922f,
 0.033961f, 4.777366f, -0.475135f,
 0.971581f, 6.804192f, 0.962299f,
 0.997360f, 6.804192f, -0.191005f,
 0.033961f, 6.973672f, -0.346137f,
 0.033961f, 6.899314f, 1.200014f,
 1.813221f, -0.185982f, -0.985739f,
 1.773378f, -0.185960f, 1.336819f,
 0.041510f, -0.186660f, 1.853170f,
 0.027903f, -0.186666f, -1.650015f,
 1.491392f, 7.236357f, 0.029884f,
 1.358139f, 7.556338f, 0.655131f,
 0.975757f, 7.161500f, 0.905013f,
 1.125488f, 6.793804f, 0.181002f,
 2.298225f, 5.820336f, 1.051700f,
 2.316329f, 6.175507f, 1.113332f,
 2.022530f, 6.252845f, 1.088342f,
 2.001599f, 5.843050f, 1.014700f,
 2.022666f, 5.226209f, 2.933528f,
 2.060281f, 5.962777f, 3.065791f,
 1.491509f, 6.109201f, 2.946810f,
 1.449404f, 5.283609f, 2.795079f,
 0.039987f, 2.343742f, 1.066036f,
 1.172495f, 2.344559f, 0.924968f,
 1.196197f, 2.344514f, -0.541172f,
 0.026139f, 2.343735f, -0.928108f,
 -0.868441f, 9.661089f, 1.138519f,
 -0.868441f, 7.986203f, 0.884699f,
 -0.749646f, 8.291161f, -0.269820f,
 -0.723264f, 9.211608f, -0.013407f,
 -0.376369f, 9.620123f, -0.069985f,
 -0.473295f, 9.972270f, 0.688117f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.361660f, 7.993981f, 0.818900f,
 -0.374288f, 7.955523f, 1.144212f,
 -1.204989f, 7.955889f, 1.141122f,
 -0.868441f, 9.637168f, 1.339881f,
 -0.494279f, 9.717268f, 1.381939f,
 -0.714328f, 7.689706f, 1.337982f,
 -0.377078f, 7.693140f, 1.308935f,
 -0.364450f, 7.355465f, 1.278751f,
 -0.714328f, 7.347686f, 1.344552f,
 -0.708500f, 7.695155f, 0.783573f,
 -1.132985f, 7.749005f, -0.270188f,
 -1.892593f, 3.488691f, 0.907025f,
 -2.421456f, 3.815163f, 1.325546f,
 -2.080262f, 3.998163f, 1.782924f,
 -1.485984f, 3.635048f, 1.312415f,
 -0.903658f, 6.804192f, 0.962299f,
 -0.929437f, 6.804192f, -0.191005f,
 -0.616678f, 4.777358f, 0.626761f,
 -0.632440f, 4.777358f, -0.069943f,
 -1.094515f, 2.342918f, 0.941306f,
 -1.138620f, 2.342937f, -0.525461f,
 -1.527775f, 7.326701f, 0.347988f,
 -1.004175f, 7.114974f, -0.090296f,
 -1.338928f, 7.092207f, 0.871346f,
 -0.731403f, 6.851484f, 0.366590f,
 -1.861918f, 5.518657f, 0.484160f,
 -1.607866f, 5.359499f, 0.283164f,
 -1.702734f, 5.584702f, 0.735601f,
 -1.408469f, 5.403113f, 0.502735f,
 -1.694518f, -0.187358f, 1.350739f,
 -1.752608f, -0.187345f, -0.972165f,
 1.684723f, 6.108200f, 2.334386f,
 2.101786f, 5.998415f, 2.369859f,
 2.076086f, 5.494232f, 2.282370f,
 1.655012f, 5.526476f, 2.229847f,
 -1.938699f, 4.492512f, 1.398250f,
 -1.520977f, 4.234738f, 1.067684f,
 -1.804029f, 4.172828f, 0.755994f,
 -2.164667f, 4.398760f, 1.041317f,
 2.058322f, 8.188275f, 2.425086f,
 2.058322f, 8.188275f, 2.425086f,
 1.673624f, 8.190828f, 3.098650f,
 0.791186f, 9.211608f, -0.013407f,
 0.791186f, 9.211608f, -0.013407f,
 0.936363f, 9.661089f, 1.138519f,
 0.817567f, 8.291161f, -0.269820f,
 0.371258f, 8.134672f, -0.371188f,
 0.791186f, 9.211608f, -0.013407f,
 0.791186f, 9.211608f, -0.013407f,
 0.371258f, 8.134672f, -0.371188f,
 0.371258f, 8.134672f, -0.371188f,
 0.033961f, 9.879237f, 1.461500f,
 0.033961f, 9.879237f, 1.461500f,
 0.562201f, 9.717268f, 1.381939f,
 0.562201f, 9.717268f, 1.381939f,
 0.936363f, 9.661089f, 1.138519f,
 0.936363f, 9.661089f, 1.138519f,
 0.562201f, 9.717268f, 1.381939f,
 0.936363f, 9.637168f, 1.339881f,
 1.272911f, 7.955889f, 1.141122f,
 0.936363f, 9.637168f, 1.339881f,
 0.936363f, 9.637168f, 1.339881f,
 0.429582f, 7.993981f, 0.818900f,
 0.442211f, 7.955523f, 1.144212f,
 0.442211f, 7.955523f, 1.144212f,
 0.033961f, 7.922462f, 1.423868f,
 0.442211f, 7.955523f, 1.144212f,
 0.445001f, 7.693140f, 1.308935f,
 0.445001f, 7.693140f, 1.308935f,
 0.432372f, 7.355465f, 1.278751f,
 0.432372f, 7.355465f, 1.278751f,
 0.432372f, 7.355465f, 1.278751f,
 0.782250f, 7.347686f, 1.344552f,
 1.272911f, 7.955889f, 1.141122f,
 0.782250f, 7.689706f, 1.337982f,
 0.782250f, 7.689706f, 1.337982f,
 0.782250f, 7.347686f, 1.344552f,
 0.429582f, 7.993981f, 0.818900f,
 0.776421f, 7.695155f, 0.783573f,
 0.371258f, 8.134672f, -0.371188f,
 0.371258f, 8.134672f, -0.371188f,
 0.776421f, 7.695155f, 0.783573f,
 1.200907f, 7.749005f, -0.270188f,
 0.033961f, 7.729641f, 0.750321f,
 0.429582f, 7.993981f, 0.818900f,
 0.429582f, 7.993981f, 0.818900f,
 0.033961f, 7.729641f, 0.750321f,
 0.776421f, 7.695155f, 0.783573f,
 0.033961f, 8.144949f, -0.458112f,
 0.371258f, 8.134672f, -0.371188f,
 0.033961f, 7.761216f, -0.373395f,
 0.033961f, 7.761216f, -0.373395f,
 0.371258f, 8.134672f, -0.371188f,
 1.200907f, 7.749005f, -0.270188f,
 0.971581f, 6.804192f, 0.962299f,
 0.684600f, 4.777358f, 0.626761f,
 0.684600f, 4.777358f, 0.626761f,
 1.172495f, 2.344559f, 0.924968f,
 0.700363f, 4.777358f, -0.069943f,
 0.700363f, 4.777358f, -0.069943f,
 1.172495f, 2.344559f, 0.924968f,
 0.033961f, 4.777366f, 0.798922f,
 0.684600f, 4.777358f, 0.626761f,
 0.684600f, 4.777358f, 0.626761f,
 0.033961f, 4.777366f, -0.475135f,
 0.700363f, 4.777358f, -0.069943f,
 0.700363f, 4.777358f, -0.069943f,
 0.776421f, 7.695155f, 0.783573f,
 1.200907f, 7.749005f, -0.270188f,
 1.200907f, 7.749005f, -0.270188f,
 0.971581f, 6.804192f, 0.962299f,
 0.776421f, 7.695155f, 0.783573f,
 0.776421f, 7.695155f, 0.783573f,
 0.997360f, 6.804192f, -0.191005f,
 0.971581f, 6.804192f, 0.962299f,
 0.971581f, 6.804192f, 0.962299f,
 0.975757f, 7.161500f, 0.905013f,
 1.200907f, 7.749005f, -0.270188f,
 0.997360f, 6.804192f, -0.191005f,
 0.997360f, 6.804192f, -0.191005f,
 0.975757f, 7.161500f, 0.905013f,
 2.022530f, 6.252845f, 1.088342f,
 2.022530f, 6.252845f, 1.088342f,
 2.022530f, 6.252845f, 1.088342f,
 1.684723f, 6.108200f, 2.334386f,
 1.684723f, 6.108200f, 2.334386f,
 1.172495f, 2.344559f, 0.924968f,
 1.773378f, -0.185960f, 1.336819f,
 1.773378f, -0.185960f, 1.336819f,
 -0.868441f, 9.661089f, 1.138519f,
 -0.723264f, 9.211608f, -0.013407f,
 -0.723264f, 9.211608f, -0.013407f,
 -0.749646f, 8.291161f, -0.269820f,
 -0.723264f, 9.211608f, -0.013407f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.723264f, 9.211608f, -0.013407f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.494279f, 9.717268f, 1.381939f,
 0.033961f, 9.879237f, 1.461500f,
 0.033961f, 9.879237f, 1.461500f,
 -0.868441f, 9.637168f, 1.339881f,
 -0.494279f, 9.717268f, 1.381939f,
 -0.868441f, 9.661089f, 1.138519f,
 -0.868441f, 9.661089f, 1.138519f,
 -0.494279f, 9.717268f, 1.381939f,
 -0.868441f, 9.637168f, 1.339881f,
 -0.868441f, 9.637168f, 1.339881f,
 -1.204989f, 7.955889f, 1.141122f,
 0.033961f, 7.922462f, 1.423868f,
 -0.374288f, 7.955523f, 1.144212f,
 -0.374288f, 7.955523f, 1.144212f,
 -0.361660f, 7.993981f, 0.818900f,
 -0.374288f, 7.955523f, 1.144212f,
 -0.377078f, 7.693140f, 1.308935f,
 -0.377078f, 7.693140f, 1.308935f,
 -0.364450f, 7.355465f, 1.278751f,
 -0.364450f, 7.355465f, 1.278751f,
 -0.364450f, 7.355465f, 1.278751f,
 -0.714328f, 7.347686f, 1.344552f,
 -0.714328f, 7.347686f, 1.344552f,
 -0.714328f, 7.689706f, 1.337982f,
 -0.714328f, 7.689706f, 1.337982f,
 -1.204989f, 7.955889f, 1.141122f,
 -1.132985f, 7.749005f, -0.270188f,
 -0.708500f, 7.695155f, 0.783573f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.708500f, 7.695155f, 0.783573f,
 -0.361660f, 7.993981f, 0.818900f,
 -0.708500f, 7.695155f, 0.783573f,
 0.033961f, 7.729641f, 0.750321f,
 -0.361660f, 7.993981f, 0.818900f,
 -0.361660f, 7.993981f, 0.818900f,
 0.033961f, 7.729641f, 0.750321f,
 0.033961f, 8.144949f, -0.458112f,
 0.033961f, 7.761216f, -0.373395f,
 -0.303336f, 8.134672f, -0.371188f,
 -0.303336f, 8.134672f, -0.371188f,
 0.033961f, 7.761216f, -0.373395f,
 -1.132985f, 7.749005f, -0.270188f,
 -0.903658f, 6.804192f, 0.962299f,
 -0.616678f, 4.777358f, 0.626761f,
 -1.094515f, 2.342918f, 0.941306f,
 -0.632440f, 4.777358f, -0.069943f,};

static float VertArrayB[] = new float[]{
 -0.632440f, 4.777358f, -0.069943f,
 -1.094515f, 2.342918f, 0.941306f,
 -0.616678f, 4.777358f, 0.626761f,
 -1.094515f, 2.342918f, 0.941306f,
 0.039987f, 2.343742f, 1.066036f,
 -0.616678f, 4.777358f, 0.626761f,
 -0.616678f, 4.777358f, 0.626761f,
 0.039987f, 2.343742f, 1.066036f,
 0.033961f, 4.777366f, 0.798922f,
 0.033961f, 4.777366f, -0.475135f,
 0.026139f, 2.343735f, -0.928108f,
 -0.632440f, 4.777358f, -0.069943f,
 -0.632440f, 4.777358f, -0.069943f,
 0.026139f, 2.343735f, -0.928108f,
 -1.138620f, 2.342937f, -0.525461f,
 -1.132985f, 7.749005f, -0.270188f,
 -1.004175f, 7.114974f, -0.090296f,
 -0.708500f, 7.695155f, 0.783573f,
 -1.004175f, 7.114974f, -0.090296f,
 -1.527775f, 7.326701f, 0.347988f,
 -0.708500f, 7.695155f, 0.783573f,
 -1.527775f, 7.326701f, 0.347988f,
 -1.338928f, 7.092207f, 0.871346f,
 -0.708500f, 7.695155f, 0.783573f,
 -0.708500f, 7.695155f, 0.783573f,
 -1.338928f, 7.092207f, 0.871346f,
 -0.903658f, 6.804192f, 0.962299f,
 -1.338928f, 7.092207f, 0.871346f,
 -0.731403f, 6.851484f, 0.366590f,
 -0.903658f, 6.804192f, 0.962299f,
 -0.903658f, 6.804192f, 0.962299f,
 -0.731403f, 6.851484f, 0.366590f,
 -0.929437f, 6.804192f, -0.191005f,
 -0.731403f, 6.851484f, 0.366590f,
 -1.004175f, 7.114974f, -0.090296f,
 -0.929437f, 6.804192f, -0.191005f,
 -0.929437f, 6.804192f, -0.191005f,
 -1.004175f, 7.114974f, -0.090296f,
 -1.132985f, 7.749005f, -0.270188f,
 -1.527775f, 7.326701f, 0.347988f,
 -1.861918f, 5.518657f, 0.484160f,
 -1.338928f, 7.092207f, 0.871346f,
 -1.338928f, 7.092207f, 0.871346f,
 -1.861918f, 5.518657f, 0.484160f,
 -1.702734f, 5.584702f, 0.735601f,
 -1.938699f, 4.492512f, 1.398250f,
 -1.702734f, 5.584702f, 0.735601f,
 -2.164667f, 4.398760f, 1.041317f,
 -2.164667f, 4.398760f, 1.041317f,
 -1.702734f, 5.584702f, 0.735601f,
 -1.861918f, 5.518657f, 0.484160f,
 -1.752608f, -0.187345f, -0.972165f,
 -1.694518f, -0.187358f, 1.350739f,
 -1.138620f, 2.342937f, -0.525461f,
 -1.138620f, 2.342937f, -0.525461f,
 -1.694518f, -0.187358f, 1.350739f,
 -1.094515f, 2.342918f, 0.941306f,
 2.076086f, 5.494232f, 2.282370f,
 2.060281f, 5.962777f, 3.065791f,
 2.022666f, 5.226209f, 2.933528f,
 1.655012f, 5.526476f, 2.229847f,
 2.076086f, 5.494232f, 2.282370f,
 1.449404f, 5.283609f, 2.795079f,
 1.449404f, 5.283609f, 2.795079f,
 2.076086f, 5.494232f, 2.282370f,
 2.022666f, 5.226209f, 2.933528f,
 1.684723f, 6.108200f, 2.334386f,
 1.655012f, 5.526476f, 2.229847f,
 1.491509f, 6.109201f, 2.946810f,
 1.491509f, 6.109201f, 2.946810f,
 1.655012f, 5.526476f, 2.229847f,
 1.449404f, 5.283609f, 2.795079f,
 -1.520977f, 4.234738f, 1.067684f,
 -2.080262f, 3.998163f, 1.782924f,
 -1.485984f, 3.635048f, 1.312415f,
 -1.520977f, 4.234738f, 1.067684f,
 -1.485984f, 3.635048f, 1.312415f,
 -1.804029f, 4.172828f, 0.755994f,
 -1.804029f, 4.172828f, 0.755994f,
 -1.485984f, 3.635048f, 1.312415f,
 -1.892593f, 3.488691f, 0.907025f,
 -2.164667f, 4.398760f, 1.041317f,
 -1.804029f, 4.172828f, 0.755994f,
 -2.421456f, 3.815163f, 1.325546f,
 -2.421456f, 3.815163f, 1.325546f,
 -1.804029f, 4.172828f, 0.755994f,
 -1.892593f, 3.488691f, 0.907025f,
 -2.164667f, 4.398760f, 1.041317f,
 -2.421456f, 3.815163f, 1.325546f,
 -1.938699f, 4.492512f, 1.398250f,};

static float[] TextArray = new float[]{
 0.997287f, 0.008229f,
 0.997287f, 0.089162f,
 0.493691f, 0.982654f,
 0.694605f, 0.981109f,
 0.557045f, 0.804122f,
 0.628631f, 0.805010f,
 0.531280f, 0.707589f,
 0.484323f, 0.943805f,
 0.906579f, 0.606627f,
 0.908324f, 0.508558f,
 0.432117f, 0.970430f,
 0.119964f, 0.206787f,
 0.912807f, 0.483165f,
 0.415376f, 0.707589f,
 0.358414f, 0.707589f,
 0.358414f, 0.994176f,
 0.086285f, 0.199997f,
 0.083540f, 0.350365f,
 0.085479f, 0.151978f,
 0.126438f, 0.150934f,
 0.821509f, 0.628783f,
 0.826742f, 0.493028f,
 0.848890f, 0.463714f,
 0.949638f, 0.757239f,
 0.415765f, 0.673932f,
 0.462820f, 0.673932f,
 0.414003f, 0.626649f,
 0.462820f, 0.626649f,
 0.506471f, 0.680776f,
 0.888747f, 0.982432f,
 0.804662f, 0.985869f,
 0.608704f, 0.680777f,
 0.550265f, 0.427741f,
 0.490451f, 0.415698f,
 0.804662f, 0.646870f,
 0.608704f, 0.427351f,
 0.910849f, 0.876410f,
 0.524361f, 0.604524f,
 0.608704f, 0.619762f,
 0.804662f, 0.887183f,
 0.637059f, 0.094341f,
 0.508844f, 0.103073f,
 0.340575f, 0.103073f,
 0.745360f, 0.093609f,
 0.088712f, 0.403165f,
 0.134506f, 0.403165f,
 0.177173f, 0.403165f,
 0.049042f, 0.403165f,
 0.088712f, 0.521627f,
 0.134506f, 0.521627f,
 0.177173f, 0.521627f,
 0.049042f, 0.521627f,
 0.134506f, 0.697341f,
 0.134506f, 0.642886f,
 0.177173f, 0.642886f,
 0.177173f, 0.697341f,
 0.340574f, 0.348630f,
 0.450573f, 0.348630f,
 0.673596f, 0.248044f,
 0.745360f, 0.248156f,
 0.966035f, 0.484735f,
 0.960563f, 0.348968f,
 0.880548f, 0.364100f,
 0.880965f, 0.462579f,
 0.052854f, 0.206348f,
 0.044331f, 0.151978f,
 0.878018f, 0.339363f,
 0.938475f, 0.320998f,
 0.301453f, 0.707589f,
 0.185549f, 0.707589f,
 0.232506f, 0.943805f,
 0.284711f, 0.970430f,
 0.254009f, 0.673932f,
 0.301064f, 0.673932f,
 0.302825f, 0.626649f,
 0.254009f, 0.626649f,
 0.720578f, 0.982432f,
 0.710936f, 0.680776f,
 0.007565f, 0.655407f,
 0.007565f, 0.709862f,
 0.049236f, 0.709862f,
 0.049236f, 0.655407f,
 0.698476f, 0.876410f,
 0.693047f, 0.604524f,
 0.726955f, 0.415697f,
 0.667142f, 0.427741f,
 0.230576f, 0.348630f,
 0.817124f, 0.248044f,
 0.176724f, 0.949583f,
 0.137216f, 0.949583f,
 0.049236f, 0.949583f,
 0.091983f, 0.949583f,
 0.176724f, 0.831121f,
 0.137216f, 0.831121f,
 0.049236f, 0.831121f,
 0.091983f, 0.831121f,
 0.172305f, 0.103073f,
 0.853660f, 0.094340f,
 0.177173f, 0.602466f,
 0.134506f, 0.602466f,
 0.088712f, 0.602466f,
 0.049042f, 0.602466f,
 0.049236f, 0.750282f,
 0.091983f, 0.750282f,
 0.137216f, 0.750282f,
 0.176724f, 0.750282f,
 0.134658f, 0.008229f,
 0.134658f, 0.008229f,
 0.134658f, 0.089162f,
 0.158683f, 0.223498f,
 0.158683f, 0.223498f,
 0.158683f, 0.115418f,
 0.158683f, 0.338207f,
 0.110895f, 0.350972f,
 0.158683f, 0.223498f,
 0.158683f, 0.223498f,
 0.110895f, 0.350972f,
 0.110895f, 0.350972f,
 0.085479f, 0.096280f,
 0.085479f, 0.096280f,
 0.128331f, 0.096280f,
 0.128331f, 0.096280f,
 0.158683f, 0.115418f,
 0.158683f, 0.115418f,
 0.128331f, 0.096280f,
 0.158683f, 0.096281f,
 0.805700f, 0.496787f,
 0.805700f, 0.628774f,
 0.805700f, 0.628774f,
 0.949638f, 0.718017f,
 0.972326f, 0.722391f,
 0.972326f, 0.722391f,
 0.972326f, 0.753767f,
 0.846690f, 0.444907f,
 0.822498f, 0.435909f,
 0.822498f, 0.435909f,
 0.804583f, 0.447868f,
 0.804583f, 0.447868f,
 0.804583f, 0.447868f,
 0.792244f, 0.460353f,
 0.805700f, 0.496787f,
 0.788023f, 0.477981f,
 0.788023f, 0.477981f,
 0.792244f, 0.460353f,
 0.925303f, 0.838421f,
 0.933270f, 0.825273f,
 0.965643f, 0.877787f,
 0.965643f, 0.877787f,
 0.933270f, 0.825273f,
 0.986675f, 0.823739f,
 0.921005f, 0.754538f,
 0.949638f, 0.718017f,
 0.949638f, 0.718017f,
 0.921005f, 0.754538f,
 0.917794f, 0.675968f,
 0.961898f, 0.902588f,
 0.965643f, 0.877787f,
 0.990420f, 0.903796f,
 0.990420f, 0.903796f,
 0.965643f, 0.877787f,
 0.986675f, 0.823739f,
 0.425500f, 0.583551f,
 0.878348f, 0.646869f,
 0.666165f, 0.412442f,
 0.590716f, 0.283014f,
 0.704988f, 0.396285f,
 0.704988f, 0.396285f,
 0.590716f, 0.283014f,
 0.340575f, 0.584800f,
 0.403714f, 0.584799f,
 0.403714f, 0.584799f,
 0.745360f, 0.396794f,
 0.704988f, 0.396285f,
 0.704988f, 0.396285f,
 0.134506f, 0.357626f,
 0.088712f, 0.357626f,
 0.088712f, 0.357626f,
 0.177173f, 0.357626f,
 0.134506f, 0.357626f,
 0.134506f, 0.357626f,
 0.049042f, 0.357626f,
 0.008494f, 0.357626f,
 0.008494f, 0.357626f,
 0.008494f, 0.403165f,
 0.088712f, 0.357626f,
 0.049042f, 0.357626f,
 0.049042f, 0.357626f,
 0.008494f, 0.403165f,
 0.008494f, 0.521627f,
 0.008494f, 0.521627f,
 0.008494f, 0.521627f,
 0.008494f, 0.602466f,
 0.008494f, 0.602466f,
 0.590716f, 0.283014f,
 0.501906f, 0.152852f,
 0.501906f, 0.152852f,
 0.012277f, 0.112730f,
 0.012276f, 0.217993f,
 0.012276f, 0.217993f,
 0.012276f, 0.335387f,
 0.012276f, 0.217993f,
 0.056185f, 0.349758f,
 0.056185f, 0.349758f,
 0.012276f, 0.217993f,
 0.056185f, 0.349758f,
 0.042629f, 0.096280f,
 0.085479f, 0.096280f,
 0.085479f, 0.096280f,
 0.012276f, 0.096281f,
 0.042629f, 0.096280f,
 0.012277f, 0.112730f,
 0.012277f, 0.112730f,
 0.042629f, 0.096280f,
 0.981844f, 0.484725f,
 0.981844f, 0.484725f,
 0.981844f, 0.352739f,
 0.972326f, 0.753767f,
 0.972326f, 0.785142f,
 0.972326f, 0.785142f,
 0.949638f, 0.785658f,
 0.940336f, 0.302313f,
 0.964527f, 0.293316f,
 0.964527f, 0.293316f,
 0.982102f, 0.305398f,
 0.982102f, 0.305398f,
 0.982102f, 0.305398f,
 0.994453f, 0.316738f,
 0.994453f, 0.316738f,
 0.999521f, 0.333933f,
 0.999521f, 0.333933f,
 0.981844f, 0.352739f,
 0.986755f, 0.984311f,
 0.933507f, 0.983693f,
 0.965564f, 0.931307f,
 0.965564f, 0.931307f,
 0.933507f, 0.983693f,
 0.925419f, 0.970619f,
 0.917795f, 0.833109f,
 0.921005f, 0.754538f,
 0.949638f, 0.785658f,
 0.949638f, 0.785658f,
 0.921005f, 0.754538f,
 0.961898f, 0.902588f,
 0.990420f, 0.903796f,
 0.965564f, 0.931307f,
 0.965564f, 0.931307f,
 0.990420f, 0.903796f,
 0.986755f, 0.984311f,
 0.791908f, 0.583549f,
 0.730977f, 0.646869f,
 0.900004f, 0.283013f,
 0.785732f, 0.396285f,};

static float[] TextArrayB = new float[]{
 0.785732f, 0.396285f,
 0.900004f, 0.283013f,
 0.824556f, 0.412442f,
 0.230576f, 0.348630f,
 0.340574f, 0.348630f,
 0.277434f, 0.584799f,
 0.277434f, 0.584799f,
 0.340574f, 0.348630f,
 0.340575f, 0.584800f,
 0.745360f, 0.396794f,
 0.745360f, 0.248156f,
 0.785732f, 0.396285f,
 0.785732f, 0.396285f,
 0.745360f, 0.248156f,
 0.817124f, 0.248044f,
 0.137216f, 0.995122f,
 0.137216f, 0.949583f,
 0.176724f, 0.995122f,
 0.137216f, 0.949583f,
 0.176724f, 0.949583f,
 0.176724f, 0.995122f,
 0.007565f, 0.949583f,
 0.049236f, 0.949583f,
 0.007565f, 0.995122f,
 0.007565f, 0.995122f,
 0.049236f, 0.949583f,
 0.049236f, 0.995122f,
 0.049236f, 0.949583f,
 0.091983f, 0.949583f,
 0.049236f, 0.995122f,
 0.049236f, 0.995122f,
 0.091983f, 0.949583f,
 0.091983f, 0.995122f,
 0.091983f, 0.949583f,
 0.137216f, 0.949583f,
 0.091983f, 0.995122f,
 0.091983f, 0.995122f,
 0.137216f, 0.949583f,
 0.137216f, 0.995122f,
 0.007565f, 0.949583f,
 0.007565f, 0.831121f,
 0.049236f, 0.949583f,
 0.049236f, 0.949583f,
 0.007565f, 0.831121f,
 0.049236f, 0.831121f,
 0.049236f, 0.750282f,
 0.049236f, 0.831121f,
 0.007565f, 0.750282f,
 0.007565f, 0.750282f,
 0.049236f, 0.831121f,
 0.007565f, 0.831121f,
 0.853660f, 0.094340f,
 0.988813f, 0.152851f,
 0.817124f, 0.248044f,
 0.817124f, 0.248044f,
 0.988813f, 0.152851f,
 0.900004f, 0.283013f,
 0.088712f, 0.602466f,
 0.134506f, 0.642886f,
 0.088712f, 0.642886f,
 0.049042f, 0.602466f,
 0.088712f, 0.602466f,
 0.049042f, 0.642886f,
 0.049042f, 0.642886f,
 0.088712f, 0.602466f,
 0.088712f, 0.642886f,
 0.008494f, 0.602466f,
 0.049042f, 0.602466f,
 0.008494f, 0.642886f,
 0.008494f, 0.642886f,
 0.049042f, 0.602466f,
 0.049042f, 0.642886f,
 0.091983f, 0.750282f,
 0.049236f, 0.709862f,
 0.091983f, 0.709862f,
 0.091983f, 0.750282f,
 0.091983f, 0.709862f,
 0.137216f, 0.750282f,
 0.137216f, 0.750282f,
 0.091983f, 0.709862f,
 0.137216f, 0.709862f,
 0.176724f, 0.750282f,
 0.137216f, 0.750282f,
 0.176724f, 0.709862f,
 0.176724f, 0.709862f,
 0.137216f, 0.750282f,
 0.137216f, 0.709862f,
 0.007565f, 0.750282f,
 0.007565f, 0.709862f,
 0.049236f, 0.750282f,};

static float[][] NormArray = new float[][]{
{ -0.867056f, 0.052770f, -0.495408f},
{ -0.841422f, 0.028088f, -0.539649f},
{ -0.771317f, 0.003292f, -0.636443f},
{ -0.758017f, -0.012392f, -0.652117f},
{ -0.867904f, 0.030321f, -0.495806f},
{ -0.867904f, 0.030321f, -0.495807f},
{ 0.958716f, 0.264891f, -0.103420f},
{ 0.826605f, -0.276780f, -0.490017f},
{ 0.904768f, 0.163484f, -0.393278f},
{ 0.857718f, -0.259070f, -0.444075f},
{ 0.363846f, 0.470841f, -0.803695f},
{ 0.549456f, 0.819137f, -0.164658f},
{ 0.485922f, 0.226336f, -0.844187f},
{ 0.520281f, -0.828897f, -0.205517f},
{ 0.517275f, -0.096800f, 0.850327f},
{ 0.414372f, -0.033913f, 0.909476f},
{ 0.188090f, -0.203241f, 0.960893f},
{ 0.238558f, 0.218133f, 0.946313f},
{ -0.000000f, 0.340343f, 0.940302f},
{ 0.000000f, -0.329875f, 0.944025f},
{ -0.000000f, 0.591923f, -0.805995f},
{ 0.000000f, 0.998462f, -0.055443f},
{ 0.000000f, 0.121098f, -0.992641f},
{ 0.453144f, 0.241286f, 0.858162f},
{ -0.760936f, 0.171317f, 0.625801f},
{ 0.383691f, -0.813479f, -0.437074f},
{ -0.216586f, -0.782246f, -0.584108f},
{ -0.000000f, -0.939470f, 0.342633f},
{ 0.348973f, 0.699467f, 0.623670f},
{ 0.503399f, 0.574098f, -0.645757f},
{ 0.000000f, 0.362505f, 0.931982f},
{ 0.000000f, -0.081449f, -0.996678f},
{ 0.531616f, -0.689996f, 0.491214f},
{ 0.528403f, 0.287502f, 0.798832f},
{ -0.813267f, -0.518872f, 0.263379f},
{ -0.669538f, 0.514311f, 0.535912f},
{ 0.000000f, -0.029515f, 0.999564f},
{ 0.741837f, -0.122080f, 0.659374f},
{ 0.662228f, -0.115935f, -0.740279f},
{ -0.000000f, 0.029971f, -0.999551f},
{ 0.783850f, 0.012921f, 0.620816f},
{ 0.863632f, 0.079110f, -0.497877f},
{ 0.000516f, 0.064054f, -0.997946f},
{ -0.000201f, -0.040982f, 0.999160f},
{ 0.753892f, 0.277685f, 0.595431f},
{ 0.820086f, 0.282922f, -0.497407f},
{ 0.006615f, 0.227797f, 0.973686f},
{ -0.006742f, 0.260670f, -0.965405f},
{ 0.628741f, 0.700872f, 0.336845f},
{ 0.827306f, 0.135900f, -0.545066f},
{ -0.119831f, -0.149652f, 0.981450f},
{ -0.104660f, -0.903335f, -0.415971f},
{ 0.917613f, 0.385302f, -0.097617f},
{ 0.738813f, -0.517658f, -0.431493f},
{ -0.682962f, 0.232163f, 0.692577f},
{ -0.728959f, -0.597051f, -0.334887f},
{ 0.834776f, 0.525667f, 0.163780f},
{ 0.757735f, -0.643777f, -0.106723f},
{ -0.657011f, 0.740448f, -0.141678f},
{ -0.815911f, -0.422931f, -0.394231f},
{ 0.004226f, 0.240075f, 0.970745f},
{ 0.793422f, 0.276899f, 0.542041f},
{ 0.825595f, 0.286692f, -0.486004f},
{ -0.004020f, 0.261853f, -0.965100f},
{ -0.958716f, 0.264892f, -0.103421f},
{ -0.904768f, 0.163484f, -0.393279f},
{ -0.826606f, -0.276781f, -0.490016f},
{ -0.857718f, -0.259070f, -0.444075f},
{ -0.549456f, 0.819137f, -0.164658f},
{ -0.363846f, 0.470841f, -0.803695f},
{ -0.485922f, 0.226336f, -0.844187f},
{ -0.520281f, -0.828897f, -0.205519f},
{ -0.238558f, 0.218134f, 0.946313f},
{ -0.414372f, -0.033913f, 0.909476f},
{ -0.188090f, -0.203242f, 0.960893f},
{ -0.517274f, -0.096800f, 0.850328f},
{ -0.453143f, 0.241286f, 0.858163f},
{ -0.383692f, -0.813479f, -0.437073f},
{ 0.760937f, 0.171315f, 0.625801f},
{ 0.216585f, -0.782246f, -0.584108f},
{ -0.709333f, 0.469823f, -0.525464f},
{ -0.456617f, 0.671336f, 0.583788f},
{ -0.151192f, -0.803793f, -0.575377f},
{ 0.738030f, -0.517380f, 0.433162f},
{ -0.875845f, -0.477273f, 0.071464f},
{ -0.102430f, -0.129888f, 0.986224f},
{ -0.708321f, -0.155552f, 0.688538f},
{ -0.691563f, -0.082340f, -0.717607f},
{ -0.864990f, 0.078956f, -0.495538f},
{ -0.783854f, 0.012019f, 0.620828f},
{ -0.826959f, 0.282290f, -0.486263f},
{ -0.745050f, 0.278939f, 0.605883f},
{ -0.646968f, 0.033288f, -0.761791f},
{ -0.811442f, 0.455296f, -0.366425f},
{ -0.347421f, 0.110027f, 0.931232f},
{ 0.928255f, -0.353053f, 0.117031f},
{ -0.083418f, -0.266724f, -0.960156f},
{ -0.911482f, 0.115580f, -0.394768f},
{ 0.058288f, 0.142539f, 0.988072f},
{ 0.950350f, -0.204320f, 0.234709f},
{ -0.944182f, 0.175988f, -0.278475f},
{ -0.066414f, -0.293405f, -0.953679f},
{ 0.050245f, 0.551016f, 0.832981f},
{ 0.970785f, 0.070771f, 0.229279f},
{ -0.790045f, 0.274611f, 0.548104f},
{ -0.828975f, 0.286007f, -0.480626f}};

static int[] FaceArray = new int[]{
4, 5, 2,
2, 5, 3,
0, 1, 106,
107, 1, 108,
20, 21, 8,
8, 21, 9,
11, 19, 109,
110, 19, 111,
112, 113, 114,
115, 116, 11,
21, 22, 9,
9, 22, 12,
6, 7, 13,
13, 7, 10,
15, 14, 10,
10, 14, 13,
11, 16, 19,
19, 16, 18,
117, 17, 11,
11, 17, 16,
18, 118, 19,
19, 119, 120,
19, 121, 122,
123, 124, 125,
126, 21, 127,
128, 21, 20,
25, 24, 27,
27, 24, 26,
129, 130, 23,
23, 131, 132,
6, 13, 25,
25, 13, 24,
133, 22, 134,
135, 22, 136,
22, 21, 137,
138, 21, 139,
140, 141, 21,
21, 142, 143,
144, 145, 146,
147, 148, 149,
23, 150, 151,
152, 153, 154,
155, 156, 157,
158, 159, 160,
52, 53, 55,
55, 53, 54,
30, 39, 29,
29, 39, 36,
28, 37, 31,
31, 37, 38,
161, 33, 37,
37, 33, 32,
38, 37, 35,
35, 37, 32,
39, 34, 36,
36, 34, 162,
163, 164, 165,
166, 167, 58,
168, 56, 169,
170, 56, 57,
171, 172, 59,
59, 173, 58,
174, 45, 175,
176, 45, 44,
177, 46, 178,
179, 46, 45,
180, 47, 181,
182, 47, 183,
184, 44, 185,
186, 44, 47,
45, 49, 44,
44, 49, 48,
46, 50, 45,
45, 50, 49,
187, 47, 188,
189, 47, 51,
44, 48, 47,
47, 48, 51,
49, 99, 48,
48, 99, 100,
49, 50, 99,
99, 50, 98,
190, 51, 191,
192, 51, 101,
48, 100, 51,
51, 100, 101,
56, 42, 57,
57, 42, 41,
193, 194, 58,
58, 195, 40,
59, 58, 43,
43, 58, 40,
60, 63, 61,
61, 63, 62,
196, 65, 197,
198, 65, 64,
199, 200, 201,
202, 203, 64,
61, 62, 67,
67, 62, 66,
71, 70, 68,
68, 70, 69,
15, 71, 14,
14, 71, 68,
64, 65, 16,
16, 65, 18,
16, 17, 64,
64, 17, 204,
205, 206, 65,
65, 207, 18,
208, 209, 210,
211, 212, 65,
60, 61, 213,
214, 61, 215,
72, 75, 73,
73, 75, 74,
216, 217, 23,
23, 218, 219,
69, 72, 68,
68, 72, 73,
220, 221, 67,
67, 222, 223,
67, 224, 61,
61, 225, 226,
227, 228, 61,
61, 229, 230,
231, 232, 233,
234, 235, 236,
237, 238, 239,
240, 241, 23,
242, 243, 244,
245, 246, 247,
78, 81, 79,
79, 81, 80,
82, 39, 76,
76, 39, 30,
38, 83, 31,
31, 83, 77,
85, 84, 83,
83, 84, 248,
38, 35, 83,
83, 35, 85,
249, 34, 82,
82, 34, 39,
87, 250, 251,
93, 92, 89,
89, 92, 88,
90, 94, 91,
91, 94, 95,
95, 93, 91,
91, 93, 89,
92, 93, 105,
105, 93, 104,
94, 102, 95,
95, 102, 103,
93, 95, 104,
104, 95, 103,
96, 42, 86,
86, 42, 56,
59, 43, 87,
87, 43, 97,
99, 98, 53,
53, 98, 54,
99, 53, 100,
102, 80, 103,
102, 79, 80, };

static int[] FaceArrayB = new int[]{
0, 1, 2,
3, 4, 5,
6, 7, 8,
9, 10, 11,
12, 13, 14,
15, 16, 17,
18, 19, 20,
21, 22, 23,
24, 25, 26,
27, 28, 29,
30, 31, 32,
33, 34, 35,
36, 37, 38,
39, 40, 41,
42, 43, 44,
45, 46, 47,
48, 49, 50,
51, 52, 53,
54, 55, 56,
57, 58, 59,
60, 61, 62,
63, 64, 65,
66, 67, 68,
69, 70, 71,
72, 73, 74,
75, 76, 77,
78, 79, 80,
81, 82, 83,
84, 85, 86,
87, 88, 89,};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 342  Texture Co-ords: 191  Normals: 106  Texture: Idle Faces: 196 Smooth Groups: 2 sucess: 89 Doubles: 107 Redos needed: 146 Correct: 85