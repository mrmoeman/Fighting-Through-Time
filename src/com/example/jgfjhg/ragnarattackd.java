package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarattackd {

static String TextureName = "RagAttack4.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.257852f, 11.961057f, 4.407241f,
 1.131350f, 12.401098f, 5.820423f,
 -0.346044f, 15.815234f, 7.862638f,
 -1.677738f, 14.477552f, 4.885604f,
 3.331938f, 11.986384f, 4.640219f,
 1.755364f, 12.402491f, 5.860879f,
 2.951715f, 15.825168f, 8.065780f,
 4.606663f, 14.567116f, 5.248678f,
 -0.070225f, 12.624295f, 5.621403f,
 -0.072778f, 11.302467f, 5.603415f,
 0.352963f, 9.589055f, 4.206709f,
 2.095598f, 8.163353f, 3.755569f,
 1.421523f, 10.915345f, 6.142330f,
 1.413137f, 13.286589f, 6.285165f,
 -0.167338f, 11.616779f, 3.887969f,
 -0.353145f, 13.071836f, 3.455870f,
 1.205110f, 14.326397f, 3.917113f,
 1.100728f, 8.199849f, 1.307635f,
 0.955765f, 9.663969f, 2.793467f,
 -1.023533f, 6.926629f, 2.787812f,
 -1.562404f, 7.428249f, 0.221270f,
 -1.694333f, 10.593495f, 3.899204f,
 -2.246004f, 11.801827f, -0.728826f,
 1.462704f, 11.785772f, 5.560975f,
 1.767914f, 14.052299f, -0.001228f,
 -0.175909f, 6.076883f, -1.059928f,
 1.176412f, 4.941553f, 2.718293f,
 -3.318895f, 12.517605f, 2.124123f,
 1.035021f, 15.193431f, 3.822978f,
 -0.059292f, 8.446057f, 2.590693f,
 1.545766f, 8.141246f, 2.080757f,
 0.209982f, 9.593781f, -0.237395f,
 -0.925774f, 9.364393f, 1.000365f,
 -0.830932f, 9.027973f, 2.158545f,
 -2.042355f, 6.542328f, 1.633840f,
 0.203817f, 4.588803f, 0.535898f,
 -3.126982f, 11.280784f, 1.080514f,
 -2.116868f, 9.410564f, 0.557106f,
 -3.067088f, 9.339749f, -1.015359f,
 -3.947957f, 10.826270f, -0.935615f,
 -4.298477f, 7.881140f, 1.812264f,
 -3.479654f, 6.912324f, 1.361226f,
 -4.106964f, 6.859578f, 0.331632f,
 -4.927666f, 7.827651f, 0.781455f,
 -1.129516f, 12.674437f, 1.062086f,
 -1.431562f, 12.187619f, 3.313609f,
 -0.441595f, 11.257582f, 0.738684f,
 -0.607056f, 10.352602f, 2.347693f,
 -0.806555f, 4.542812f, 1.938372f,
 -0.631444f, 4.813514f, 3.837823f,
 -1.846653f, 4.841557f, 2.315229f,
 -1.720708f, 5.060956f, 3.771498f,
 -1.034460f, 3.171062f, 0.520363f,
 -0.889366f, 0.785910f, 4.063673f,
 -2.387601f, 3.086038f, 0.656566f,
 -2.384320f, 0.817087f, 4.018507f,
 0.057524f, 7.023134f, 0.371789f,
 -0.745969f, 7.183714f, 0.924805f,
 -0.464899f, 7.131156f, 1.929726f,
 0.565220f, 6.701412f, 1.482729f,
 -2.112637f, 3.427750f, 2.747260f,
 -2.197635f, 3.522293f, 1.495458f,
 -1.105929f, 3.648688f, 1.295664f,
 -1.028276f, 3.285963f, 2.781396f,
 2.976841f, 12.636415f, 5.816466f,
 2.977392f, 11.306128f, 5.799904f,
 2.734915f, 9.589511f, 4.358003f,
 3.481280f, 12.423594f, 4.561512f,
 3.192945f, 13.855022f, 4.109104f,
 3.478125f, 9.968172f, 2.382078f,
 3.198427f, 6.146962f, 0.447984f,
 1.848687f, 7.863248f, -1.434083f,
 5.303770f, 13.464749f, 5.118779f,
 6.480483f, 13.604332f, 0.652876f,
 5.593345f, 15.248827f, 2.937796f,
 2.791179f, 8.444474f, 0.948005f,
 1.876407f, 9.376184f, -0.579057f,
 2.803756f, 9.027915f, 0.063037f,
 2.984489f, 6.448668f, -1.159352f,
 6.214565f, 14.779099f, 1.819959f,
 7.624574f, 13.330560f, 2.614356f,
 8.764044f, 13.677032f, 1.218966f,
 7.810813f, 14.787029f, 0.297839f,
 8.977169f, 15.477758f, 4.112900f,
 9.694334f, 14.391174f, 4.424077f,
 10.453598f, 14.629653f, 3.517078f,
 9.727223f, 15.714840f, 3.192883f,
 4.827233f, 13.991422f, 2.161607f,
 4.511882f, 13.533712f, 4.372899f,
 4.933878f, 12.446338f, 1.731087f,
 4.901355f, 11.576562f, 3.366935f,
 1.230442f, 4.618805f, -1.482558f,
 2.167011f, 3.741691f, -0.030474f,
 2.355262f, 4.643779f, -1.760376f,
 3.078544f, 3.975697f, -0.638490f,
 0.331459f, 3.180117f, -3.484396f,
 1.981336f, 0.785905f, -0.342686f,
 1.571153f, 3.092958f, -4.046066f,
 3.253429f, 0.816695f, -1.129296f,
 0.778795f, 7.050506f, -0.089284f,
 1.737341f, 7.227556f, -0.483344f,
 2.361239f, 6.775389f, 0.380046f,
 1.347969f, 6.569482f, 0.916798f,
 2.423346f, 3.230515f, -2.110472f,
 1.829774f, 3.523937f, -3.220937f,
 0.784174f, 3.654787f, -2.845352f,
 1.509076f, 3.091585f, -1.510219f,
 11.894197f, 15.699122f, -1.865600f,
 15.119611f, 16.583044f, 0.762658f,
 5.912893f, 13.886425f, 5.673557f,
 9.323602f, 14.737320f, 8.405463f,
 -1.754929f, 11.046309f, 3.699856f,
 -3.948658f, 5.640470f, 5.242018f,
 -7.277699f, 5.454468f, -0.389349f,
 -5.061075f, 10.878911f, -1.898493f,
 -3.318895f, 12.517605f, 2.124123f,
 1.035021f, 15.193431f, 3.822978f,
 1.035021f, 15.193431f, 3.822978f,
 -0.830932f, 9.027973f, 2.158545f,
 -0.830932f, 9.027973f, 2.158545f,
 -3.318895f, 12.517605f, 2.124123f,
 -2.042355f, 6.542328f, 1.633840f,
 -0.830932f, 9.027973f, 2.158545f,
 -0.830932f, 9.027973f, 2.158545f,
 -2.042355f, 6.542328f, 1.633840f,
 0.203817f, 4.588803f, 0.535898f,
 -4.106964f, 6.859578f, 0.331632f,
 -4.927666f, 7.827651f, 0.781455f,
 -4.927666f, 7.827651f, 0.781455f,
 -4.106964f, 6.859578f, 0.331632f,
 -4.106964f, 6.859578f, 0.331632f,
 -3.067088f, 9.339749f, -1.015359f,
 -4.927666f, 7.827651f, 0.781455f,
 -4.927666f, 7.827651f, 0.781455f,
 -3.067088f, 9.339749f, -1.015359f,
 -0.441595f, 11.257582f, 0.738684f,
 -0.441595f, 11.257582f, 0.738684f,
 -0.806555f, 4.542812f, 1.938372f,
 -0.806555f, 4.542812f, 1.938372f,
 -1.105929f, 3.648688f, 1.295664f,
 0.057524f, 7.023134f, 0.371789f,
 -0.806555f, 4.542812f, 1.938372f,
 -0.806555f, 4.542812f, 1.938372f,
 -2.197635f, 3.522293f, 1.495458f,
 -2.112637f, 3.427750f, 2.747260f,
 -2.112637f, 3.427750f, 2.747260f,
 -1.034460f, 3.171062f, 0.520363f,
 -1.105929f, 3.648688f, 1.295664f,
 -1.105929f, 3.648688f, 1.295664f,
 -2.197635f, 3.522293f, 1.495458f,
 -0.889366f, 0.785910f, 4.063673f,
 -1.034460f, 3.171062f, 0.520363f,
 -1.028276f, 3.285963f, 2.781396f,
 -1.028276f, 3.285963f, 2.781396f,
 -1.034460f, 3.171062f, 0.520363f,
 -1.105929f, 3.648688f, 1.295664f,
 -2.112637f, 3.427750f, 2.747260f,
 -1.028276f, 3.285963f, 2.781396f,
 -1.028276f, 3.285963f, 2.781396f,
 -0.889366f, 0.785910f, 4.063673f,
 2.095598f, 8.163353f, 3.755569f,
 1.421523f, 10.915345f, 6.142330f,
 1.421523f, 10.915345f, 6.142330f,
 1.421523f, 10.915345f, 6.142330f,
 1.421523f, 10.915345f, 6.142330f,
 1.413137f, 13.286589f, 6.285165f,
 1.205110f, 14.326397f, 3.917113f,
 1.205110f, 14.326397f, 3.917113f,
 1.413137f, 13.286589f, 6.285165f,
 2.095598f, 8.163353f, 3.755569f,
 2.095598f, 8.163353f, 3.755569f,
 1.100728f, 8.199849f, 1.307635f,
 1.035021f, 15.193431f, 3.822978f,
 1.767914f, 14.052299f, -0.001228f,
 1.767914f, 14.052299f, -0.001228f,
 5.593345f, 15.248827f, 2.937796f,
 1.035021f, 15.193431f, 3.822978f,
 1.035021f, 15.193431f, 3.822978f,
 1.462704f, 11.785772f, 5.560975f,
 0.209982f, 9.593781f, -0.237395f,
 1.767914f, 14.052299f, -0.001228f,
 1.767914f, 14.052299f, -0.001228f,
 1.545766f, 8.141246f, 2.080757f,
 1.545766f, 8.141246f, 2.080757f,
 1.176412f, 4.941553f, 2.718293f,
 5.593345f, 15.248827f, 2.937796f,
 2.803756f, 9.027915f, 0.063037f,
 2.803756f, 9.027915f, 0.063037f,
 0.209982f, 9.593781f, -0.237395f,
 0.209982f, 9.593781f, -0.237395f,
 -0.175909f, 6.076883f, -1.059928f,
 1.462704f, 11.785772f, 5.560975f,
 1.545766f, 8.141246f, 2.080757f,
 1.545766f, 8.141246f, 2.080757f,
 2.984489f, 6.448668f, -1.159352f,
 2.803756f, 9.027915f, 0.063037f,
 2.803756f, 9.027915f, 0.063037f,
 1.176412f, 4.941553f, 2.718293f,
 0.203817f, 4.588803f, 0.535898f,
 0.203817f, 4.588803f, 0.535898f,
 2.984489f, 6.448668f, -1.159352f,
 0.203817f, 4.588803f, 0.535898f,
 -0.175909f, 6.076883f, -1.059928f,
 -0.175909f, 6.076883f, -1.059928f,
 9.727223f, 15.714840f, 3.192883f,
 9.727223f, 15.714840f, 3.192883f,
 10.453598f, 14.629653f, 3.517078f,
 10.453598f, 14.629653f, 3.517078f,
 10.453598f, 14.629653f, 3.517078f,
 8.764044f, 13.677032f, 1.218966f,
 9.727223f, 15.714840f, 3.192883f,
 9.727223f, 15.714840f, 3.192883f,
 4.933878f, 12.446338f, 1.731087f,
 4.933878f, 12.446338f, 1.731087f,
 8.764044f, 13.677032f, 1.218966f,
 0.784174f, 3.654787f, -2.845352f,
 1.230442f, 4.618805f, -1.482558f,
 1.230442f, 4.618805f, -1.482558f,
 1.230442f, 4.618805f, -1.482558f,
 1.230442f, 4.618805f, -1.482558f,
 0.778795f, 7.050506f, -0.089284f,
 2.423346f, 3.230515f, -2.110472f,
 2.423346f, 3.230515f, -2.110472f,
 1.829774f, 3.523937f, -3.220937f,
 1.829774f, 3.523937f, -3.220937f,
 0.784174f, 3.654787f, -2.845352f,
 0.784174f, 3.654787f, -2.845352f,
 0.331459f, 3.180117f, -3.484396f,
 0.784174f, 3.654787f, -2.845352f,
 0.331459f, 3.180117f, -3.484396f,
 1.509076f, 3.091585f, -1.510219f,
 1.509076f, 3.091585f, -1.510219f,
 0.331459f, 3.180117f, -3.484396f,
 1.981336f, 0.785905f, -0.342686f,
 2.423346f, 3.230515f, -2.110472f,
 1.509076f, 3.091585f, -1.510219f,
 1.509076f, 3.091585f, -1.510219f,
 1.981336f, 0.785905f, -0.342686f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.563055f, -0.449516f, 0.693473f},
{ -0.597337f, -0.541953f, 0.591165f},
{ -0.603345f, -0.561095f, 0.566699f},
{ -0.609996f, -0.584200f, 0.535365f},
{ 0.483700f, -0.419965f, 0.767895f},
{ 0.552336f, -0.550508f, 0.625992f},
{ 0.541241f, -0.527807f, 0.654582f},
{ 0.564860f, -0.577286f, 0.589638f},
{ 0.206043f, -0.950391f, 0.233030f},
{ -0.082352f, -0.453218f, 0.887588f},
{ -0.711918f, -0.648401f, 0.269721f},
{ -0.775232f, -0.323316f, 0.542662f},
{ -0.738545f, 0.381126f, 0.556142f},
{ -0.021027f, 0.602784f, 0.797627f},
{ -0.984556f, -0.173610f, -0.022584f},
{ -0.845410f, 0.490335f, 0.211785f},
{ -0.224713f, 0.877813f, 0.423022f},
{ -0.855646f, -0.515209f, -0.049299f},
{ 0.133423f, -0.988657f, -0.068965f},
{ -0.334647f, 0.898530f, 0.283998f},
{ -0.075943f, 0.628414f, -0.774163f},
{ -0.876699f, 0.471078f, 0.097382f},
{ -0.408592f, 0.057275f, -0.910918f},
{ -0.555983f, -0.236968f, 0.796699f},
{ -0.034655f, -0.253400f, 0.966741f},
{ -0.502135f, 0.268239f, -0.822136f},
{ -0.543009f, -0.136221f, -0.828604f},
{ -0.915925f, -0.376244f, 0.139723f},
{ 0.273426f, -0.598912f, 0.752690f},
{ 0.416560f, -0.464378f, 0.781557f},
{ -0.349624f, -0.211109f, 0.912796f},
{ 0.053287f, -0.242728f, 0.968630f},
{ -0.812474f, 0.170466f, -0.557519f},
{ -0.908565f, -0.381114f, 0.171061f},
{ -0.405301f, -0.365679f, -0.837860f},
{ -0.204693f, -0.960382f, -0.189125f},
{ -0.206195f, 0.081978f, 0.975071f},
{ -0.994239f, 0.047838f, -0.095917f},
{ 0.675774f, -0.619451f, 0.399513f},
{ 0.066948f, -0.728941f, -0.681295f},
{ 0.241780f, -0.262003f, -0.934290f},
{ -0.602494f, 0.528624f, -0.597961f},
{ -0.710363f, 0.407661f, 0.573757f},
{ -0.202497f, 0.855639f, -0.476315f},
{ -0.797391f, 0.004810f, 0.603445f},
{ 0.689900f, -0.631592f, 0.353738f},
{ 0.612952f, -0.032905f, -0.789435f},
{ -0.207289f, -0.818914f, 0.535174f},
{ -0.877861f, 0.326749f, -0.350135f},
{ -0.840664f, 0.007944f, -0.541499f},
{ 0.685367f, -0.451055f, -0.571683f},
{ 0.068773f, -0.549761f, -0.832486f},
{ -0.244419f, 0.746676f, 0.618655f},
{ -0.606844f, 0.392797f, 0.690979f},
{ 0.681845f, -0.100377f, 0.724577f},
{ 0.961392f, -0.273762f, 0.027911f},
{ 0.888540f, 0.028754f, 0.457897f},
{ 0.628054f, 0.560639f, -0.539659f},
{ -0.706939f, 0.611556f, -0.355296f},
{ -0.857533f, 0.174753f, 0.483837f},
{ -0.004067f, -0.829633f, -0.558294f},
{ -0.001133f, -0.829042f, -0.559186f},
{ -0.003280f, -0.829475f, -0.558534f},
{ -0.000385f, -0.828890f, -0.559412f},
{ -0.913754f, 0.402940f, -0.051896f},
{ -0.440377f, 0.440343f, 0.782411f},
{ 0.894453f, 0.392986f, -0.213344f},
{ 0.407901f, 0.434522f, 0.802999f},
{ 0.768379f, -0.443420f, 0.461488f},
{ 0.699208f, -0.350095f, 0.623332f},
{ 0.530950f, 0.433469f, 0.728146f},
{ 0.282979f, 0.763378f, 0.580669f},
{ 0.955898f, -0.087629f, 0.280320f},
{ 0.856309f, -0.513464f, 0.055581f},
{ 0.826173f, 0.561899f, 0.041328f},
{ 0.927355f, 0.003408f, -0.374168f},
{ 0.773402f, -0.098655f, 0.626193f},
{ 0.129921f, 0.127930f, -0.983237f},
{ 0.897700f, -0.273752f, -0.345246f},
{ 0.845965f, -0.429743f, 0.315696f},
{ 0.863710f, -0.452770f, 0.221368f},
{ 0.604600f, -0.421099f, -0.676117f},
{ 0.011207f, 0.204158f, -0.978874f},
{ -0.471770f, 0.527015f, 0.706886f},
{ 0.079925f, -0.611164f, 0.787458f},
{ 0.339178f, 0.898245f, -0.279488f},
{ 0.899265f, -0.417662f, -0.129928f},
{ 0.064957f, 0.415639f, -0.907207f},
{ 0.572459f, -0.603042f, -0.555545f},
{ 0.824341f, 0.031601f, 0.565210f},
{ -0.287288f, 0.845960f, 0.449240f},
{ -0.624738f, 0.589618f, -0.511911f},
{ -0.010621f, -0.664920f, 0.746839f},
{ 0.034109f, -0.633091f, -0.773325f},
{ 0.804647f, -0.331876f, 0.492343f},
{ -0.972941f, -0.051674f, -0.225203f},
{ 0.263354f, 0.511883f, -0.817692f},
{ -0.986239f, 0.081758f, -0.143693f},
{ 0.555606f, 0.496946f, -0.666593f},
{ 0.939544f, 0.172997f, 0.295515f},
{ 0.980402f, -0.116418f, 0.158927f},
{ -0.506261f, -0.396973f, 0.765580f},
{ -0.314587f, -0.553219f, 0.771352f},
{ -0.736322f, 0.671931f, -0.079615f},
{ -0.628535f, -0.011644f, 0.777694f},
{ 0.398852f, 0.704964f, -0.586467f},
{ 0.985984f, 0.108979f, -0.126332f},
{ -0.279908f, -0.828455f, -0.485091f},
{ -0.279568f, -0.828523f, -0.485171f},
{ -0.278588f, -0.828719f, -0.485401f},
{ -0.278229f, -0.828790f, -0.485485f},
{ 0.748132f, 0.459830f, 0.478388f},
{ 0.729129f, 0.445239f, -0.519743f},
{ -0.852682f, 0.465435f, 0.237282f},
{ 0.074474f, 0.462600f, 0.883433f},
{ 0.279360f, -0.959979f, -0.019977f},
{ 0.265511f, -0.963814f, -0.023803f},
{ 0.274189f, -0.961438f, -0.021408f},
{ 0.260851f, -0.965053f, -0.025085f},
{ -0.777750f, 0.442868f, 0.446064f},
{ -0.778128f, 0.442452f, 0.445817f},
{ -0.778093f, 0.442490f, 0.445840f},
{ -0.778466f, 0.442080f, 0.445597f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagAttack4.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105