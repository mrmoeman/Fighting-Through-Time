package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnardeathc {

static String TextureName = "RagDeath3.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -2.983249f, 10.384083f, -4.524678f,
 -1.534261f, 11.775273f, -4.798053f,
 -3.369245f, 14.945515f, -6.940020f,
 -4.790975f, 11.790649f, -6.308529f,
 0.524882f, 10.387959f, -5.299149f,
 -0.923117f, 11.775539f, -4.929167f,
 -0.135186f, 14.944184f, -7.647120f,
 1.364412f, 11.782798f, -7.783780f,
 -2.770314f, 11.738005f, -4.789261f,
 -2.519054f, 11.270606f, -3.581738f,
 -1.958548f, 9.350422f, -2.546655f,
 0.112126f, 8.012359f, -1.934792f,
 -0.921142f, 11.554815f, -3.395193f,
 -1.372670f, 12.495512f, -5.528925f,
 -2.562488f, 10.061099f, -4.213587f,
 -3.275743f, 10.232597f, -5.555637f,
 -2.057120f, 10.712995f, -7.136479f,
 0.033721f, 5.208336f, -3.513826f,
 -1.417720f, 7.451433f, -3.284474f,
 -1.376309f, 4.678331f, -1.022538f,
 -1.834184f, 3.102965f, -3.236041f,
 -3.126822f, 9.959654f, -2.933860f,
 -5.955685f, 6.413945f, -4.390163f,
 -0.572024f, 11.232502f, -4.542007f,
 -2.688175f, 6.882152f, -8.220654f,
 0.023544f, 1.859191f, -3.199819f,
 0.970635f, 4.192565f, 0.223120f,
 -5.889815f, 9.427130f, -3.626385f,
 -2.480188f, 10.979018f, -7.872124f,
 -1.362061f, 5.792715f, -2.643277f,
 0.283460f, 5.950009f, -3.081265f,
 -1.012321f, 4.370275f, -5.338442f,
 -2.167879f, 4.710593f, -4.145787f,
 -2.197562f, 5.428510f, -3.184492f,
 -2.177651f, 3.380633f, -1.557675f,
 0.262621f, 2.199475f, -0.965544f,
 -5.247325f, 7.817466f, -2.910132f,
 -3.561910f, 6.419255f, -2.787839f,
 -4.654172f, 5.187295f, -1.978789f,
 -6.169515f, 6.018089f, -2.032903f,
 -2.912836f, 7.449363f, -0.112177f,
 -1.980289f, 6.498719f, -0.291141f,
 -2.690240f, 5.689340f, 0.243690f,
 -3.626191f, 6.639100f, 0.432071f,
 -4.701651f, 8.122694f, -5.516011f,
 -4.047600f, 10.042388f, -4.400356f,
 -3.813746f, 7.159504f, -4.583754f,
 -3.149669f, 8.328160f, -3.314018f,
 -0.878410f, 1.931396f, -0.144350f,
 -0.794919f, 3.532333f, 0.854635f,
 -1.968772f, 2.278416f, -0.041547f,
 -1.906684f, 3.522636f, 0.743043f,
 -1.032799f, -0.109030f, 0.340454f,
 -0.889356f, 1.121128f, 4.428916f,
 -2.386399f, -0.059825f, 0.493838f,
 -2.384302f, 1.105883f, 4.376156f,
 -0.174034f, 3.434254f, -2.994367f,
 -1.058989f, 3.628623f, -2.599932f,
 -0.857775f, 4.427294f, -1.836290f,
 0.233183f, 4.236339f, -2.091595f,
 -2.132617f, 1.755440f, 1.516064f,
 -2.197545f, 0.865832f, 0.685293f,
 -1.105402f, 0.792625f, 0.460685f,
 -1.039868f, 1.748501f, 1.604852f,
 0.212593f, 11.739144f, -5.438945f,
 0.469138f, 11.271389f, -4.219200f,
 0.376276f, 9.350422f, -3.043882f,
 0.725824f, 10.061108f, -6.111990f,
 -0.079273f, 10.232522f, -7.400055f,
 0.956827f, 7.451444f, -4.654254f,
 2.945789f, 4.445520f, -2.704650f,
 1.590667f, 3.136048f, -5.091507f,
 2.524539f, 10.383491f, -6.827794f,
 1.975994f, 6.309833f, -9.169983f,
 2.253063f, 9.326514f, -9.668962f,
 1.488093f, 5.792609f, -4.287915f,
 0.630663f, 4.713624f, -5.758281f,
 1.436586f, 5.428716f, -5.281907f,
 2.961438f, 3.150225f, -3.777971f,
 3.809729f, 8.236245f, -9.068118f,
 4.797668f, 7.016707f, -7.511741f,
 4.098220f, 5.478992f, -8.268631f,
 3.208444f, 6.103452f, -9.598330f,
 7.172654f, 6.594583f, -9.226107f,
 7.485312f, 5.899976f, -8.117420f,
 7.029839f, 4.898485f, -8.612479f,
 6.714654f, 5.588883f, -9.724283f,
 0.667145f, 8.122501f, -8.615756f,
 1.307309f, 10.048074f, -7.517753f,
 1.030869f, 7.159504f, -7.380794f,
 1.807128f, 8.333503f, -6.170881f,
 1.396824f, 2.259223f, -2.100603f,
 2.062674f, 2.339789f, -0.392834f,
 2.561184f, 2.137014f, -2.196895f,
 3.058634f, 2.232852f, -0.915588f,
 0.675244f, -0.096863f, -3.024457f,
 2.607098f, 1.121118f, 0.604801f,
 1.925963f, -0.055145f, -3.565623f,
 3.875430f, 1.105286f, -0.187843f,
 0.541858f, 3.471012f, -3.482594f,
 1.418188f, 3.648845f, -4.072251f,
 1.960968f, 4.392847f, -3.357375f,
 1.015699f, 4.296839f, -2.626501f,
 2.384154f, 1.329992f, -2.174378f,
 1.867512f, 0.867758f, -3.292740f,
 0.807186f, 0.804949f, -2.946054f,
 1.437227f, 1.453639f, -1.636055f,
 3.071900f, 1.712762f, -11.138261f,
 7.068712f, -0.177453f, -11.405580f,
 6.985595f, 9.783667f, -7.186167f,
 10.987904f, 7.842599f, -7.382437f,
 -3.255977f, 9.787711f, -3.910541f,
 0.383442f, 9.613627f, 0.853546f,
 -3.503304f, 5.200885f, 3.597803f,
 -7.167527f, 5.418839f, -1.156294f,
 -5.889815f, 9.427130f, -3.626385f,
 -2.480188f, 10.979018f, -7.872124f,
 -2.480188f, 10.979018f, -7.872124f,
 -2.197562f, 5.428510f, -3.184492f,
 -2.197562f, 5.428510f, -3.184492f,
 -5.889815f, 9.427130f, -3.626385f,
 -2.177651f, 3.380633f, -1.557675f,
 -2.197562f, 5.428510f, -3.184492f,
 -2.197562f, 5.428510f, -3.184492f,
 -2.177651f, 3.380633f, -1.557675f,
 0.262621f, 2.199475f, -0.965544f,
 -2.690240f, 5.689340f, 0.243690f,
 -3.626191f, 6.639100f, 0.432071f,
 -3.626191f, 6.639100f, 0.432071f,
 -2.690240f, 5.689340f, 0.243690f,
 -2.690240f, 5.689340f, 0.243690f,
 -4.654172f, 5.187295f, -1.978789f,
 -3.626191f, 6.639100f, 0.432071f,
 -3.626191f, 6.639100f, 0.432071f,
 -4.654172f, 5.187295f, -1.978789f,
 -3.813746f, 7.159504f, -4.583754f,
 -3.813746f, 7.159504f, -4.583754f,
 -0.878410f, 1.931396f, -0.144350f,
 -0.878410f, 1.931396f, -0.144350f,
 -1.105402f, 0.792625f, 0.460685f,
 -0.174034f, 3.434254f, -2.994367f,
 -0.878410f, 1.931396f, -0.144350f,
 -0.878410f, 1.931396f, -0.144350f,
 -2.197545f, 0.865832f, 0.685293f,
 -2.132617f, 1.755440f, 1.516064f,
 -2.132617f, 1.755440f, 1.516064f,
 -1.032799f, -0.109030f, 0.340454f,
 -1.105402f, 0.792625f, 0.460685f,
 -1.105402f, 0.792625f, 0.460685f,
 -2.197545f, 0.865832f, 0.685293f,
 -0.889356f, 1.121128f, 4.428916f,
 -1.032799f, -0.109030f, 0.340454f,
 -1.039868f, 1.748501f, 1.604852f,
 -1.039868f, 1.748501f, 1.604852f,
 -1.032799f, -0.109030f, 0.340454f,
 -1.105402f, 0.792625f, 0.460685f,
 -2.132617f, 1.755440f, 1.516064f,
 -1.039868f, 1.748501f, 1.604852f,
 -1.039868f, 1.748501f, 1.604852f,
 -0.889356f, 1.121128f, 4.428916f,
 0.112126f, 8.012359f, -1.934792f,
 -0.921142f, 11.554815f, -3.395193f,
 -0.921142f, 11.554815f, -3.395193f,
 -0.921142f, 11.554815f, -3.395193f,
 -0.921142f, 11.554815f, -3.395193f,
 -1.372670f, 12.495512f, -5.528925f,
 -2.057120f, 10.712995f, -7.136479f,
 -2.057120f, 10.712995f, -7.136479f,
 -1.372670f, 12.495512f, -5.528925f,
 0.112126f, 8.012359f, -1.934792f,
 0.112126f, 8.012359f, -1.934792f,
 0.033721f, 5.208336f, -3.513826f,
 -2.480188f, 10.979018f, -7.872124f,
 -2.688175f, 6.882152f, -8.220654f,
 -2.688175f, 6.882152f, -8.220654f,
 2.253063f, 9.326514f, -9.668962f,
 -2.480188f, 10.979018f, -7.872124f,
 -2.480188f, 10.979018f, -7.872124f,
 -0.572024f, 11.232502f, -4.542007f,
 -1.012321f, 4.370275f, -5.338442f,
 -2.688175f, 6.882152f, -8.220654f,
 -2.688175f, 6.882152f, -8.220654f,
 0.283460f, 5.950009f, -3.081265f,
 0.283460f, 5.950009f, -3.081265f,
 0.970635f, 4.192565f, 0.223120f,
 2.253063f, 9.326514f, -9.668962f,
 1.436586f, 5.428716f, -5.281907f,
 1.436586f, 5.428716f, -5.281907f,
 -1.012321f, 4.370275f, -5.338442f,
 -1.012321f, 4.370275f, -5.338442f,
 0.023544f, 1.859191f, -3.199819f,
 -0.572024f, 11.232502f, -4.542007f,
 0.283460f, 5.950009f, -3.081265f,
 0.283460f, 5.950009f, -3.081265f,
 2.961438f, 3.150225f, -3.777971f,
 1.436586f, 5.428716f, -5.281907f,
 1.436586f, 5.428716f, -5.281907f,
 0.970635f, 4.192565f, 0.223120f,
 0.262621f, 2.199475f, -0.965544f,
 0.262621f, 2.199475f, -0.965544f,
 2.961438f, 3.150225f, -3.777971f,
 0.262621f, 2.199475f, -0.965544f,
 0.023544f, 1.859191f, -3.199819f,
 0.023544f, 1.859191f, -3.199819f,
 6.714654f, 5.588883f, -9.724283f,
 6.714654f, 5.588883f, -9.724283f,
 7.029839f, 4.898485f, -8.612479f,
 7.029839f, 4.898485f, -8.612479f,
 7.029839f, 4.898485f, -8.612479f,
 4.098220f, 5.478992f, -8.268631f,
 6.714654f, 5.588883f, -9.724283f,
 6.714654f, 5.588883f, -9.724283f,
 1.030869f, 7.159504f, -7.380794f,
 1.030869f, 7.159504f, -7.380794f,
 4.098220f, 5.478992f, -8.268631f,
 0.807186f, 0.804949f, -2.946054f,
 1.396824f, 2.259223f, -2.100603f,
 1.396824f, 2.259223f, -2.100603f,
 1.396824f, 2.259223f, -2.100603f,
 1.396824f, 2.259223f, -2.100603f,
 0.541858f, 3.471012f, -3.482594f,
 2.384154f, 1.329992f, -2.174378f,
 2.384154f, 1.329992f, -2.174378f,
 1.867512f, 0.867758f, -3.292740f,
 1.867512f, 0.867758f, -3.292740f,
 0.807186f, 0.804949f, -2.946054f,
 0.807186f, 0.804949f, -2.946054f,
 0.675244f, -0.096863f, -3.024457f,
 0.807186f, 0.804949f, -2.946054f,
 0.675244f, -0.096863f, -3.024457f,
 1.437227f, 1.453639f, -1.636055f,
 1.437227f, 1.453639f, -1.636055f,
 0.675244f, -0.096863f, -3.024457f,
 2.607098f, 1.121118f, 0.604801f,
 2.384154f, 1.329992f, -2.174378f,
 1.437227f, 1.453639f, -1.636055f,
 1.437227f, 1.453639f, -1.636055f,
 2.607098f, 1.121118f, 0.604801f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.356487f, 0.523381f, 0.773944f},
{ -0.382585f, 0.407832f, 0.829037f},
{ -0.387480f, 0.381314f, 0.839321f},
{ -0.393169f, 0.347569f, 0.851243f},
{ 0.654659f, 0.542916f, 0.525988f},
{ 0.725470f, 0.366933f, 0.582284f},
{ 0.714189f, 0.401528f, 0.573332f},
{ 0.737762f, 0.324364f, 0.592026f},
{ 0.380561f, -0.154376f, 0.911779f},
{ 0.130408f, 0.666825f, 0.733715f},
{ -0.518094f, 0.053661f, 0.853639f},
{ -0.602556f, 0.458743f, 0.653055f},
{ -0.708578f, 0.705328f, 0.020738f},
{ -0.030194f, 0.958887f, -0.282179f},
{ -0.945071f, -0.131654f, 0.299178f},
{ -0.910577f, 0.383817f, -0.153409f},
{ -0.203031f, 0.730365f, -0.652185f},
{ -0.598785f, -0.420293f, 0.681771f},
{ 0.601225f, -0.404790f, 0.688966f},
{ -0.479019f, 0.590791f, -0.649236f},
{ -0.539260f, -0.301822f, -0.786195f},
{ -0.894317f, 0.416635f, 0.163134f},
{ -0.890249f, -0.446006f, -0.092387f},
{ -0.078250f, 0.594561f, 0.800234f},
{ 0.317146f, 0.775643f, 0.545707f},
{ -0.330516f, -0.735046f, -0.592002f},
{ -0.542728f, -0.799571f, -0.257165f},
{ -0.566364f, -0.234677f, 0.790037f},
{ 0.393852f, 0.244534f, 0.886050f},
{ 0.457802f, 0.527067f, 0.715973f},
{ -0.413290f, 0.478956f, 0.774462f},
{ -0.079383f, 0.327541f, 0.941496f},
{ -0.710973f, -0.623016f, -0.326142f},
{ -0.793761f, -0.400053f, 0.458149f},
{ -0.074688f, -0.972686f, -0.219780f},
{ 0.145718f, -0.812000f, 0.565175f},
{ 0.264738f, 0.953191f, 0.146082f},
{ -0.560248f, 0.145394f, 0.815465f},
{ 0.971954f, -0.021259f, -0.234208f},
{ 0.287593f, -0.903179f, 0.318683f},
{ -0.112622f, -0.985766f, -0.124830f},
{ -0.968652f, -0.166531f, 0.184340f},
{ -0.611925f, 0.736891f, 0.287298f},
{ -0.908749f, -0.052547f, -0.414022f},
{ -0.720747f, 0.609638f, 0.329949f},
{ 0.937914f, -0.103502f, -0.331066f},
{ 0.040376f, -0.794859f, -0.605450f},
{ 0.368016f, 0.365961f, 0.854773f},
{ -0.864477f, -0.176881f, -0.470523f},
{ -0.793195f, -0.394378f, -0.464012f},
{ 0.772842f, -0.599442f, -0.208289f},
{ 0.564312f, -0.779597f, -0.271625f},
{ -0.513781f, 0.854299f, 0.078756f},
{ -0.742247f, 0.624989f, 0.241781f},
{ 0.749524f, 0.372578f, 0.547174f},
{ 0.979160f, -0.018982f, 0.202199f},
{ 0.889433f, 0.390802f, 0.237029f},
{ 0.663014f, -0.158384f, -0.731660f},
{ -0.743652f, 0.020242f, -0.668260f},
{ -0.858580f, 0.480797f, 0.177975f},
{ -0.002152f, -0.957570f, 0.288194f},
{ -0.000742f, -0.957720f, 0.287703f},
{ -0.001773f, -0.957610f, 0.288062f},
{ -0.000382f, -0.957757f, 0.287577f},
{ -0.916983f, 0.204271f, -0.342661f},
{ -0.429520f, 0.888344f, 0.162353f},
{ 0.905519f, 0.084076f, -0.415893f},
{ 0.416001f, 0.892165f, 0.176026f},
{ 0.885249f, 0.237220f, 0.400076f},
{ 0.852948f, 0.398133f, 0.337595f},
{ 0.559173f, 0.774881f, -0.294763f},
{ 0.298159f, 0.734979f, -0.609021f},
{ 0.971662f, 0.231026f, -0.049996f},
{ 0.967320f, -0.014423f, 0.253147f},
{ 0.474882f, 0.285327f, -0.832512f},
{ 0.367495f, -0.564243f, -0.739309f},
{ 0.805668f, 0.572618f, 0.151686f},
{ 0.043457f, -0.792896f, -0.607805f},
{ 0.969060f, -0.196731f, -0.149061f},
{ 0.851415f, 0.337895f, 0.401148f},
{ 0.873978f, 0.307173f, 0.376573f},
{ 0.862307f, -0.497911f, -0.092252f},
{ 0.224291f, -0.633241f, -0.740743f},
{ 0.563742f, 0.765202f, -0.310904f},
{ 0.587851f, 0.135654f, 0.797514f},
{ 0.102322f, -0.284957f, -0.953064f},
{ 0.136144f, -0.928221f, 0.346223f},
{ -0.312151f, -0.353594f, -0.881778f},
{ -0.179330f, -0.882670f, 0.434435f},
{ 0.486492f, 0.848862f, -0.206781f},
{ 0.299078f, 0.795465f, -0.527055f},
{ -0.393514f, 0.119223f, -0.911555f},
{ 0.366891f, 0.298726f, 0.880996f},
{ -0.370087f, -0.861471f, 0.347713f},
{ 0.568521f, 0.142621f, 0.810212f},
{ -0.774477f, -0.628496f, -0.071963f},
{ 0.452980f, -0.525665f, -0.720059f},
{ -0.978447f, -0.175209f, -0.109285f},
{ 0.754763f, -0.089458f, -0.649869f},
{ 0.861653f, 0.507153f, -0.018701f},
{ 0.791711f, 0.316169f, 0.522715f},
{ -0.311393f, 0.610150f, 0.728527f},
{ -0.096920f, 0.360910f, 0.927551f},
{ -0.805563f, 0.389088f, -0.446854f},
{ -0.811063f, 0.212774f, 0.544889f},
{ 0.176718f, 0.457360f, -0.871546f},
{ 0.869023f, 0.336599f, -0.362629f},
{ 0.142443f, -0.958471f, 0.247071f},
{ 0.141777f, -0.958537f, 0.247198f},
{ 0.139856f, -0.958724f, 0.247565f},
{ 0.139156f, -0.958792f, 0.247698f},
{ 0.286073f, 0.955702f, -0.069255f},
{ 0.434505f, 0.302542f, -0.848336f},
{ -0.990374f, 0.107632f, -0.087028f},
{ -0.200898f, 0.948324f, 0.245603f},
{ -0.125925f, -0.394964f, 0.910025f},
{ -0.135868f, -0.384095f, 0.913242f},
{ -0.129622f, -0.390937f, 0.911244f},
{ -0.139501f, -0.380094f, 0.914367f},
{ -0.523331f, 0.737577f, 0.426739f},
{ -0.523116f, 0.734704f, 0.431927f},
{ -0.523136f, 0.734973f, 0.431444f},
{ -0.522906f, 0.732090f, 0.436593f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagDeath3.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105