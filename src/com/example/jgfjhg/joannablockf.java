package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannablockf {

static String TextureName = "joannablock6.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.239315f, 0.601335f, -1.819554f,
 0.675701f, 0.838188f, -2.168127f,
 1.068328f, 0.767351f, -1.689375f,
 0.629063f, 0.534641f, -1.374087f,
 0.163372f, 0.063275f, -1.953946f,
 0.660759f, 0.061376f, -2.279056f,
 1.789414f, 0.061375f, -0.479526f,
 1.289612f, 0.061368f, -0.167093f,
 -0.281144f, 3.450869f, -0.112222f,
 0.377676f, 3.702831f, -0.429713f,
 0.953799f, 3.424045f, 0.163573f,
 0.372664f, 3.132170f, 0.547021f,
 0.665474f, 2.069695f, -0.243784f,
 1.055099f, 2.266570f, -0.528438f,
 0.642899f, 2.484869f, -0.921502f,
 0.232504f, 2.305740f, -0.599085f,
 0.902587f, 7.970713f, 1.588671f,
 0.542597f, 6.183809f, 1.550111f,
 -0.232409f, 7.036581f, 1.174277f,
 0.252967f, 7.894795f, 1.206764f,
 0.285364f, 7.672959f, 2.652577f,
 0.589523f, 6.744497f, 0.843221f,
 0.445820f, 7.092484f, 0.380076f,
 -0.152613f, 5.412947f, 0.629149f,
 0.486630f, 5.267425f, 0.307679f,
 0.851630f, 4.910728f, 0.635027f,
 0.464318f, 4.659162f, 1.246780f,
 0.252536f, 8.967052f, 2.735061f,
 0.889841f, 8.719444f, 2.389371f,
 0.890354f, 7.862454f, 2.336840f,
 0.690967f, 7.445210f, 1.712305f,
 1.214266f, 7.167212f, 1.265463f,
 0.276295f, 9.025420f, 1.309489f,
 0.902243f, 8.749835f, 1.629915f,
 0.513445f, 7.592453f, 1.274432f,
 1.455125f, 7.249404f, 0.937937f,
 0.747538f, 7.705809f, 1.108001f,
 0.878606f, 7.796470f, 0.641300f,
 1.870153f, 6.388133f, 1.302604f,
 2.096490f, 6.661819f, 1.462967f,
 2.403686f, 6.609037f, 1.229306f,
 2.225844f, 6.340059f, 1.050636f,
 0.530030f, 7.248429f, 2.095719f,
 0.277203f, 7.518370f, 1.232530f,
 1.477481f, 5.782470f, 3.021366f,
 1.868483f, 6.375951f, 2.911431f,
 2.329293f, 6.169569f, 2.800406f,
 2.230484f, 5.551403f, 2.787895f,
 -0.947156f, 2.739140f, -0.256843f,
 1.356980f, 3.319910f, -0.015647f,
 0.559877f, 3.467981f, -0.943622f,
 0.346616f, 3.029117f, 1.370826f,
 0.210560f, 6.949949f, 2.864671f,
 0.228751f, 6.171188f, 2.927392f,
 -0.171314f, 6.922120f, 3.130132f,
 -0.099867f, 6.152583f, 3.171919f,
 -0.372467f, 8.719145f, 2.369903f,
 -0.360501f, 8.749375f, 1.611165f,
 -0.152217f, 4.909496f, 1.635442f,
 -0.474478f, 5.266872f, 1.268255f,
 -0.071324f, 6.262471f, 2.279519f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.221997f, 7.499599f, 1.777775f,
 0.020237f, 7.355618f, 2.144211f,
 -0.372592f, 7.862247f, 2.316619f,
 -0.360371f, 7.970219f, 1.569613f,
 1.008283f, 6.773220f, 2.493628f,
 1.300748f, 6.039899f, 2.263620f,
 1.179306f, 6.400850f, 3.086714f,
 1.375808f, 5.963310f, 2.888032f,
 -0.003640f, 5.239484f, 3.070369f,
 -0.095434f, 5.010228f, 3.120705f,
 0.134805f, 5.040155f, 3.403454f,
 0.230315f, 5.242614f, 3.369584f,
 -1.210696f, 3.691244f, 2.016222f,
 -1.485735f, 3.041665f, 1.149019f,
 -0.302662f, 0.621306f, 1.716174f,
 -0.883275f, 0.620620f, 1.645372f,
 -0.989798f, 0.728329f, 2.249826f,
 -0.408601f, 0.736005f, 2.342120f,
 -0.284268f, 0.061810f, 1.590959f,
 -0.863753f, 0.061377f, 1.504708f,
 -1.227994f, 0.061374f, 3.597429f,
 -0.647511f, 0.061373f, 3.695783f,
 -0.059857f, 3.189219f, 1.101824f,
 -0.818404f, 3.275643f, 1.120832f,
 -0.934220f, 3.809329f, 1.799973f,
 -0.185395f, 3.799211f, 1.896825f,
 -0.531047f, 2.643746f, 2.670052f,
 -1.040525f, 2.645564f, 2.611816f,
 -0.949411f, 2.490613f, 2.051107f,
 -0.436593f, 2.476752f, 2.018117f,
 -2.605531f, 10.011979f, 2.988818f,
 -3.044498f, 9.164411f, 3.627834f,
 3.232224f, 5.702020f, 2.029172f,
 2.743678f, 4.925975f, 2.572784f,
 0.232504f, 2.305740f, -0.599085f,
 0.232504f, 2.305740f, -0.599085f,
 -0.281144f, 3.450869f, -0.112222f,
 0.239315f, 0.601335f, -1.819554f,
 0.163372f, 0.063275f, -1.953946f,
 0.163372f, 0.063275f, -1.953946f,
 0.239315f, 0.601335f, -1.819554f,
 0.163372f, 0.063275f, -1.953946f,
 0.629063f, 0.534641f, -1.374087f,
 0.629063f, 0.534641f, -1.374087f,
 0.163372f, 0.063275f, -1.953946f,
 1.289612f, 0.061368f, -0.167093f,
 0.629063f, 0.534641f, -1.374087f,
 1.289612f, 0.061368f, -0.167093f,
 1.289612f, 0.061368f, -0.167093f,
 1.068328f, 0.767351f, -1.689375f,
 1.068328f, 0.767351f, -1.689375f,
 1.068328f, 0.767351f, -1.689375f,
 1.068328f, 0.767351f, -1.689375f,
 0.675701f, 0.838188f, -2.168127f,
 0.675701f, 0.838188f, -2.168127f,
 0.232504f, 2.305740f, -0.599085f,
 0.232504f, 2.305740f, -0.599085f,
 0.675701f, 0.838188f, -2.168127f,
 0.239315f, 0.601335f, -1.819554f,
 0.690967f, 7.445210f, 1.712305f,
 0.690967f, 7.445210f, 1.712305f,
 0.589523f, 6.744497f, 0.843221f,
 0.589523f, 6.744497f, 0.843221f,
 0.690967f, 7.445210f, 1.712305f,
 0.690967f, 7.445210f, 1.712305f,
 0.513445f, 7.592453f, 1.274432f,
 0.513445f, 7.592453f, 1.274432f,
 0.513445f, 7.592453f, 1.274432f,
 0.690967f, 7.445210f, 1.712305f,
 0.690967f, 7.445210f, 1.712305f,
 0.589523f, 6.744497f, 0.843221f,
 0.445820f, 7.092484f, 0.380076f,
 1.870153f, 6.388133f, 1.302604f,
 1.870153f, 6.388133f, 1.302604f,
 0.445820f, 7.092484f, 0.380076f,
 0.445820f, 7.092484f, 0.380076f,
 0.589523f, 6.744497f, 0.843221f,
 1.477481f, 5.782470f, 3.021366f,
 1.477481f, 5.782470f, 3.021366f,
 1.870153f, 6.388133f, 1.302604f,
 2.230484f, 5.551403f, 2.787895f,
 2.230484f, 5.551403f, 2.787895f,
 1.870153f, 6.388133f, 1.302604f,
 0.445820f, 7.092484f, 0.380076f,
 0.445820f, 7.092484f, 0.380076f,
 0.513445f, 7.592453f, 1.274432f,
 0.513445f, 7.592453f, 1.274432f,
 2.230484f, 5.551403f, 2.787895f,
 -0.947156f, 2.739140f, -0.256843f,
 0.559877f, 3.467981f, -0.943622f,
 0.346616f, 3.029117f, 1.370826f,
 0.346616f, 3.029117f, 1.370826f,
 0.559877f, 3.467981f, -0.943622f,
 1.356980f, 3.319910f, -0.015647f,
 0.252536f, 8.967052f, 2.735061f,
 0.276295f, 9.025420f, 1.309489f,
 0.276295f, 9.025420f, 1.309489f,
 0.542597f, 6.183809f, 1.550111f,
 0.020237f, 7.355618f, 2.144211f,
 0.542597f, 6.183809f, 1.550111f,
 0.530030f, 7.248429f, 2.095719f,
 0.020237f, 7.355618f, 2.144211f,
 -0.071324f, 6.262471f, 2.279519f,
 -0.071324f, 6.262471f, 2.279519f,
 0.530030f, 7.248429f, 2.095719f,
 0.285364f, 7.672959f, 2.652577f,
 0.020237f, 7.355618f, 2.144211f,
 0.285364f, 7.672959f, 2.652577f,
 0.020237f, 7.355618f, 2.144211f,
 0.277203f, 7.518370f, 1.232530f,
 -0.221997f, 7.499599f, 1.777775f,
 0.252967f, 7.894795f, 1.206764f,
 -0.221997f, 7.499599f, 1.777775f,
 0.252967f, 7.894795f, 1.206764f,
 -0.221997f, 7.499599f, 1.777775f,
 0.020237f, 7.355618f, 2.144211f,
 0.020237f, 7.355618f, 2.144211f,
 0.464318f, 4.659162f, 1.246780f,
 0.542597f, 6.183809f, 1.550111f,
 0.542597f, 6.183809f, 1.550111f,
 -0.071324f, 6.262471f, 2.279519f,
 -0.003640f, 5.239484f, 3.070369f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.003640f, 5.239484f, 3.070369f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.071324f, 6.262471f, 2.279519f,
 1.008283f, 6.773220f, 2.493628f,
 1.008283f, 6.773220f, 2.493628f,
 1.300748f, 6.039899f, 2.263620f,
 -0.003640f, 5.239484f, 3.070369f,
 1.300748f, 6.039899f, 2.263620f,
 -0.003640f, 5.239484f, 3.070369f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.820715f, 6.518521f, 2.426080f,
 -0.221997f, 7.499599f, 1.777775f,
 -0.232409f, 7.036581f, 1.174277f,
 -0.221997f, 7.499599f, 1.777775f,
 0.277203f, 7.518370f, 1.232530f,
 -0.232409f, 7.036581f, 1.174277f,
 1.300748f, 6.039899f, 2.263620f,
 0.252967f, 7.894795f, 1.206764f,
 0.276295f, 9.025420f, 1.309489f,
 0.252967f, 7.894795f, 1.206764f,
 0.252536f, 8.967052f, 2.735061f,
 0.285364f, 7.672959f, 2.652577f,
 0.285364f, 7.672959f, 2.652577f,
 -0.152613f, 5.412947f, 0.629149f,
 -0.232409f, 7.036581f, 1.174277f,
 -0.152613f, 5.412947f, 0.629149f,
 -0.947156f, 2.739140f, -0.256843f,
 -0.152613f, 5.412947f, 0.629149f,
 -0.152613f, 5.412947f, 0.629149f,
 0.346616f, 3.029117f, 1.370826f,
 0.464318f, 4.659162f, 1.246780f,
 0.464318f, 4.659162f, 1.246780f,
 -0.947156f, 2.739140f, -0.256843f,
 0.346616f, 3.029117f, 1.370826f,
 -1.485735f, 3.041665f, 1.149019f,
 0.346616f, 3.029117f, 1.370826f,
 -1.210696f, 3.691244f, 2.016222f,
 -1.485735f, 3.041665f, 1.149019f,
 -0.436593f, 2.476752f, 2.018117f,
 -0.059857f, 3.189219f, 1.101824f,
 -0.436593f, 2.476752f, 2.018117f,
 -0.302662f, 0.621306f, 1.716174f,
 -0.284268f, 0.061810f, 1.590959f,
 -0.284268f, 0.061810f, 1.590959f,
 -0.302662f, 0.621306f, 1.716174f,
 -0.408601f, 0.736005f, 2.342120f,
 -0.284268f, 0.061810f, 1.590959f,
 -0.408601f, 0.736005f, 2.342120f,
 -0.647511f, 0.061373f, 3.695783f,
 -0.284268f, 0.061810f, 1.590959f,
 -0.408601f, 0.736005f, 2.342120f,
 -0.647511f, 0.061373f, 3.695783f,
 -0.647511f, 0.061373f, 3.695783f,
 -0.989798f, 0.728329f, 2.249826f,
 -0.989798f, 0.728329f, 2.249826f,
 -0.989798f, 0.728329f, 2.249826f,
 -0.883275f, 0.620620f, 1.645372f,
 -0.989798f, 0.728329f, 2.249826f,
 -0.436593f, 2.476752f, 2.018117f,
 -0.883275f, 0.620620f, 1.645372f,
 -0.436593f, 2.476752f, 2.018117f,
 -0.302662f, 0.621306f, 1.716174f,
 -0.883275f, 0.620620f, 1.645372f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.508848f, -0.860563f, -0.022476f},
{ 0.342739f, -0.753138f, -0.561528f},
{ -0.066852f, -0.673769f, 0.735912f},
{ 0.801231f, -0.576028f, 0.161927f},
{ -0.162850f, -0.608687f, 0.776518f},
{ -0.021274f, -0.593753f, 0.804366f},
{ 0.996811f, 0.060287f, 0.052283f},
{ 0.999412f, 0.028219f, 0.019478f},
{ -0.920381f, -0.313442f, -0.233782f},
{ -0.984518f, -0.168458f, -0.048447f},
{ 0.143131f, 0.529159f, -0.836364f},
{ 0.180186f, 0.361125f, -0.914944f},
{ -0.985229f, 0.116813f, -0.125215f},
{ 0.012479f, 0.490334f, -0.871445f},
{ 0.944934f, 0.194448f, -0.263230f},
{ -0.537622f, 0.000062f, 0.843186f},
{ 0.705058f, 0.363485f, 0.608911f},
{ -0.195973f, 0.096656f, 0.975834f},
{ 0.081550f, 0.656266f, -0.750110f},
{ 0.573769f, 0.498433f, -0.649888f},
{ -0.018473f, 0.670026f, 0.742108f},
{ 0.741953f, 0.479199f, 0.468908f},
{ 0.016607f, 0.709686f, -0.704322f},
{ 0.790253f, 0.410697f, -0.454783f},
{ 0.980735f, 0.154490f, 0.119548f},
{ 0.237104f, 0.409862f, -0.880792f},
{ 0.953051f, -0.297285f, -0.057586f},
{ -0.301089f, 0.247505f, -0.920916f},
{ -0.335129f, 0.744493f, -0.577423f},
{ 0.957926f, -0.272582f, 0.089869f},
{ 0.889851f, -0.105437f, 0.443901f},
{ 0.568037f, -0.388278f, 0.725655f},
{ 0.027249f, -0.357738f, 0.933424f},
{ 0.812721f, -0.327621f, 0.481818f},
{ -0.514031f, 0.251710f, -0.820009f},
{ -0.085195f, 0.012020f, -0.996292f},
{ 0.896288f, -0.084242f, -0.435397f},
{ 0.668756f, -0.047467f, 0.741966f},
{ -0.867109f, -0.497915f, 0.014265f},
{ 0.258938f, -0.954275f, -0.149367f},
{ -0.444716f, 0.797503f, 0.407695f},
{ 0.931238f, 0.253334f, 0.261951f},
{ -0.663967f, -0.745643f, -0.056244f},
{ 0.401328f, -0.599990f, -0.692061f},
{ 0.944211f, 0.238851f, -0.226749f},
{ -0.041266f, 0.895688f, 0.442764f},
{ -0.843461f, 0.262285f, -0.468806f},
{ 0.904089f, -0.392860f, -0.168180f},
{ 0.024099f, -0.107926f, -0.993867f},
{ -0.718945f, 0.305338f, -0.624409f},
{ -0.614514f, -0.375997f, -0.693541f},
{ 0.508192f, -0.645155f, 0.570540f},
{ 0.895187f, 0.417258f, 0.156639f},
{ -0.489112f, 0.552901f, 0.674589f},
{ 0.997473f, -0.061245f, -0.036009f},
{ -0.493626f, 0.045049f, 0.868507f},
{ -0.754592f, 0.469443f, 0.458490f},
{ -0.778531f, 0.419401f, -0.466896f},
{ 0.158740f, -0.045285f, 0.986281f},
{ 0.611437f, -0.707844f, 0.353698f},
{ -0.965457f, 0.258870f, -0.029644f},
{ -0.996225f, 0.027362f, 0.082390f},
{ -0.884544f, 0.451438f, -0.117411f},
{ 0.236819f, -0.524618f, 0.817737f},
{ -0.854454f, -0.267956f, 0.445092f},
{ -0.851973f, -0.176618f, -0.492897f},
{ -0.588325f, 0.669965f, -0.452793f},
{ -0.044229f, 0.601576f, 0.797590f},
{ 0.015064f, -0.312469f, -0.949809f},
{ 0.769851f, -0.592918f, 0.236175f},
{ -0.258942f, -0.044138f, -0.964884f},
{ -0.476942f, -0.847303f, 0.233674f},
{ 0.115765f, -0.964496f, 0.237373f},
{ 0.061505f, 0.391661f, 0.918052f},
{ -0.509245f, -0.042120f, 0.859590f},
{ -0.948322f, -0.314170f, -0.044523f},
{ 0.578401f, -0.805119f, -0.131287f},
{ 0.473314f, -0.613392f, 0.632238f},
{ -0.492087f, -0.811978f, -0.313914f},
{ -0.652833f, -0.616785f, 0.439756f},
{ 0.643058f, 0.261107f, 0.719930f},
{ -0.767977f, 0.410830f, 0.491355f},
{ 0.546641f, 0.103687f, 0.830923f},
{ -0.741072f, 0.109902f, 0.662370f},
{ 0.746180f, -0.638218f, -0.189455f},
{ 0.912023f, -0.202512f, -0.356657f},
{ -0.837868f, -0.080149f, -0.539957f},
{ -0.710958f, -0.491312f, -0.503141f},
{ 0.775505f, 0.154218f, -0.612217f},
{ -0.553215f, 0.140447f, -0.821114f},
{ -0.950624f, 0.177102f, 0.254852f},
{ 0.820134f, 0.174497f, 0.544914f},
{ 0.425001f, 0.394225f, 0.814838f},
{ 0.423321f, 0.389795f, 0.817838f},
{ 0.406373f, 0.346276f, 0.845550f},
{ 0.404026f, 0.340404f, 0.849051f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannablock6.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117