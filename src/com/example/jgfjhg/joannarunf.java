package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannarunf {

static String TextureName = "joannarun6.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.270224f, 1.838071f, -1.179428f,
 0.827259f, 1.981387f, -1.322291f,
 1.018949f, 1.554918f, -0.910270f,
 0.456302f, 1.437813f, -0.782245f,
 0.235675f, 1.376595f, -1.654375f,
 0.815395f, 1.377746f, -1.769544f,
 1.130219f, 0.315655f, 0.042918f,
 0.550033f, 0.317169f, 0.143659f,
 -0.004274f, 3.265531f, -0.248731f,
 0.732045f, 3.475254f, -0.285329f,
 0.848242f, 3.785235f, 0.523317f,
 0.123361f, 3.620175f, 0.656911f,
 0.714632f, 2.313014f, 0.979649f,
 1.207244f, 2.413139f, 0.867417f,
 1.077737f, 2.572119f, 0.456338f,
 0.573191f, 2.490327f, 0.574863f,
 1.063037f, 8.145671f, 1.327654f,
 0.467433f, 6.316660f, 1.356307f,
 -0.118170f, 7.272580f, 0.989585f,
 0.417917f, 8.076117f, 0.941956f,
 0.428125f, 7.829340f, 2.382593f,
 0.572799f, 6.825851f, 0.580333f,
 -0.062229f, 7.111841f, 0.194767f,
 -0.187694f, 5.513296f, 0.316291f,
 0.455837f, 5.378053f, -0.000720f,
 0.823337f, 5.046724f, 0.332059f,
 0.452067f, 4.800338f, 0.956680f,
 0.400763f, 9.123668f, 2.482557f,
 1.041973f, 8.881656f, 2.139705f,
 1.043104f, 8.025639f, 2.073839f,
 0.804695f, 7.601315f, 1.453524f,
 1.082140f, 6.779378f, 0.162758f,
 0.440059f, 9.204844f, 1.058418f,
 1.062208f, 8.924036f, 1.381040f,
 0.590045f, 7.764335f, 1.051159f,
 0.812760f, 6.740995f, -0.155084f,
 1.018199f, 7.527641f, 0.214309f,
 0.672969f, 7.575277f, -0.106987f,
 0.943494f, 5.797793f, 0.092673f,
 1.220664f, 5.844818f, -0.174187f,
 1.078850f, 5.617756f, -0.407057f,
 0.799368f, 5.543264f, -0.178611f,
 0.603656f, 7.402492f, 1.819751f,
 0.441863f, 7.698925f, 0.957676f,
 2.239094f, 5.932978f, 1.417425f,
 2.400696f, 6.019241f, 0.721981f,
 2.406778f, 5.527690f, 0.561819f,
 2.224833f, 5.193655f, 1.059002f,
 -0.810491f, 2.740903f, -0.369519f,
 1.281237f, 3.704023f, 0.698633f,
 0.950547f, 3.219049f, -0.670153f,
 0.340202f, 3.200691f, 1.222047f,
 0.242150f, 7.648082f, 2.215506f,
 0.770747f, 7.154168f, 2.118209f,
 0.300904f, 7.574203f, 2.665581f,
 0.867586f, 7.099957f, 2.522298f,
 -0.220996f, 8.881168f, 2.106775f,
 -0.200478f, 8.923459f, 1.348952f,
 -0.171156f, 5.042585f, 1.338280f,
 -0.503536f, 5.377670f, 0.960357f,
 0.025222f, 6.634242f, 2.068502f,
 -0.292090f, 6.889529f, 2.430954f,
 -0.068197f, 7.670678f, 1.579616f,
 0.131291f, 7.517842f, 1.899340f,
 -0.220022f, 8.025325f, 2.040086f,
 -0.199463f, 8.145169f, 1.295225f,
 1.721459f, 6.568056f, 0.250649f,
 2.376110f, 6.220299f, 0.606464f,
 2.007843f, 7.043378f, 0.710719f,
 2.422582f, 6.786537f, 0.888510f,
 1.474404f, 6.410539f, 2.089767f,
 1.714059f, 6.253945f, 2.410975f,
 1.919446f, 6.560084f, 2.424869f,
 1.718449f, 6.712746f, 2.138444f,
 -1.198837f, 3.774913f, 1.763327f,
 -1.456444f, 3.126043f, 0.879800f,
 -0.309678f, 0.579757f, 1.741259f,
 -0.890661f, 0.568929f, 1.672330f,
 -0.986433f, 0.777670f, 2.251611f,
 -0.404008f, 0.787318f, 2.335398f,
 -0.317482f, -0.025399f, 1.777941f,
 -0.896887f, -0.032288f, 1.692620f,
 -1.248560f, 0.517487f, 3.714062f,
 -0.668319f, 0.516671f, 3.812497f,
 -0.037026f, 3.298263f, 0.805403f,
 -0.799784f, 3.380213f, 0.835898f,
 -0.910618f, 3.887177f, 1.536660f,
 -0.160237f, 3.880807f, 1.622106f,
 -0.484235f, 2.715964f, 2.366513f,
 -0.994007f, 2.714764f, 2.308079f,
 -0.907623f, 2.519262f, 1.743528f,
 -0.389160f, 2.510626f, 1.740381f,
 1.800943f, 11.751297f, 0.714070f,
 2.047580f, 11.547803f, 1.821514f,
 1.895070f, 4.463522f, 0.077605f,
 2.060077f, 4.376126f, 1.130689f,
 0.573191f, 2.490327f, 0.574863f,
 0.573191f, 2.490327f, 0.574863f,
 -0.004274f, 3.265531f, -0.248731f,
 0.270224f, 1.838071f, -1.179428f,
 0.235675f, 1.376595f, -1.654375f,
 0.235675f, 1.376595f, -1.654375f,
 0.270224f, 1.838071f, -1.179428f,
 0.235675f, 1.376595f, -1.654375f,
 0.456302f, 1.437813f, -0.782245f,
 0.456302f, 1.437813f, -0.782245f,
 0.235675f, 1.376595f, -1.654375f,
 0.550033f, 0.317169f, 0.143659f,
 0.456302f, 1.437813f, -0.782245f,
 0.550033f, 0.317169f, 0.143659f,
 0.550033f, 0.317169f, 0.143659f,
 1.018949f, 1.554918f, -0.910270f,
 1.018949f, 1.554918f, -0.910270f,
 1.018949f, 1.554918f, -0.910270f,
 1.018949f, 1.554918f, -0.910270f,
 0.827259f, 1.981387f, -1.322291f,
 0.827259f, 1.981387f, -1.322291f,
 0.573191f, 2.490327f, 0.574863f,
 0.573191f, 2.490327f, 0.574863f,
 0.827259f, 1.981387f, -1.322291f,
 0.270224f, 1.838071f, -1.179428f,
 0.804695f, 7.601315f, 1.453524f,
 0.804695f, 7.601315f, 1.453524f,
 0.572799f, 6.825851f, 0.580333f,
 0.572799f, 6.825851f, 0.580333f,
 0.804695f, 7.601315f, 1.453524f,
 0.804695f, 7.601315f, 1.453524f,
 0.590045f, 7.764335f, 1.051159f,
 0.590045f, 7.764335f, 1.051159f,
 0.590045f, 7.764335f, 1.051159f,
 0.804695f, 7.601315f, 1.453524f,
 0.804695f, 7.601315f, 1.453524f,
 0.572799f, 6.825851f, 0.580333f,
 -0.062229f, 7.111841f, 0.194767f,
 0.943494f, 5.797793f, 0.092673f,
 0.943494f, 5.797793f, 0.092673f,
 -0.062229f, 7.111841f, 0.194767f,
 -0.062229f, 7.111841f, 0.194767f,
 0.572799f, 6.825851f, 0.580333f,
 2.239094f, 5.932978f, 1.417425f,
 2.239094f, 5.932978f, 1.417425f,
 0.943494f, 5.797793f, 0.092673f,
 2.224833f, 5.193655f, 1.059002f,
 2.224833f, 5.193655f, 1.059002f,
 0.943494f, 5.797793f, 0.092673f,
 -0.062229f, 7.111841f, 0.194767f,
 -0.062229f, 7.111841f, 0.194767f,
 0.590045f, 7.764335f, 1.051159f,
 0.590045f, 7.764335f, 1.051159f,
 2.224833f, 5.193655f, 1.059002f,
 -0.810491f, 2.740903f, -0.369519f,
 0.950547f, 3.219049f, -0.670153f,
 0.340202f, 3.200691f, 1.222047f,
 0.340202f, 3.200691f, 1.222047f,
 0.950547f, 3.219049f, -0.670153f,
 1.281237f, 3.704023f, 0.698633f,
 0.400763f, 9.123668f, 2.482557f,
 0.440059f, 9.204844f, 1.058418f,
 0.440059f, 9.204844f, 1.058418f,
 0.467433f, 6.316660f, 1.356307f,
 0.131291f, 7.517842f, 1.899340f,
 0.467433f, 6.316660f, 1.356307f,
 0.603656f, 7.402492f, 1.819751f,
 0.131291f, 7.517842f, 1.899340f,
 0.025222f, 6.634242f, 2.068502f,
 0.025222f, 6.634242f, 2.068502f,
 0.603656f, 7.402492f, 1.819751f,
 0.428125f, 7.829340f, 2.382593f,
 0.131291f, 7.517842f, 1.899340f,
 0.428125f, 7.829340f, 2.382593f,
 0.131291f, 7.517842f, 1.899340f,
 0.441863f, 7.698925f, 0.957676f,
 -0.068197f, 7.670678f, 1.579616f,
 0.417917f, 8.076117f, 0.941956f,
 -0.068197f, 7.670678f, 1.579616f,
 0.417917f, 8.076117f, 0.941956f,
 -0.068197f, 7.670678f, 1.579616f,
 0.131291f, 7.517842f, 1.899340f,
 0.131291f, 7.517842f, 1.899340f,
 0.452067f, 4.800338f, 0.956680f,
 0.467433f, 6.316660f, 1.356307f,
 0.467433f, 6.316660f, 1.356307f,
 0.025222f, 6.634242f, 2.068502f,
 1.474404f, 6.410539f, 2.089767f,
 -0.292090f, 6.889529f, 2.430954f,
 1.474404f, 6.410539f, 2.089767f,
 -0.292090f, 6.889529f, 2.430954f,
 -0.292090f, 6.889529f, 2.430954f,
 0.025222f, 6.634242f, 2.068502f,
 1.721459f, 6.568056f, 0.250649f,
 1.721459f, 6.568056f, 0.250649f,
 2.376110f, 6.220299f, 0.606464f,
 1.474404f, 6.410539f, 2.089767f,
 2.376110f, 6.220299f, 0.606464f,
 1.474404f, 6.410539f, 2.089767f,
 -0.292090f, 6.889529f, 2.430954f,
 -0.292090f, 6.889529f, 2.430954f,
 -0.068197f, 7.670678f, 1.579616f,
 -0.118170f, 7.272580f, 0.989585f,
 -0.068197f, 7.670678f, 1.579616f,
 0.441863f, 7.698925f, 0.957676f,
 -0.118170f, 7.272580f, 0.989585f,
 2.376110f, 6.220299f, 0.606464f,
 0.417917f, 8.076117f, 0.941956f,
 0.440059f, 9.204844f, 1.058418f,
 0.417917f, 8.076117f, 0.941956f,
 0.400763f, 9.123668f, 2.482557f,
 0.428125f, 7.829340f, 2.382593f,
 0.428125f, 7.829340f, 2.382593f,
 -0.187694f, 5.513296f, 0.316291f,
 -0.118170f, 7.272580f, 0.989585f,
 -0.187694f, 5.513296f, 0.316291f,
 -0.810491f, 2.740903f, -0.369519f,
 -0.187694f, 5.513296f, 0.316291f,
 -0.187694f, 5.513296f, 0.316291f,
 0.340202f, 3.200691f, 1.222047f,
 0.452067f, 4.800338f, 0.956680f,
 0.452067f, 4.800338f, 0.956680f,
 -0.810491f, 2.740903f, -0.369519f,
 0.340202f, 3.200691f, 1.222047f,
 -1.456444f, 3.126043f, 0.879800f,
 0.340202f, 3.200691f, 1.222047f,
 -1.198837f, 3.774913f, 1.763327f,
 -1.456444f, 3.126043f, 0.879800f,
 -0.389160f, 2.510626f, 1.740381f,
 -0.037026f, 3.298263f, 0.805403f,
 -0.389160f, 2.510626f, 1.740381f,
 -0.309678f, 0.579757f, 1.741259f,
 -0.317482f, -0.025399f, 1.777941f,
 -0.317482f, -0.025399f, 1.777941f,
 -0.309678f, 0.579757f, 1.741259f,
 -0.404008f, 0.787318f, 2.335398f,
 -0.317482f, -0.025399f, 1.777941f,
 -0.404008f, 0.787318f, 2.335398f,
 -0.668319f, 0.516671f, 3.812497f,
 -0.317482f, -0.025399f, 1.777941f,
 -0.404008f, 0.787318f, 2.335398f,
 -0.668319f, 0.516671f, 3.812497f,
 -0.668319f, 0.516671f, 3.812497f,
 -0.986433f, 0.777670f, 2.251611f,
 -0.986433f, 0.777670f, 2.251611f,
 -0.986433f, 0.777670f, 2.251611f,
 -0.890661f, 0.568929f, 1.672330f,
 -0.986433f, 0.777670f, 2.251611f,
 -0.389160f, 2.510626f, 1.740381f,
 -0.890661f, 0.568929f, 1.672330f,
 -0.389160f, 2.510626f, 1.740381f,
 -0.309678f, 0.579757f, 1.741259f,
 -0.890661f, 0.568929f, 1.672330f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.570369f, -0.576648f, -0.584941f},
{ 0.394768f, -0.546509f, -0.738570f},
{ -0.417932f, -0.883299f, 0.212404f},
{ 0.521300f, -0.849511f, 0.081097f},
{ -0.529817f, -0.054360f, 0.846368f},
{ -0.123066f, -0.502235f, 0.855929f},
{ 0.721769f, 0.347582f, 0.598529f},
{ 0.675186f, -0.366322f, 0.640259f},
{ -0.542255f, -0.767409f, -0.342116f},
{ -0.980008f, -0.122309f, -0.156922f},
{ 0.759304f, 0.410223f, -0.505149f},
{ 0.671714f, -0.349333f, -0.653274f},
{ -0.811892f, 0.561661f, -0.159277f},
{ 0.370279f, 0.804040f, -0.465202f},
{ 0.990622f, -0.095667f, 0.097554f},
{ -0.777661f, -0.164942f, 0.606662f},
{ 0.976469f, 0.215181f, -0.014340f},
{ 0.942560f, 0.044676f, 0.331036f},
{ -0.289948f, 0.687210f, -0.666088f},
{ -0.082693f, 0.095834f, -0.991957f},
{ -0.025393f, 0.658355f, 0.752279f},
{ 0.736644f, 0.470787f, 0.485506f},
{ 0.023672f, 0.720188f, -0.693375f},
{ 0.794998f, 0.416941f, -0.440612f},
{ 0.989707f, 0.139411f, 0.032327f},
{ 0.260365f, 0.246261f, -0.933577f},
{ 0.970273f, -0.206924f, 0.125512f},
{ -0.759865f, 0.303202f, -0.575042f},
{ 0.141604f, 0.896811f, -0.419141f},
{ 0.931743f, -0.348682f, 0.101372f},
{ 0.887230f, -0.165228f, 0.430723f},
{ 0.583464f, -0.417489f, 0.696615f},
{ 0.031757f, -0.363233f, 0.931157f},
{ 0.808328f, -0.340954f, 0.479954f},
{ -0.586256f, 0.175010f, -0.790997f},
{ -0.083170f, -0.013472f, -0.996444f},
{ 0.894155f, -0.110297f, -0.433961f},
{ 0.582706f, 0.049499f, 0.811174f},
{ -0.390275f, 0.333886f, 0.858025f},
{ -0.255830f, -0.843869f, 0.471632f},
{ 0.379385f, 0.910857f, -0.162501f},
{ 0.597387f, -0.507847f, -0.620661f},
{ -0.480709f, -0.119122f, 0.868751f},
{ -0.618672f, -0.740958f, -0.261203f},
{ 0.046756f, -0.566205f, -0.822937f},
{ 0.590140f, 0.673052f, -0.445798f},
{ -0.959004f, 0.246833f, -0.139231f},
{ 0.976069f, -0.094913f, 0.195657f},
{ 0.343708f, -0.208039f, -0.915743f},
{ -0.704201f, 0.250198f, -0.664456f},
{ -0.505974f, -0.349627f, -0.788512f},
{ 0.362387f, -0.648346f, 0.669569f},
{ 0.490390f, 0.628800f, -0.603431f},
{ -0.347408f, 0.433056f, 0.831728f},
{ 0.204794f, 0.394494f, -0.895787f},
{ 0.146856f, 0.108439f, 0.983196f},
{ -0.759726f, 0.463310f, 0.456247f},
{ -0.773255f, 0.425992f, -0.469689f},
{ 0.092411f, -0.024677f, 0.995415f},
{ 0.486091f, -0.676464f, 0.553274f},
{ -0.928734f, 0.368974f, -0.036219f},
{ -0.927570f, -0.015200f, 0.373342f},
{ -0.947323f, 0.313581f, -0.065164f},
{ 0.333385f, -0.656043f, 0.677099f},
{ -0.866144f, -0.249600f, 0.433007f},
{ -0.834784f, -0.187841f, -0.517543f},
{ -0.769313f, -0.399276f, -0.498736f},
{ -0.349265f, 0.918595f, -0.184927f},
{ 0.276360f, -0.947318f, -0.161905f},
{ 0.941659f, 0.271966f, 0.198273f},
{ -0.567094f, -0.676056f, -0.470482f},
{ 0.172168f, -0.834027f, 0.524173f},
{ 0.773892f, 0.053541f, 0.631051f},
{ 0.037349f, 0.998337f, -0.043902f},
{ -0.545151f, -0.019700f, 0.838106f},
{ -0.940324f, -0.323607f, -0.105207f},
{ 0.538006f, -0.840596f, 0.062832f},
{ 0.422312f, -0.478548f, 0.769834f},
{ -0.503576f, -0.857412f, -0.106089f},
{ -0.652257f, -0.480696f, 0.586082f},
{ 0.667389f, 0.247215f, 0.702479f},
{ -0.780466f, 0.381940f, 0.494969f},
{ 0.569849f, 0.157046f, 0.806603f},
{ -0.770512f, 0.160252f, 0.616953f},
{ 0.749852f, -0.617425f, -0.237715f},
{ 0.893790f, -0.243681f, -0.376509f},
{ -0.807275f, -0.139963f, -0.573339f},
{ -0.710869f, -0.480329f, -0.513760f},
{ 0.767942f, 0.009772f, -0.640444f},
{ -0.556045f, -0.003759f, -0.831144f},
{ -0.948441f, 0.249474f, 0.195506f},
{ 0.840807f, 0.236700f, 0.486844f},
{ 0.976812f, 0.031116f, -0.211827f},
{ 0.977871f, 0.029919f, -0.207060f},
{ 0.986981f, 0.018094f, -0.159817f},
{ 0.988020f, 0.016502f, -0.153443f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannarun6.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117