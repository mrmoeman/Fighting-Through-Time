package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarblockf {

static String TextureName = "RagBlock6.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.332171f, 9.832151f, 4.528447f,
 1.207512f, 10.665930f, 5.525452f,
 -0.056474f, 14.588385f, 6.534581f,
 -1.678816f, 12.417121f, 4.424695f,
 3.233468f, 9.829992f, 4.245535f,
 1.830152f, 10.665421f, 5.482174f,
 3.242716f, 14.586119f, 6.296752f,
 4.586804f, 12.421075f, 3.808575f,
 -0.003948f, 10.840250f, 5.424754f,
 0.004673f, 9.584352f, 5.831832f,
 0.281424f, 7.500967f, 5.022139f,
 1.500810f, 5.692427f, 4.263529f,
 1.558937f, 9.361134f, 6.274147f,
 1.523478f, 11.648991f, 5.640590f,
 0.539795f, 9.461595f, 4.925233f,
 0.107826f, 10.857338f, 4.471193f,
 1.489961f, 11.875069f, 3.345718f,
 0.039330f, 5.485329f, 1.136843f,
 -0.115768f, 7.028276f, 3.283729f,
 -2.132048f, 4.282800f, 2.619125f,
 -2.595101f, 4.514245f, 0.078326f,
 0.038183f, 9.331464f, 5.947077f,
 -4.051187f, 8.717009f, 3.973932f,
 2.846349f, 9.574529f, 4.766357f,
 -0.941684f, 11.000434f, 0.253229f,
 -0.650764f, 2.961621f, -0.388184f,
 1.859832f, 3.266996f, 2.205640f,
 -2.622476f, 10.453170f, 6.086926f,
 1.316035f, 12.739586f, 3.225650f,
 -1.120403f, 5.731812f, 2.418951f,
 0.485417f, 5.426924f, 1.909606f,
 -0.852179f, 6.874197f, -0.404068f,
 -1.992146f, 6.638425f, 0.828881f,
 -1.892009f, 6.313406f, 1.987388f,
 -3.005707f, 3.653369f, 1.514171f,
 0.606521f, 2.096742f, 0.951129f,
 -2.512970f, 8.722616f, 5.909561f,
 -1.438166f, 6.969138f, 5.149472f,
 -2.865422f, 5.905594f, 5.604288f,
 -3.985756f, 7.090213f, 6.182945f,
 -0.346483f, 6.466383f, 7.839800f,
 0.169625f, 5.457524f, 7.115765f,
 -0.758261f, 4.759086f, 7.418279f,
 -1.281307f, 5.765630f, 8.143524f,
 -2.216828f, 10.288116f, 3.603266f,
 -0.728905f, 10.185063f, 5.334488f,
 -2.031477f, 8.744316f, 3.194483f,
 -0.926708f, 8.104732f, 4.534350f,
 -1.135596f, 2.241898f, 2.066466f,
 -1.112346f, 2.492432f, 4.001641f,
 -2.257244f, 2.249890f, 2.454517f,
 -2.232165f, 2.459164f, 3.905507f,
 -1.029296f, -0.006009f, 0.873999f,
 -0.889306f, -0.006617f, 5.156837f,
 -2.383778f, -0.007135f, 1.036772f,
 -2.384049f, -0.006508f, 5.102063f,
 -0.980069f, 4.328654f, 0.216021f,
 -1.814408f, 4.465889f, 0.749228f,
 -1.602877f, 4.494071f, 1.716681f,
 -0.420025f, 4.122330f, 1.322221f,
 -2.155591f, 1.152313f, 2.770979f,
 -2.197214f, 0.822679f, 1.495807f,
 -1.104050f, 0.823340f, 1.256350f,
 -1.050375f, 1.196493f, 2.823126f,
 3.033511f, 10.839405f, 5.199429f,
 3.050948f, 9.583681f, 5.624977f,
 2.662657f, 7.501107f, 4.861355f,
 3.439053f, 9.710726f, 2.486236f,
 2.926816f, 11.099002f, 2.102749f,
 2.118485f, 7.122038f, 1.707483f,
 2.357842f, 4.331605f, -0.549121f,
 0.191246f, 4.748327f, -1.325472f,
 4.756308f, 9.277169f, 1.979604f,
 3.070467f, 9.734356f, -2.419835f,
 5.006285f, 11.110682f, -0.401381f,
 1.729948f, 5.731823f, 0.775229f,
 0.783890f, 6.646014f, -0.740070f,
 1.741318f, 6.313621f, -0.109008f,
 1.422153f, 4.031435f, -1.702765f,
 5.874094f, 8.535438f, -1.005219f,
 5.049795f, 6.639542f, -1.839104f,
 3.963724f, 7.632817f, -2.966710f,
 4.407719f, 9.225362f, -2.582242f,
 7.027973f, 6.624180f, -4.055830f,
 6.293931f, 5.525770f, -4.314809f,
 5.580473f, 6.176908f, -5.044725f,
 6.317904f, 7.273356f, -4.784773f,
 2.516923f, 10.695091f, -0.379341f,
 4.007389f, 10.564347f, 1.405095f,
 2.239898f, 9.111414f, -0.399167f,
 3.438773f, 8.475823f, 0.865683f,
 1.602877f, 1.987972f, -1.188875f,
 3.574513f, 2.142301f, -1.235177f,
 1.893693f, 2.485914f, -2.181259f,
 3.369002f, 2.647686f, -2.214980f,
 0.339534f, -0.008609f, -1.790416f,
 4.577107f, -0.006617f, -1.165021f,
 0.649723f, -0.001347f, -3.117189f,
 4.691247f, -0.006435f, -2.656569f,
 -0.198279f, 4.295544f, -0.197562f,
 0.653365f, 4.454180f, -0.602630f,
 1.475452f, 4.409734f, -0.086318f,
 0.660223f, 3.991674f, 0.721744f,
 2.278940f, 1.308578f, -2.698942f,
 1.086110f, 0.824577f, -2.876954f,
 0.727506f, 0.820182f, -1.817273f,
 2.338911f, 1.062276f, -1.649378f,
 2.174441f, 10.487997f, -6.446635f,
 3.580112f, 8.217138f, -10.054626f,
 8.056141f, 5.135571f, -0.719550f,
 9.445970f, 2.939633f, -4.300193f,
 0.008091f, 10.210390f, 5.412954f,
 3.543239f, 6.826079f, 8.905438f,
 -1.546572f, 3.159133f, 10.397511f,
 -5.094786f, 6.496753f, 6.940492f,
 -2.622476f, 10.453170f, 6.086926f,
 1.316035f, 12.739586f, 3.225650f,
 1.316035f, 12.739586f, 3.225650f,
 -1.892009f, 6.313406f, 1.987388f,
 -1.892009f, 6.313406f, 1.987388f,
 -2.622476f, 10.453170f, 6.086926f,
 -3.005707f, 3.653369f, 1.514171f,
 -1.892009f, 6.313406f, 1.987388f,
 -1.892009f, 6.313406f, 1.987388f,
 -3.005707f, 3.653369f, 1.514171f,
 0.606521f, 2.096742f, 0.951129f,
 -0.758261f, 4.759086f, 7.418279f,
 -1.281307f, 5.765630f, 8.143524f,
 -1.281307f, 5.765630f, 8.143524f,
 -0.758261f, 4.759086f, 7.418279f,
 -0.758261f, 4.759086f, 7.418279f,
 -2.865422f, 5.905594f, 5.604288f,
 -1.281307f, 5.765630f, 8.143524f,
 -1.281307f, 5.765630f, 8.143524f,
 -2.865422f, 5.905594f, 5.604288f,
 -2.031477f, 8.744316f, 3.194483f,
 -2.031477f, 8.744316f, 3.194483f,
 -1.135596f, 2.241898f, 2.066466f,
 -1.135596f, 2.241898f, 2.066466f,
 -1.104050f, 0.823340f, 1.256350f,
 -0.980069f, 4.328654f, 0.216021f,
 -1.135596f, 2.241898f, 2.066466f,
 -1.135596f, 2.241898f, 2.066466f,
 -2.197214f, 0.822679f, 1.495807f,
 -2.155591f, 1.152313f, 2.770979f,
 -2.155591f, 1.152313f, 2.770979f,
 -1.029296f, -0.006009f, 0.873999f,
 -1.104050f, 0.823340f, 1.256350f,
 -1.104050f, 0.823340f, 1.256350f,
 -2.197214f, 0.822679f, 1.495807f,
 -0.889306f, -0.006617f, 5.156837f,
 -1.029296f, -0.006009f, 0.873999f,
 -1.050375f, 1.196493f, 2.823126f,
 -1.050375f, 1.196493f, 2.823126f,
 -1.029296f, -0.006009f, 0.873999f,
 -1.104050f, 0.823340f, 1.256350f,
 -2.155591f, 1.152313f, 2.770979f,
 -1.050375f, 1.196493f, 2.823126f,
 -1.050375f, 1.196493f, 2.823126f,
 -0.889306f, -0.006617f, 5.156837f,
 1.500810f, 5.692427f, 4.263529f,
 1.558937f, 9.361134f, 6.274147f,
 1.558937f, 9.361134f, 6.274147f,
 1.558937f, 9.361134f, 6.274147f,
 1.558937f, 9.361134f, 6.274147f,
 1.523478f, 11.648991f, 5.640590f,
 1.489961f, 11.875069f, 3.345718f,
 1.489961f, 11.875069f, 3.345718f,
 1.523478f, 11.648991f, 5.640590f,
 1.500810f, 5.692427f, 4.263529f,
 1.500810f, 5.692427f, 4.263529f,
 0.039330f, 5.485329f, 1.136843f,
 1.316035f, 12.739586f, 3.225650f,
 -0.941684f, 11.000434f, 0.253229f,
 -0.941684f, 11.000434f, 0.253229f,
 5.006285f, 11.110682f, -0.401381f,
 1.316035f, 12.739586f, 3.225650f,
 1.316035f, 12.739586f, 3.225650f,
 2.846349f, 9.574529f, 4.766357f,
 -0.852179f, 6.874197f, -0.404068f,
 -0.941684f, 11.000434f, 0.253229f,
 -0.941684f, 11.000434f, 0.253229f,
 0.485417f, 5.426924f, 1.909606f,
 0.485417f, 5.426924f, 1.909606f,
 1.859832f, 3.266996f, 2.205640f,
 5.006285f, 11.110682f, -0.401381f,
 1.741318f, 6.313621f, -0.109008f,
 1.741318f, 6.313621f, -0.109008f,
 -0.852179f, 6.874197f, -0.404068f,
 -0.852179f, 6.874197f, -0.404068f,
 -0.650764f, 2.961621f, -0.388184f,
 2.846349f, 9.574529f, 4.766357f,
 0.485417f, 5.426924f, 1.909606f,
 0.485417f, 5.426924f, 1.909606f,
 1.422153f, 4.031435f, -1.702765f,
 1.741318f, 6.313621f, -0.109008f,
 1.741318f, 6.313621f, -0.109008f,
 1.859832f, 3.266996f, 2.205640f,
 0.606521f, 2.096742f, 0.951129f,
 0.606521f, 2.096742f, 0.951129f,
 1.422153f, 4.031435f, -1.702765f,
 0.606521f, 2.096742f, 0.951129f,
 -0.650764f, 2.961621f, -0.388184f,
 -0.650764f, 2.961621f, -0.388184f,
 6.317904f, 7.273356f, -4.784773f,
 6.317904f, 7.273356f, -4.784773f,
 5.580473f, 6.176908f, -5.044725f,
 5.580473f, 6.176908f, -5.044725f,
 5.580473f, 6.176908f, -5.044725f,
 3.963724f, 7.632817f, -2.966710f,
 6.317904f, 7.273356f, -4.784773f,
 6.317904f, 7.273356f, -4.784773f,
 2.239898f, 9.111414f, -0.399167f,
 2.239898f, 9.111414f, -0.399167f,
 3.963724f, 7.632817f, -2.966710f,
 0.727506f, 0.820182f, -1.817273f,
 1.602877f, 1.987972f, -1.188875f,
 1.602877f, 1.987972f, -1.188875f,
 1.602877f, 1.987972f, -1.188875f,
 1.602877f, 1.987972f, -1.188875f,
 -0.198279f, 4.295544f, -0.197562f,
 2.278940f, 1.308578f, -2.698942f,
 2.278940f, 1.308578f, -2.698942f,
 1.086110f, 0.824577f, -2.876954f,
 1.086110f, 0.824577f, -2.876954f,
 0.727506f, 0.820182f, -1.817273f,
 0.727506f, 0.820182f, -1.817273f,
 0.339534f, -0.008609f, -1.790416f,
 0.727506f, 0.820182f, -1.817273f,
 0.339534f, -0.008609f, -1.790416f,
 2.338911f, 1.062276f, -1.649378f,
 2.338911f, 1.062276f, -1.649378f,
 0.339534f, -0.008609f, -1.790416f,
 4.577107f, -0.006617f, -1.165021f,
 2.278940f, 1.308578f, -2.698942f,
 2.338911f, 1.062276f, -1.649378f,
 2.338911f, 1.062276f, -1.649378f,
 4.577107f, -0.006617f, -1.165021f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.453284f, -0.201287f, 0.868342f},
{ -0.497030f, -0.309692f, 0.810588f},
{ -0.506621f, -0.335900f, 0.794044f},
{ -0.517030f, -0.365713f, 0.773908f},
{ 0.590099f, -0.175312f, 0.788067f},
{ 0.635797f, -0.335800f, 0.694983f},
{ 0.629380f, -0.308197f, 0.713369f},
{ 0.643010f, -0.370881f, 0.670063f},
{ 0.298062f, -0.906146f, 0.300099f},
{ 0.066208f, -0.163111f, 0.984384f},
{ -0.630836f, -0.387448f, 0.672257f},
{ -0.708773f, -0.113617f, 0.696227f},
{ -0.660319f, 0.514729f, 0.546839f},
{ 0.032854f, 0.802316f, 0.595994f},
{ -0.959971f, 0.011531f, -0.279862f},
{ -0.874835f, 0.475208f, -0.094030f},
{ 0.304225f, 0.950007f, 0.070238f},
{ -0.785979f, -0.511011f, 0.348001f},
{ 0.204351f, -0.978416f, -0.030712f},
{ -0.010190f, 0.997081f, 0.075671f},
{ -0.534667f, 0.650305f, -0.539662f},
{ -0.626562f, 0.448331f, 0.637510f},
{ -0.992172f, 0.123728f, 0.016921f},
{ 0.157509f, -0.250915f, 0.955109f},
{ 0.638748f, -0.162252f, 0.752114f},
{ -0.463816f, 0.143685f, -0.874202f},
{ -0.845778f, 0.098468f, -0.524371f},
{ -0.712470f, -0.479916f, 0.511924f},
{ 0.633824f, -0.274055f, 0.723299f},
{ 0.483701f, -0.371975f, 0.792255f},
{ -0.301233f, -0.317430f, 0.899165f},
{ -0.137323f, -0.486955f, 0.862564f},
{ -0.691412f, -0.027729f, -0.721929f},
{ -0.809646f, -0.552353f, 0.198443f},
{ -0.360807f, -0.663773f, -0.655151f},
{ 0.113700f, -0.977953f, 0.175157f},
{ 0.595456f, 0.660545f, 0.457288f},
{ -0.434197f, -0.059504f, 0.898851f},
{ 0.888072f, -0.212176f, -0.407812f},
{ -0.043759f, -0.991193f, -0.124985f},
{ -0.435885f, -0.782684f, -0.444308f},
{ -0.955175f, 0.025974f, 0.294901f},
{ -0.177371f, 0.689982f, 0.701758f},
{ -0.864613f, 0.500284f, -0.046478f},
{ -0.115537f, 0.482387f, 0.868305f},
{ 0.784599f, -0.217308f, -0.580673f},
{ -0.700402f, -0.185876f, -0.689121f},
{ 0.808653f, -0.451058f, 0.377661f},
{ -0.921417f, 0.071111f, -0.382013f},
{ -0.764800f, -0.354737f, -0.537813f},
{ 0.746177f, -0.321548f, -0.582947f},
{ -0.035021f, -0.661603f, -0.749036f},
{ -0.359601f, 0.771046f, 0.525524f},
{ -0.629254f, 0.293304f, 0.719731f},
{ 0.564828f, 0.218185f, 0.795842f},
{ 0.995467f, 0.061462f, 0.072581f},
{ 0.944257f, 0.223274f, 0.241925f},
{ 0.560456f, 0.424694f, -0.711002f},
{ -0.636504f, 0.443054f, -0.631321f},
{ -0.923012f, 0.254510f, 0.288572f},
{ 0.000811f, -1.000000f, -0.000168f},
{ 0.000102f, -1.000000f, 0.000089f},
{ 0.000622f, -1.000000f, -0.000100f},
{ -0.000078f, -1.000000f, 0.000154f},
{ -0.864571f, 0.351048f, -0.359557f},
{ -0.368397f, 0.841386f, 0.395416f},
{ 0.855369f, 0.258657f, -0.448822f},
{ 0.370645f, 0.835700f, 0.405251f},
{ 0.814780f, -0.477282f, 0.329144f},
{ 0.867111f, -0.129252f, 0.481054f},
{ 0.771834f, 0.520384f, 0.365339f},
{ 0.773117f, 0.633710f, 0.026487f},
{ 0.991045f, -0.133039f, -0.011458f},
{ 0.799100f, -0.578456f, -0.163789f},
{ 0.717454f, 0.579619f, -0.386396f},
{ 0.128121f, 0.180821f, -0.975135f},
{ 0.932475f, -0.200254f, 0.300647f},
{ -0.241084f, -0.059123f, -0.968702f},
{ 0.744745f, -0.417634f, -0.520516f},
{ 0.769951f, -0.540196f, 0.339652f},
{ 0.974765f, -0.146000f, -0.168872f},
{ 0.353824f, -0.342308f, -0.870422f},
{ -0.398903f, 0.106611f, -0.910775f},
{ 0.981537f, -0.061602f, 0.181080f},
{ 0.104457f, -0.987780f, 0.115670f},
{ 0.302047f, 0.704017f, -0.642750f},
{ -0.663238f, -0.378598f, -0.645584f},
{ 0.109959f, 0.851028f, -0.513479f},
{ -0.836373f, -0.308396f, -0.453180f},
{ 0.782185f, 0.617029f, 0.086384f},
{ 0.893083f, 0.284921f, 0.348171f},
{ 0.168788f, 0.832535f, -0.527633f},
{ 0.002685f, -0.887253f, 0.461275f},
{ -0.848490f, -0.408139f, -0.336878f},
{ 0.112134f, -0.743778f, 0.658954f},
{ -0.804834f, -0.584859f, -0.100904f},
{ -0.204330f, 0.359667f, -0.910433f},
{ -0.497902f, -0.604559f, 0.621773f},
{ -0.460067f, 0.522972f, -0.717523f},
{ 0.715757f, 0.657589f, 0.235094f},
{ 0.618154f, 0.575628f, -0.535292f},
{ -0.171703f, -0.594975f, 0.785190f},
{ 0.803719f, -0.193805f, 0.562562f},
{ -0.753931f, 0.434577f, 0.492677f},
{ 0.243623f, 0.168612f, 0.955101f},
{ -0.561822f, 0.544302f, -0.622971f},
{ 0.307706f, 0.341817f, -0.887963f},
{ -0.001234f, -0.999999f, -0.000216f},
{ -0.000734f, -0.999999f, -0.001222f},
{ 0.000708f, -0.999991f, -0.004124f},
{ 0.001235f, -0.999986f, -0.005185f},
{ 0.415173f, 0.832216f, -0.367488f},
{ -0.211433f, 0.319177f, -0.923809f},
{ -0.568278f, 0.317586f, 0.759078f},
{ 0.335957f, 0.868563f, 0.364324f},
{ -0.732486f, -0.667335f, 0.134643f},
{ -0.732230f, -0.668804f, 0.128609f},
{ -0.732394f, -0.667881f, 0.132412f},
{ -0.732126f, -0.669353f, 0.126326f},
{ -0.199798f, 0.594819f, 0.778634f},
{ -0.199829f, 0.594584f, 0.778806f},
{ -0.199826f, 0.594606f, 0.778790f},
{ -0.199857f, 0.594365f, 0.778966f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagBlock6.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105