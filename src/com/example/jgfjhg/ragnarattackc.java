package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarattackc {

static String TextureName = "RagAttack3.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.349549f, 10.422194f, 2.928736f,
 1.004747f, 11.169903f, 4.231623f,
 -0.444774f, 14.981136f, 5.386745f,
 -1.712733f, 12.969793f, 2.835179f,
 3.224263f, 10.463492f, 3.226322f,
 1.626851f, 11.172201f, 4.287598f,
 2.838180f, 14.992962f, 5.670892f,
 4.506539f, 13.093102f, 3.251080f,
 -0.179966f, 11.351932f, 3.956552f,
 -0.220467f, 10.070753f, 4.242520f,
 0.200449f, 8.071909f, 3.298415f,
 1.761582f, 6.387098f, 2.695197f,
 1.247046f, 9.800878f, 4.901728f,
 1.290330f, 12.136892f, 4.484644f,
 0.389051f, 9.587810f, 2.954656f,
 -0.231257f, 10.931173f, 2.566387f,
 1.103119f, 12.473579f, 2.331007f,
 0.605873f, 6.282474f, -0.314257f,
 0.814903f, 7.722795f, 1.375309f,
 -1.607042f, 5.175844f, 0.988638f,
 -2.037746f, 5.308793f, -1.412809f,
 -0.902820f, 8.359209f, 3.635629f,
 -3.233237f, 8.942349f, -0.533341f,
 2.435865f, 10.226288f, 3.857248f,
 0.327488f, 11.906360f, -1.573880f,
 -0.453838f, 3.765961f, -2.283143f,
 0.972543f, 4.000927f, 1.655962f,
 -3.336045f, 9.869065f, 2.446146f,
 0.742713f, 13.282447f, 2.272983f,
 -0.554948f, 6.528933f, 0.967817f,
 1.050844f, 6.223806f, 0.458968f,
 -0.287011f, 7.673784f, -1.864217f,
 -1.426363f, 7.438149f, -0.632645f,
 -1.326179f, 7.110227f, 0.536404f,
 -2.514786f, 4.538634f, 0.011272f,
 0.174575f, 2.753465f, -0.028081f,
 -3.415209f, 8.506346f, 1.581449f,
 -2.507716f, 6.645870f, 0.864900f,
 -3.823467f, 6.493412f, -0.414666f,
 -4.721774f, 7.947580f, -0.150446f,
 -4.245648f, 5.087514f, 2.664749f,
 -3.529902f, 4.131702f, 2.042877f,
 -4.395576f, 4.025865f, 1.207372f,
 -5.112616f, 4.981681f, 1.827987f,
 -1.750119f, 10.133339f, 0.684001f,
 -1.094826f, 9.874542f, 2.883097f,
 -0.965622f, 8.823745f, 0.179243f,
 -0.335539f, 8.097470f, 1.762187f,
 -0.975534f, 2.725269f, 0.981353f,
 -0.905520f, 3.971502f, 2.409690f,
 -2.071249f, 2.978395f, 1.218514f,
 -2.022291f, 3.930803f, 2.337549f,
 -1.031823f, 0.787824f, 0.748487f,
 -0.889359f, 0.140386f, 4.965924f,
 -2.385557f, 0.766225f, 0.908335f,
 -2.384306f, 0.149367f, 4.911676f,
 -0.432850f, 5.112212f, -1.243305f,
 -1.242092f, 5.253430f, -0.701179f,
 -1.016661f, 5.301993f, 0.237092f,
 0.056042f, 4.895620f, -0.153458f,
 -2.144968f, 1.978916f, 2.566414f,
 -2.197459f, 1.519862f, 1.477075f,
 -1.105080f, 1.549682f, 1.243287f,
 -1.048729f, 1.966748f, 2.627345f,
 2.855694f, 11.371098f, 4.219964f,
 2.821813f, 10.076420f, 4.520989f,
 2.576967f, 8.072744f, 3.516191f,
 3.784889f, 11.066768f, 2.119321f,
 3.069286f, 12.366758f, 1.754893f,
 3.256386f, 8.283883f, 0.394191f,
 2.800416f, 4.738700f, -0.929845f,
 1.292346f, 5.611887f, -3.246567f,
 5.133481f, 12.572131f, 1.913058f,
 4.954822f, 12.284954f, -2.657959f,
 4.354546f, 13.918000f, -0.390943f,
 2.295382f, 6.528725f, -0.675670f,
 1.369331f, 7.452420f, -2.230665f,
 2.308439f, 7.111006f, -1.560198f,
 2.582726f, 4.494309f, -2.567990f,
 4.649284f, 13.608182f, -1.524815f,
 6.632332f, 12.883168f, -1.022546f,
 7.196270f, 13.245235f, -2.731301f,
 5.716444f, 13.776095f, -3.450965f,
 7.449918f, 15.617987f, -0.288349f,
 8.557478f, 14.902536f, -0.078331f,
 8.936932f, 15.156518f, -1.195010f,
 7.814792f, 15.864925f, -1.415480f,
 3.793926f, 12.547653f, -0.680083f,
 4.412364f, 12.296896f, 1.507030f,
 4.037411f, 11.002845f, -1.051575f,
 4.792088f, 10.337427f, 0.507038f,
 1.294142f, 2.681760f, -1.682305f,
 2.313015f, 2.171781f, -0.102483f,
 2.428393f, 2.733827f, -1.965764f,
 3.197115f, 2.380161f, -0.764033f,
 0.438317f, 0.801374f, -3.296111f,
 2.432455f, 0.140376f, 0.438689f,
 1.690536f, 0.777722f, -3.836811f,
 3.700131f, 0.148745f, -0.355512f,
 0.286579f, 5.128853f, -1.706469f,
 1.227583f, 5.283522f, -2.144008f,
 1.854056f, 5.134614f, -1.245958f,
 0.871589f, 4.822446f, -0.647480f,
 2.449542f, 1.617673f, -2.103433f,
 1.819783f, 1.523342f, -3.238045f,
 0.755506f, 1.560674f, -2.894100f,
 1.551427f, 1.541017f, -1.464427f,
 8.542397f, 15.397208f, -6.849581f,
 11.760000f, 17.799818f, -5.460341f,
 5.635879f, 13.548029f, 2.316971f,
 9.068132f, 15.972114f, 3.739524f,
 -1.430262f, 8.389596f, 3.774887f,
 -2.934684f, 2.965605f, 5.954138f,
 -7.598269f, 2.477171f, 1.364221f,
 -6.057237f, 7.922212f, -0.798787f,
 -3.336045f, 9.869065f, 2.446146f,
 0.742713f, 13.282447f, 2.272983f,
 0.742713f, 13.282447f, 2.272983f,
 -1.326179f, 7.110227f, 0.536404f,
 -1.326179f, 7.110227f, 0.536404f,
 -3.336045f, 9.869065f, 2.446146f,
 -2.514786f, 4.538634f, 0.011272f,
 -1.326179f, 7.110227f, 0.536404f,
 -1.326179f, 7.110227f, 0.536404f,
 -2.514786f, 4.538634f, 0.011272f,
 0.174575f, 2.753465f, -0.028081f,
 -4.395576f, 4.025865f, 1.207372f,
 -5.112616f, 4.981681f, 1.827987f,
 -5.112616f, 4.981681f, 1.827987f,
 -4.395576f, 4.025865f, 1.207372f,
 -4.395576f, 4.025865f, 1.207372f,
 -3.823467f, 6.493412f, -0.414666f,
 -5.112616f, 4.981681f, 1.827987f,
 -5.112616f, 4.981681f, 1.827987f,
 -3.823467f, 6.493412f, -0.414666f,
 -0.965622f, 8.823745f, 0.179243f,
 -0.965622f, 8.823745f, 0.179243f,
 -0.975534f, 2.725269f, 0.981353f,
 -0.975534f, 2.725269f, 0.981353f,
 -1.105080f, 1.549682f, 1.243287f,
 -0.432850f, 5.112212f, -1.243305f,
 -0.975534f, 2.725269f, 0.981353f,
 -0.975534f, 2.725269f, 0.981353f,
 -2.197459f, 1.519862f, 1.477075f,
 -2.144968f, 1.978916f, 2.566414f,
 -2.144968f, 1.978916f, 2.566414f,
 -1.031823f, 0.787824f, 0.748487f,
 -1.105080f, 1.549682f, 1.243287f,
 -1.105080f, 1.549682f, 1.243287f,
 -2.197459f, 1.519862f, 1.477075f,
 -0.889359f, 0.140386f, 4.965924f,
 -1.031823f, 0.787824f, 0.748487f,
 -1.048729f, 1.966748f, 2.627345f,
 -1.048729f, 1.966748f, 2.627345f,
 -1.031823f, 0.787824f, 0.748487f,
 -1.105080f, 1.549682f, 1.243287f,
 -2.144968f, 1.978916f, 2.566414f,
 -1.048729f, 1.966748f, 2.627345f,
 -1.048729f, 1.966748f, 2.627345f,
 -0.889359f, 0.140386f, 4.965924f,
 1.761582f, 6.387098f, 2.695197f,
 1.247046f, 9.800878f, 4.901728f,
 1.247046f, 9.800878f, 4.901728f,
 1.247046f, 9.800878f, 4.901728f,
 1.247046f, 9.800878f, 4.901728f,
 1.290330f, 12.136892f, 4.484644f,
 1.103119f, 12.473579f, 2.331007f,
 1.103119f, 12.473579f, 2.331007f,
 1.290330f, 12.136892f, 4.484644f,
 1.761582f, 6.387098f, 2.695197f,
 1.761582f, 6.387098f, 2.695197f,
 0.605873f, 6.282474f, -0.314257f,
 0.742713f, 13.282447f, 2.272983f,
 0.327488f, 11.906360f, -1.573880f,
 0.327488f, 11.906360f, -1.573880f,
 4.354546f, 13.918000f, -0.390943f,
 0.742713f, 13.282447f, 2.272983f,
 0.742713f, 13.282447f, 2.272983f,
 2.435865f, 10.226288f, 3.857248f,
 -0.287011f, 7.673784f, -1.864217f,
 0.327488f, 11.906360f, -1.573880f,
 0.327488f, 11.906360f, -1.573880f,
 1.050844f, 6.223806f, 0.458968f,
 1.050844f, 6.223806f, 0.458968f,
 0.972543f, 4.000927f, 1.655962f,
 4.354546f, 13.918000f, -0.390943f,
 2.308439f, 7.111006f, -1.560198f,
 2.308439f, 7.111006f, -1.560198f,
 -0.287011f, 7.673784f, -1.864217f,
 -0.287011f, 7.673784f, -1.864217f,
 -0.453838f, 3.765961f, -2.283143f,
 2.435865f, 10.226288f, 3.857248f,
 1.050844f, 6.223806f, 0.458968f,
 1.050844f, 6.223806f, 0.458968f,
 2.582726f, 4.494309f, -2.567990f,
 2.308439f, 7.111006f, -1.560198f,
 2.308439f, 7.111006f, -1.560198f,
 0.972543f, 4.000927f, 1.655962f,
 0.174575f, 2.753465f, -0.028081f,
 0.174575f, 2.753465f, -0.028081f,
 2.582726f, 4.494309f, -2.567990f,
 0.174575f, 2.753465f, -0.028081f,
 -0.453838f, 3.765961f, -2.283143f,
 -0.453838f, 3.765961f, -2.283143f,
 7.814792f, 15.864925f, -1.415480f,
 7.814792f, 15.864925f, -1.415480f,
 8.936932f, 15.156518f, -1.195010f,
 8.936932f, 15.156518f, -1.195010f,
 8.936932f, 15.156518f, -1.195010f,
 7.196270f, 13.245235f, -2.731301f,
 7.814792f, 15.864925f, -1.415480f,
 7.814792f, 15.864925f, -1.415480f,
 4.037411f, 11.002845f, -1.051575f,
 4.037411f, 11.002845f, -1.051575f,
 7.196270f, 13.245235f, -2.731301f,
 0.755506f, 1.560674f, -2.894100f,
 1.294142f, 2.681760f, -1.682305f,
 1.294142f, 2.681760f, -1.682305f,
 1.294142f, 2.681760f, -1.682305f,
 1.294142f, 2.681760f, -1.682305f,
 0.286579f, 5.128853f, -1.706469f,
 2.449542f, 1.617673f, -2.103433f,
 2.449542f, 1.617673f, -2.103433f,
 1.819783f, 1.523342f, -3.238045f,
 1.819783f, 1.523342f, -3.238045f,
 0.755506f, 1.560674f, -2.894100f,
 0.755506f, 1.560674f, -2.894100f,
 0.438317f, 0.801374f, -3.296111f,
 0.755506f, 1.560674f, -2.894100f,
 0.438317f, 0.801374f, -3.296111f,
 1.551427f, 1.541017f, -1.464427f,
 1.551427f, 1.541017f, -1.464427f,
 0.438317f, 0.801374f, -3.296111f,
 2.432455f, 0.140376f, 0.438689f,
 2.449542f, 1.617673f, -2.103433f,
 1.551427f, 1.541017f, -1.464427f,
 1.551427f, 1.541017f, -1.464427f,
 2.432455f, 0.140376f, 0.438689f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.579682f, -0.282106f, 0.764451f},
{ -0.610411f, -0.384188f, 0.692675f},
{ -0.616055f, -0.406778f, 0.674543f},
{ -0.622267f, -0.434099f, 0.651416f},
{ 0.463767f, -0.234191f, 0.854444f},
{ 0.533738f, -0.397340f, 0.746488f},
{ 0.522477f, -0.368310f, 0.769003f},
{ 0.546717f, -0.432834f, 0.716768f},
{ 0.323845f, -0.918011f, 0.228868f},
{ -0.096395f, -0.251910f, 0.962938f},
{ -0.732878f, -0.524878f, 0.432889f},
{ -0.829205f, -0.175625f, 0.530636f},
{ -0.785731f, 0.445214f, 0.429431f},
{ -0.023760f, 0.742309f, 0.669636f},
{ -0.951433f, -0.054146f, -0.303057f},
{ -0.977674f, 0.208388f, -0.026999f},
{ -0.070710f, 0.970552f, 0.230279f},
{ -0.917365f, -0.383469f, 0.106738f},
{ 0.364460f, -0.924958f, -0.107806f},
{ -0.377676f, 0.856871f, 0.350903f},
{ -0.467072f, 0.578277f, -0.668909f},
{ -0.827651f, 0.399103f, 0.394603f},
{ -0.824936f, 0.166235f, -0.540228f},
{ -0.155365f, -0.311183f, 0.937564f},
{ 0.456731f, -0.225038f, 0.860671f},
{ -0.504487f, 0.180015f, -0.844445f},
{ -0.671480f, -0.027139f, -0.740526f},
{ -0.818927f, -0.486630f, 0.304221f},
{ 0.328317f, -0.312471f, 0.891387f},
{ 0.580917f, -0.372727f, 0.723609f},
{ -0.425734f, -0.117453f, 0.897193f},
{ -0.143092f, -0.611869f, 0.777908f},
{ -0.752456f, 0.081630f, -0.653565f},
{ -0.886121f, -0.443498f, 0.134532f},
{ -0.338204f, -0.612037f, -0.714862f},
{ -0.019864f, -0.993544f, 0.111693f},
{ 0.041258f, 0.106779f, 0.993427f},
{ -0.986919f, 0.015552f, 0.160464f},
{ 0.777651f, -0.585529f, 0.228943f},
{ -0.078726f, -0.747773f, -0.659271f},
{ -0.003545f, -0.328810f, -0.944389f},
{ -0.790322f, 0.455400f, -0.409881f},
{ -0.495438f, 0.370340f, 0.785742f},
{ -0.466690f, 0.802568f, -0.371599f},
{ -0.466013f, -0.050062f, 0.883360f},
{ 0.801802f, -0.565090f, 0.194390f},
{ 0.332416f, -0.099972f, -0.937820f},
{ 0.188517f, -0.791868f, 0.580868f},
{ -0.855900f, -0.049991f, -0.514719f},
{ -0.777310f, -0.285725f, -0.560492f},
{ 0.731982f, -0.515195f, -0.445843f},
{ -0.016785f, -0.679660f, -0.733335f},
{ -0.404190f, 0.843470f, 0.353820f},
{ -0.744550f, 0.512703f, 0.427529f},
{ 0.712010f, 0.269228f, 0.648504f},
{ 0.979369f, -0.200405f, -0.025978f},
{ 0.877828f, 0.297292f, 0.375547f},
{ 0.685548f, 0.128076f, -0.716673f},
{ -0.768610f, 0.236175f, -0.594525f},
{ -0.845529f, 0.373820f, 0.381234f},
{ -0.002138f, -0.988430f, -0.151666f},
{ -0.000763f, -0.988355f, -0.152162f},
{ -0.001769f, -0.988410f, -0.151799f},
{ -0.000412f, -0.988336f, -0.152288f},
{ -0.921132f, 0.321380f, -0.219616f},
{ -0.421186f, 0.734277f, 0.532390f},
{ 0.913112f, 0.247490f, -0.323999f},
{ 0.415465f, 0.730410f, 0.542116f},
{ 0.765768f, -0.449992f, 0.459463f},
{ 0.746082f, -0.199983f, 0.635113f},
{ 0.583437f, 0.539647f, 0.606945f},
{ 0.424370f, 0.826225f, 0.370489f},
{ 0.964237f, -0.051445f, 0.260003f},
{ 0.847340f, -0.530401f, 0.026270f},
{ 0.670715f, 0.689297f, -0.273882f},
{ 0.757060f, 0.141581f, -0.637820f},
{ 0.950985f, 0.094313f, 0.294506f},
{ -0.006312f, 0.072554f, -0.997345f},
{ 0.886787f, -0.234363f, -0.398351f},
{ 0.836890f, -0.379118f, 0.394822f},
{ 0.905418f, -0.342345f, 0.251034f},
{ 0.640412f, -0.524330f, -0.561205f},
{ -0.089937f, 0.057623f, -0.994279f},
{ -0.442209f, 0.499831f, 0.744728f},
{ 0.483151f, -0.366456f, 0.795157f},
{ -0.085471f, 0.873852f, -0.478621f},
{ 0.928651f, -0.138338f, -0.344195f},
{ -0.297893f, 0.203696f, -0.932613f},
{ 0.600778f, -0.512458f, -0.613557f},
{ 0.955415f, 0.236404f, 0.176905f},
{ -0.456956f, 0.764193f, 0.455194f},
{ -0.889793f, 0.361414f, -0.278653f},
{ 0.380641f, -0.500988f, 0.777254f},
{ 0.052519f, -0.686766f, -0.724979f},
{ 0.986813f, -0.120711f, 0.107834f},
{ -0.846782f, -0.352586f, -0.398300f},
{ 0.129534f, 0.037577f, -0.990863f},
{ -0.978562f, -0.140637f, -0.150461f},
{ 0.560575f, 0.316317f, -0.765310f},
{ 0.847756f, 0.492366f, 0.197195f},
{ 0.943951f, 0.063860f, 0.323850f},
{ -0.503651f, -0.076289f, 0.860532f},
{ -0.100274f, -0.253251f, 0.962190f},
{ -0.768781f, 0.592788f, -0.239956f},
{ -0.690851f, 0.152237f, 0.706788f},
{ 0.242140f, 0.635403f, -0.733233f},
{ 0.946106f, 0.215101f, -0.242106f},
{ -0.077339f, -0.987978f, -0.133857f},
{ -0.077174f, -0.987987f, -0.133887f},
{ -0.076698f, -0.988012f, -0.133973f},
{ -0.076524f, -0.988022f, -0.134005f},
{ 0.553400f, 0.791233f, 0.260189f},
{ 0.586239f, 0.405074f, -0.701598f},
{ -0.926945f, 0.374086f, 0.028872f},
{ -0.022252f, 0.800245f, 0.599260f},
{ 0.594322f, -0.804103f, 0.014149f},
{ 0.577913f, -0.815949f, 0.015607f},
{ 0.588237f, -0.808555f, 0.014693f},
{ 0.572358f, -0.819846f, 0.016094f},
{ -0.656024f, 0.430914f, 0.619634f},
{ -0.655635f, 0.431327f, 0.619758f},
{ -0.655672f, 0.431288f, 0.619746f},
{ -0.655289f, 0.431696f, 0.619868f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagAttack3.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105