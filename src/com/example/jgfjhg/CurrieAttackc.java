package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieAttackc {

static String TextureName = "CurrieAttack3.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 1.505204f, 6.617923f, -1.044925f,
 3.940257f, 5.325717f, -2.251930f,
 0.686702f, 5.563197f, -1.617827f,
 3.103554f, 4.276846f, -2.828734f,
 1.380514f, 5.041605f, 0.396017f,
 0.846898f, 5.703588f, -1.234303f,
 -0.595812f, 4.875460f, 0.907981f,
 -0.905135f, 5.740513f, -0.820437f,
 0.331199f, 5.008287f, 0.469815f,
 0.803270f, 5.097400f, -0.371855f,
 0.074701f, 5.197988f, -0.788699f,
 0.234550f, 5.804926f, 1.030894f,
 1.261179f, 6.032600f, -0.002339f,
 0.222198f, 6.396748f, -1.121131f,
 0.198867f, 6.918200f, 1.001715f,
 1.078427f, 6.941602f, 0.164267f,
 0.209658f, 7.291581f, -0.738403f,
 0.210752f, 6.973413f, -0.070401f,
 0.656593f, 6.807082f, -0.396474f,
 0.218225f, 6.531438f, -0.744523f,
 0.213385f, 7.659513f, -0.307900f,
 0.840032f, 7.268517f, -0.784783f,
 0.201232f, 6.873704f, -1.263311f,
 0.211439f, 7.914807f, -0.778778f,
 0.654479f, 7.609804f, -1.059060f,
 0.198105f, 7.358727f, -1.452611f,
 0.164595f, 2.731903f, -0.319963f,
 0.012034f, 2.132440f, -1.418945f,
 -1.222457f, 0.000188f, 1.332246f,
 1.067522f, 0.000153f, -0.957858f,
 0.638459f, 4.267130f, 0.594495f,
 -0.339424f, 5.244646f, -1.149213f,
 0.314692f, 5.182528f, 0.406781f,
 0.072293f, 5.573091f, -0.788536f,
 0.744153f, 5.395449f, -0.265883f,
 0.564506f, 5.325962f, 0.029103f,
 0.365718f, 5.493419f, -0.639088f,
 0.883924f, 2.658862f, -0.558298f,
 1.142579f, 2.510477f, -1.142220f,
 1.486753f, 0.000165f, 1.332478f,
 0.132427f, -0.000047f, 1.960233f,
 0.631487f, 2.210472f, -1.375371f,
 1.695602f, -0.000164f, 0.396758f,
 1.280639f, 4.495776f, -0.032614f,
 1.357136f, 5.128608f, -1.017775f,
 0.712347f, 5.273318f, -1.402595f,
 2.530846f, 5.165057f, -1.622022f,
 1.761992f, 4.262115f, -2.257801f,
 1.605310f, 4.470852f, -1.989872f,
 2.241860f, 5.377389f, -1.402936f,
 0.644129f, 4.562515f, -1.089795f,
 0.837662f, 4.495819f, -0.724255f,
 1.700736f, 4.779012f, -2.068684f,
 2.316406f, 6.008986f, -1.401459f,
 0.915807f, 4.983180f, -0.413749f,
 1.623607f, 4.913170f, -2.321196f,
 2.247993f, 6.044646f, -2.060000f,
 1.271653f, 5.372445f, -1.039384f,
 1.683672f, 4.611868f, -2.728628f,
 2.536638f, 5.831975f, -2.279466f,
 0.875683f, 5.483092f, -1.230782f,
 1.961958f, 4.403903f, -2.592785f,
 2.906930f, 5.574594f, -1.849077f,
 0.517223f, 5.289111f, -1.131549f,
 -0.586039f, 2.668939f, -0.466512f,
 -1.850536f, -0.000152f, -0.022509f,
 -1.222759f, 0.000165f, -1.377033f,
 -0.960036f, 2.487818f, -0.970604f,
 -0.287193f, -0.000165f, -1.585890f,
 -0.571000f, 2.244273f, -1.310291f,
 -1.172941f, 4.959242f, 0.310916f,
 -0.330297f, 4.386421f, 0.809817f,
 -1.155398f, 5.158750f, -0.424570f,
 -0.359653f, 5.368309f, -0.030998f,
 -0.061945f, 5.306893f, 0.176011f,
 -0.241997f, 5.488143f, -0.469346f,
 -2.255835f, 3.209906f, 0.132320f,
 -1.984768f, 3.346510f, 0.424438f,
 -1.909591f, 4.216137f, -0.440554f,
 -2.159727f, 4.189539f, -0.786178f,
 -0.582212f, 4.400544f, 0.008846f,
 -0.770762f, 4.469599f, -0.348657f,
 -2.184355f, 3.288565f, 1.024846f,
 -2.101411f, 4.271423f, -0.120633f,
 -0.415320f, 4.891872f, 0.283352f,
 -2.702109f, 3.688645f, 0.920339f,
 -2.318085f, 4.527361f, -0.155738f,
 -1.230907f, 4.915487f, 0.460847f,
 -2.972863f, 3.552824f, 0.629549f,
 -2.600218f, 4.505139f, -0.548135f,
 -1.251671f, 5.301219f, 0.230934f,
 -2.738082f, 3.010960f, 0.429873f,
 -2.573922f, 4.192635f, -0.750474f,
 -0.811738f, 5.200184f, -0.434201f,
 -0.431599f, 5.070653f, -0.076233f,
 -0.841615f, 6.028784f, -0.006304f,
 -0.661659f, 6.941309f, 0.146194f,
 -0.228406f, 6.806840f, -0.404076f,
 -0.406678f, 7.268642f, -0.791752f,
 -0.222236f, 7.611971f, -1.065178f,
 -1.049747f, 1.941818f, 0.684365f,
 -0.044879f, 1.976342f, 1.192059f,
 1.045186f, 1.914682f, 0.913345f,
 1.559788f, 1.866358f, 0.545620f,
 1.164703f, 1.280041f, 0.147532f,
 0.324788f, 1.065219f, -0.241421f,
 -0.686346f, 1.246621f, -0.394759f,
 -1.224230f, 1.586284f, -0.160889f,
 2.530846f, 5.165057f, -1.622022f,
 2.530846f, 5.165057f, -1.622022f,
 1.761992f, 4.262115f, -2.257801f,
 1.761992f, 4.262115f, -2.257801f,
 0.644129f, 4.562515f, -1.089795f,
 0.644129f, 4.562515f, -1.089795f,
 2.906930f, 5.574594f, -1.849077f,
 2.906930f, 5.574594f, -1.849077f,
 0.324788f, 1.065219f, -0.241421f,
 0.324788f, 1.065219f, -0.241421f,
 0.012034f, 2.132440f, -1.418945f,
 -0.044879f, 1.976342f, 1.192059f,
 -0.044879f, 1.976342f, 1.192059f,
 0.164595f, 2.731903f, -0.319963f,
 0.164595f, 2.731903f, -0.319963f,
 0.638459f, 4.267130f, 0.594495f,
 0.638459f, 4.267130f, 0.594495f,
 0.012034f, 2.132440f, -1.418945f,
 -0.339424f, 5.244646f, -1.149213f,
 -0.339424f, 5.244646f, -1.149213f,
 0.638459f, 4.267130f, 0.594495f,
 0.314692f, 5.182528f, 0.406781f,
 0.314692f, 5.182528f, 0.406781f,
 -0.339424f, 5.244646f, -1.149213f,
 -0.339424f, 5.244646f, -1.149213f,
 0.072293f, 5.573091f, -0.788536f,
 -2.255835f, 3.209906f, 0.132320f,
 -2.255835f, 3.209906f, 0.132320f,
 -2.159727f, 4.189539f, -0.786178f,
 -0.770762f, 4.469599f, -0.348657f,
 -0.770762f, 4.469599f, -0.348657f,
 -2.159727f, 4.189539f, -0.786178f,
 -2.738082f, 3.010960f, 0.429873f,
 -2.738082f, 3.010960f, 0.429873f,
 0.234550f, 5.804926f, 1.030894f,
 0.331199f, 5.008287f, 0.469815f,
 0.331199f, 5.008287f, 0.469815f,
 0.222198f, 6.396748f, -1.121131f,
 0.074701f, 5.197988f, -0.788699f,
 0.074701f, 5.197988f, -0.788699f,
 0.198867f, 6.918200f, 1.001715f,
 0.234550f, 5.804926f, 1.030894f,
 0.234550f, 5.804926f, 1.030894f,
 0.222198f, 6.396748f, -1.121131f,
 0.222198f, 6.396748f, -1.121131f,
 0.209658f, 7.291581f, -0.738403f,
 0.209658f, 7.291581f, -0.738403f,
 0.198867f, 6.918200f, 1.001715f,
 0.213385f, 7.659513f, -0.307900f,
 0.213385f, 7.659513f, -0.307900f,
 0.210752f, 6.973413f, -0.070401f,
 0.201232f, 6.873704f, -1.263311f,
 0.218225f, 6.531438f, -0.744523f,
 0.218225f, 6.531438f, -0.744523f,
 0.211439f, 7.914807f, -0.778778f,
 0.213385f, 7.659513f, -0.307900f,
 0.213385f, 7.659513f, -0.307900f,
 0.198105f, 7.358727f, -1.452611f,
 0.201232f, 6.873704f, -1.263311f,
 0.201232f, 6.873704f, -1.263311f,
 0.198105f, 7.358727f, -1.452611f,
 0.211439f, 7.914807f, -0.778778f,
 -0.044879f, 1.976342f, 1.192059f,
 -1.222457f, 0.000188f, 1.332246f,
 -1.222457f, 0.000188f, 1.332246f,
 1.067522f, 0.000153f, -0.957858f,
 1.067522f, 0.000153f, -0.957858f,
 0.324788f, 1.065219f, -0.241421f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.121869f, 0.545115f, -0.829456f},
{ -0.121103f, 0.549021f, -0.826989f},
{ -0.121561f, 0.546687f, -0.828466f},
{ -0.120793f, 0.550593f, -0.825988f},
{ 0.018074f, 0.928430f, 0.371068f},
{ 0.065821f, 0.915006f, 0.398035f},
{ 0.066688f, 0.914735f, 0.398513f},
{ 0.119781f, 0.896228f, 0.427115f},
{ 0.253291f, 0.565668f, 0.784770f},
{ 0.933698f, 0.309396f, 0.180227f},
{ 0.721806f, 0.240284f, 0.649046f},
{ 0.821074f, -0.156659f, -0.548904f},
{ 0.743546f, -0.046253f, -0.667083f},
{ 0.251262f, -0.261229f, -0.932001f},
{ -0.059681f, -0.244768f, -0.967743f},
{ 0.308036f, 0.028184f, -0.950957f},
{ -0.003424f, 0.427291f, 0.904108f},
{ 0.059779f, 0.229477f, 0.971477f},
{ 0.890621f, 0.212287f, -0.402156f},
{ 0.935629f, -0.038078f, 0.350925f},
{ 0.415077f, -0.287414f, 0.863194f},
{ -0.452634f, 0.191378f, -0.870917f},
{ 0.054115f, 0.206070f, -0.977040f},
{ 0.621419f, 0.732860f, 0.277047f},
{ 0.639623f, 0.508924f, 0.576090f},
{ 0.292832f, 0.453800f, 0.841615f},
{ -0.019818f, 0.750384f, -0.660705f},
{ 0.127151f, 0.956416f, -0.262873f},
{ -0.231563f, -0.166967f, 0.958384f},
{ 0.498123f, -0.482779f, 0.720276f},
{ 0.626274f, -0.637295f, 0.449039f},
{ 0.060082f, -0.997576f, -0.035110f},
{ -0.683963f, -0.466164f, -0.561147f},
{ 0.678525f, -0.635310f, 0.368763f},
{ -0.407697f, 0.697417f, 0.589401f},
{ 0.035777f, 0.541626f, 0.839858f},
{ 0.817297f, -0.106667f, 0.566258f},
{ -0.583391f, 0.782155f, -0.218832f},
{ -0.465714f, 0.786005f, -0.406579f},
{ 0.805484f, 0.469740f, 0.361302f},
{ 0.444920f, 0.263400f, -0.855959f},
{ -0.559517f, -0.402843f, -0.724333f},
{ -0.263742f, 0.879382f, -0.396394f},
{ 0.978548f, -0.087348f, -0.186584f},
{ 0.173323f, -0.720920f, -0.670995f},
{ -0.766198f, 0.253529f, -0.590478f},
{ -0.023979f, -0.287841f, 0.957378f},
{ 0.129378f, -0.586949f, 0.799220f},
{ 0.992950f, -0.106136f, -0.052782f},
{ 0.889136f, -0.298180f, -0.347170f},
{ 0.045320f, 0.040527f, -0.998150f},
{ -0.102171f, -0.238696f, -0.965705f},
{ -0.017828f, 0.572914f, 0.819422f},
{ 0.784890f, 0.602858f, 0.143215f},
{ 0.002409f, 0.858320f, -0.513110f},
{ -0.008647f, 0.327131f, 0.944940f},
{ 0.935070f, -0.128306f, 0.330427f},
{ -0.002467f, 0.616184f, 0.787598f},
{ 0.999266f, 0.031899f, 0.021205f},
{ 0.018630f, -0.834291f, -0.551010f},
{ -0.003004f, -0.666823f, -0.745210f},
{ 0.001168f, 0.999966f, -0.008123f},
{ 0.728836f, 0.526781f, -0.437379f},
{ 0.003028f, 0.148817f, -0.988860f},
{ -0.960126f, -0.073442f, -0.269748f},
{ -0.972463f, 0.132743f, -0.191561f},
{ -0.597376f, 0.208554f, 0.774369f},
{ -0.712919f, 0.537202f, 0.450733f},
{ -0.411328f, -0.186131f, -0.892280f},
{ 0.040867f, 0.180364f, -0.982751f},
{ -0.316185f, -0.332143f, 0.888655f},
{ -0.839653f, -0.019394f, 0.542777f},
{ -0.872019f, 0.207733f, -0.443204f},
{ -0.224294f, 0.809521f, 0.542557f},
{ -0.323179f, 0.598799f, 0.732799f},
{ -0.365339f, 0.919704f, -0.143780f},
{ 0.279276f, -0.335235f, -0.899790f},
{ 0.518997f, -0.849877f, -0.091381f},
{ 0.229400f, -0.768032f, -0.597915f},
{ 0.948460f, -0.304165f, 0.088924f},
{ 0.264805f, -0.391898f, -0.881076f},
{ 0.017311f, -0.669853f, 0.742292f},
{ 0.452283f, -0.032483f, 0.891283f},
{ 0.491557f, -0.021440f, 0.870582f},
{ 0.263290f, -0.063112f, 0.962650f},
{ -0.160001f, 0.553419f, 0.817390f},
{ -0.490687f, 0.625445f, 0.606667f},
{ -0.085210f, -0.290139f, 0.953183f},
{ -0.998147f, 0.055815f, 0.024239f},
{ -0.619134f, 0.690216f, -0.374533f},
{ -0.307987f, 0.951256f, 0.015994f},
{ -0.503782f, 0.023716f, -0.863505f},
{ -0.624729f, -0.739904f, -0.249511f},
{ -0.043115f, 0.708644f, -0.704247f},
{ -0.996545f, -0.078407f, -0.027382f},
{ -0.900323f, -0.398113f, 0.175854f},
{ -0.793997f, 0.592333f, 0.136788f},
{ -0.998958f, 0.034476f, 0.029910f},
{ -0.940424f, -0.131358f, 0.313605f},
{ -0.732497f, 0.535539f, -0.420293f},
{ -0.909043f, 0.407148f, -0.088725f},
{ -0.605761f, 0.366093f, 0.706420f},
{ -0.105173f, 0.515202f, 0.850591f},
{ 0.645179f, 0.234345f, 0.727204f},
{ 0.973788f, 0.172824f, -0.147882f},
{ 0.494524f, 0.595264f, -0.633330f},
{ 0.145982f, 0.691910f, -0.707071f},
{ -0.534215f, 0.570368f, -0.623935f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieAttack3.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73