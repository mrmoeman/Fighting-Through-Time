package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnaridleb {

static String TextureName = "Idile2.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -0.309100f, 9.860690f, 2.818668f,
 0.993630f, 10.881414f, 3.969220f,
 -0.343940f, 14.901716f, 3.962019f,
 -1.510322f, 12.354513f, 1.989650f,
 3.231090f, 9.849191f, 3.334980f,
 1.610628f, 10.880030f, 4.066117f,
 2.924338f, 14.895622f, 4.464317f,
 4.719552f, 12.336921f, 2.761168f,
 -0.157888f, 11.017252f, 3.573316f,
 -0.278303f, 9.860311f, 4.189132f,
 0.110417f, 7.668865f, 3.846966f,
 1.642732f, 5.665066f, 3.217044f,
 1.132141f, 9.740695f, 4.999177f,
 1.303949f, 11.874025f, 3.974841f,
 0.491983f, 9.350781f, 3.403695f,
 0.229568f, 10.749532f, 2.842119f,
 1.844366f, 11.647986f, 1.948545f,
 0.518495f, 5.263310f, -0.347386f,
 0.168008f, 6.847089f, 1.787445f,
 -1.694617f, 4.338336f, 0.913839f,
 -2.124895f, 4.177073f, -1.408046f,
 -0.023945f, 9.355064f, 4.124275f,
 -3.783214f, 8.736979f, 1.849208f,
 2.791706f, 9.339955f, 3.648876f,
 -0.124620f, 10.788143f, -1.466458f,
 -0.469175f, 2.763764f, -2.116520f,
 1.002809f, 3.218936f, 1.778071f,
 -2.530932f, 10.471623f, 4.080739f,
 1.745534f, 12.514941f, 1.775041f,
 -0.641263f, 5.509878f, 0.933396f,
 0.964631f, 5.204907f, 0.425343f,
 -0.373845f, 6.652590f, -1.898570f,
 -1.513797f, 6.409654f, -0.671254f,
 -1.412539f, 6.091201f, 0.502598f,
 -2.592708f, 3.584186f, 0.030299f,
 0.226926f, 2.022931f, 0.151229f,
 -1.981438f, 8.467610f, 4.438580f,
 -1.116257f, 6.550550f, 3.774793f,
 -2.816853f, 5.858322f, 3.564142f,
 -3.803735f, 7.209029f, 3.992629f,
 -1.176557f, 5.501267f, 6.535751f,
 -0.673129f, 4.466451f, 5.839346f,
 -1.779048f, 4.014244f, 5.701600f,
 -2.288661f, 5.046818f, 6.399490f,
 -1.938927f, 10.274168f, 1.596093f,
 -0.777438f, 10.157523f, 3.557169f,
 -1.777923f, 8.708303f, 1.269180f,
 -0.961605f, 8.061894f, 2.797489f,
 -0.999033f, 2.113501f, 1.204388f,
 -0.966536f, 3.316240f, 2.723305f,
 -2.102052f, 2.366218f, 1.448595f,
 -2.079512f, 3.293539f, 2.611293f,
 -1.031301f, -0.013434f, 0.884357f,
 -0.889358f, -0.006611f, 5.156851f,
 -2.385132f, -0.011246f, 1.046353f,
 -2.384308f, -0.006128f, 5.101968f,
 -0.518362f, 4.092501f, -1.272390f,
 -1.329162f, 4.218960f, -0.736769f,
 -1.107099f, 4.339176f, 0.138902f,
 -0.028988f, 3.925740f, -0.200910f,
 -2.154550f, 1.391505f, 2.607329f,
 -2.197373f, 0.821325f, 1.496794f,
 -1.104784f, 0.816536f, 1.259443f,
 -1.058563f, 1.392500f, 2.674938f,
 2.853367f, 11.011981f, 4.029331f,
 2.737672f, 9.858420f, 4.666923f,
 2.467082f, 7.668865f, 4.220699f,
 3.780298f, 9.350757f, 1.505422f,
 3.426282f, 10.749143f, 0.999478f,
 2.542633f, 6.847090f, 0.418901f,
 2.748842f, 3.808879f, -0.955149f,
 1.185770f, 4.542537f, -3.279797f,
 5.472283f, 8.826559f, 1.015706f,
 4.049071f, 9.472555f, -3.511939f,
 5.766305f, 10.840508f, -1.287718f,
 2.208870f, 5.509936f, -0.709636f,
 1.279057f, 6.429585f, -2.267407f,
 2.221278f, 6.091661f, -1.594196f,
 2.521695f, 3.522538f, -2.585689f,
 6.435300f, 9.014487f, -2.111754f,
 6.045970f, 6.943201f, -2.786094f,
 5.179180f, 7.594907f, -4.287418f,
 5.305168f, 9.292435f, -4.069201f,
 8.516116f, 6.918538f, -4.418730f,
 7.998767f, 5.697126f, -4.650239f,
 7.432749f, 6.122694f, -5.630610f,
 7.950098f, 7.344105f, -5.399102f,
 3.429995f, 10.274390f, -1.503713f,
 4.585793f, 10.131514f, 0.512351f,
 3.066691f, 8.708303f, -1.527860f,
 3.991441f, 8.056656f, -0.056510f,
 1.396480f, 1.825054f, -1.544939f,
 2.446189f, 1.147096f, -0.084973f,
 2.524134f, 1.900045f, -1.853785f,
 3.306419f, 1.440830f, -0.753503f,
 0.506598f, 0.002513f, -3.176320f,
 2.527917f, -0.006637f, 0.604033f,
 1.759534f, 0.003423f, -3.715850f,
 3.795267f, -0.006819f, -0.190800f,
 0.202641f, 4.104271f, -1.735981f,
 1.136956f, 4.256546f, -2.179209f,
 1.762784f, 4.154082f, -1.292325f,
 0.796743f, 3.820392f, -0.676451f,
 2.454082f, 1.004293f, -2.134929f,
 1.829668f, 0.825279f, -3.220549f,
 0.764010f, 0.827967f, -2.878322f,
 1.567844f, 0.906789f, -1.485848f,
 4.045694f, 9.625986f, -8.537511f,
 6.547435f, 7.161191f, -11.262652f,
 8.800855f, 6.091648f, -0.727778f,
 11.302596f, 3.626855f, -3.452922f,
 0.811004f, 9.238209f, 5.072852f,
 2.109720f, 4.711156f, 8.827480f,
 -3.880338f, 2.358558f, 7.972332f,
 -5.223706f, 6.816858f, 4.290215f,
 -2.530932f, 10.471623f, 4.080739f,
 1.745534f, 12.514941f, 1.775041f,
 1.745534f, 12.514941f, 1.775041f,
 -1.412539f, 6.091201f, 0.502598f,
 -1.412539f, 6.091201f, 0.502598f,
 -2.530932f, 10.471623f, 4.080739f,
 -2.592708f, 3.584186f, 0.030299f,
 -1.412539f, 6.091201f, 0.502598f,
 -1.412539f, 6.091201f, 0.502598f,
 -2.592708f, 3.584186f, 0.030299f,
 0.226926f, 2.022931f, 0.151229f,
 -1.779048f, 4.014244f, 5.701600f,
 -2.288661f, 5.046818f, 6.399490f,
 -2.288661f, 5.046818f, 6.399490f,
 -1.779048f, 4.014244f, 5.701600f,
 -1.779048f, 4.014244f, 5.701600f,
 -2.816853f, 5.858322f, 3.564142f,
 -2.288661f, 5.046818f, 6.399490f,
 -2.288661f, 5.046818f, 6.399490f,
 -2.816853f, 5.858322f, 3.564142f,
 -1.777923f, 8.708303f, 1.269180f,
 -1.777923f, 8.708303f, 1.269180f,
 -0.999033f, 2.113501f, 1.204388f,
 -0.999033f, 2.113501f, 1.204388f,
 -1.104784f, 0.816536f, 1.259443f,
 -0.518362f, 4.092501f, -1.272390f,
 -0.999033f, 2.113501f, 1.204388f,
 -0.999033f, 2.113501f, 1.204388f,
 -2.197373f, 0.821325f, 1.496794f,
 -2.154550f, 1.391505f, 2.607329f,
 -2.154550f, 1.391505f, 2.607329f,
 -1.031301f, -0.013434f, 0.884357f,
 -1.104784f, 0.816536f, 1.259443f,
 -1.104784f, 0.816536f, 1.259443f,
 -2.197373f, 0.821325f, 1.496794f,
 -0.889358f, -0.006611f, 5.156851f,
 -1.031301f, -0.013434f, 0.884357f,
 -1.058563f, 1.392500f, 2.674938f,
 -1.058563f, 1.392500f, 2.674938f,
 -1.031301f, -0.013434f, 0.884357f,
 -1.104784f, 0.816536f, 1.259443f,
 -2.154550f, 1.391505f, 2.607329f,
 -1.058563f, 1.392500f, 2.674938f,
 -1.058563f, 1.392500f, 2.674938f,
 -0.889358f, -0.006611f, 5.156851f,
 1.642732f, 5.665066f, 3.217044f,
 1.132141f, 9.740695f, 4.999177f,
 1.132141f, 9.740695f, 4.999177f,
 1.132141f, 9.740695f, 4.999177f,
 1.132141f, 9.740695f, 4.999177f,
 1.303949f, 11.874025f, 3.974841f,
 1.844366f, 11.647986f, 1.948545f,
 1.844366f, 11.647986f, 1.948545f,
 1.303949f, 11.874025f, 3.974841f,
 1.642732f, 5.665066f, 3.217044f,
 1.642732f, 5.665066f, 3.217044f,
 0.518495f, 5.263310f, -0.347386f,
 1.745534f, 12.514941f, 1.775041f,
 -0.124620f, 10.788143f, -1.466458f,
 -0.124620f, 10.788143f, -1.466458f,
 5.766305f, 10.840508f, -1.287718f,
 1.745534f, 12.514941f, 1.775041f,
 1.745534f, 12.514941f, 1.775041f,
 2.791706f, 9.339955f, 3.648876f,
 -0.373845f, 6.652590f, -1.898570f,
 -0.124620f, 10.788143f, -1.466458f,
 -0.124620f, 10.788143f, -1.466458f,
 0.964631f, 5.204907f, 0.425343f,
 0.964631f, 5.204907f, 0.425343f,
 1.002809f, 3.218936f, 1.778071f,
 5.766305f, 10.840508f, -1.287718f,
 2.221278f, 6.091661f, -1.594196f,
 2.221278f, 6.091661f, -1.594196f,
 -0.373845f, 6.652590f, -1.898570f,
 -0.373845f, 6.652590f, -1.898570f,
 -0.469175f, 2.763764f, -2.116520f,
 2.791706f, 9.339955f, 3.648876f,
 0.964631f, 5.204907f, 0.425343f,
 0.964631f, 5.204907f, 0.425343f,
 2.521695f, 3.522538f, -2.585689f,
 2.221278f, 6.091661f, -1.594196f,
 2.221278f, 6.091661f, -1.594196f,
 1.002809f, 3.218936f, 1.778071f,
 0.226926f, 2.022931f, 0.151229f,
 0.226926f, 2.022931f, 0.151229f,
 2.521695f, 3.522538f, -2.585689f,
 0.226926f, 2.022931f, 0.151229f,
 -0.469175f, 2.763764f, -2.116520f,
 -0.469175f, 2.763764f, -2.116520f,
 7.950098f, 7.344105f, -5.399102f,
 7.950098f, 7.344105f, -5.399102f,
 7.432749f, 6.122694f, -5.630610f,
 7.432749f, 6.122694f, -5.630610f,
 7.432749f, 6.122694f, -5.630610f,
 5.179180f, 7.594907f, -4.287418f,
 7.950098f, 7.344105f, -5.399102f,
 7.950098f, 7.344105f, -5.399102f,
 3.066691f, 8.708303f, -1.527860f,
 3.066691f, 8.708303f, -1.527860f,
 5.179180f, 7.594907f, -4.287418f,
 0.764010f, 0.827967f, -2.878322f,
 1.396480f, 1.825054f, -1.544939f,
 1.396480f, 1.825054f, -1.544939f,
 1.396480f, 1.825054f, -1.544939f,
 1.396480f, 1.825054f, -1.544939f,
 0.202641f, 4.104271f, -1.735981f,
 2.454082f, 1.004293f, -2.134929f,
 2.454082f, 1.004293f, -2.134929f,
 1.829668f, 0.825279f, -3.220549f,
 1.829668f, 0.825279f, -3.220549f,
 0.764010f, 0.827967f, -2.878322f,
 0.764010f, 0.827967f, -2.878322f,
 0.506598f, 0.002513f, -3.176320f,
 0.764010f, 0.827967f, -2.878322f,
 0.506598f, 0.002513f, -3.176320f,
 1.567844f, 0.906789f, -1.485848f,
 1.567844f, 0.906789f, -1.485848f,
 0.506598f, 0.002513f, -3.176320f,
 2.527917f, -0.006637f, 0.604033f,
 2.454082f, 1.004293f, -2.134929f,
 1.567844f, 0.906789f, -1.485848f,
 1.567844f, 0.906789f, -1.485848f,
 2.527917f, -0.006637f, 0.604033f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.637943f, -0.051867f, 0.768335f},
{ -0.669754f, -0.165709f, 0.723858f},
{ -0.675993f, -0.193542f, 0.711038f},
{ -0.682443f, -0.225806f, 0.695186f},
{ 0.397279f, -0.026112f, 0.917327f},
{ 0.457044f, -0.198775f, 0.866948f},
{ 0.447647f, -0.168681f, 0.878157f},
{ 0.468522f, -0.237655f, 0.850886f},
{ 0.324470f, -0.864817f, 0.383159f},
{ -0.155651f, -0.012634f, 0.987731f},
{ -0.699126f, -0.365432f, 0.614559f},
{ -0.859860f, -0.005105f, 0.510504f},
{ -0.761140f, 0.591371f, 0.266359f},
{ -0.088653f, 0.888081f, 0.451057f},
{ -0.885688f, 0.004761f, -0.464256f},
{ -0.816230f, 0.246183f, -0.522650f},
{ 0.310975f, 0.949407f, -0.043842f},
{ -0.819380f, -0.520418f, 0.240379f},
{ 0.221048f, -0.974438f, 0.040111f},
{ 0.018610f, 0.997364f, 0.070134f},
{ -0.439082f, 0.654707f, -0.615277f},
{ -0.674631f, 0.522481f, 0.521427f},
{ -0.980781f, 0.155676f, -0.117620f},
{ 0.018974f, -0.218809f, 0.975583f},
{ 0.478404f, -0.168409f, 0.861840f},
{ -0.501669f, 0.158111f, -0.850488f},
{ -0.808036f, 0.075495f, -0.584276f},
{ -0.729928f, -0.458378f, 0.507045f},
{ 0.324984f, -0.259002f, 0.909562f},
{ 0.436440f, -0.375870f, 0.817461f},
{ -0.421168f, -0.093591f, 0.902141f},
{ -0.113191f, -0.500470f, 0.858323f},
{ -0.729121f, 0.027329f, -0.683839f},
{ -0.864847f, -0.469892f, 0.176753f},
{ -0.324392f, -0.672114f, -0.665608f},
{ -0.000818f, -0.983963f, 0.178372f},
{ 0.521973f, 0.430934f, 0.736097f},
{ -0.717744f, -0.023455f, 0.695912f},
{ 0.904550f, -0.402233f, -0.141412f},
{ -0.210022f, -0.925709f, -0.314568f},
{ -0.361799f, -0.698422f, -0.617502f},
{ -0.963326f, 0.199748f, 0.179175f},
{ -0.120796f, 0.669318f, 0.733091f},
{ -0.864623f, 0.502270f, -0.012318f},
{ -0.328779f, 0.610196f, 0.720808f},
{ 0.885713f, -0.274902f, -0.374088f},
{ -0.616934f, -0.210947f, -0.758217f},
{ 0.964279f, -0.237305f, 0.117698f},
{ -0.877529f, -0.044414f, -0.477462f},
{ -0.718764f, -0.436188f, -0.541405f},
{ 0.762575f, -0.526168f, -0.376334f},
{ -0.043861f, -0.776321f, -0.628810f},
{ -0.331737f, 0.911637f, 0.242629f},
{ -0.704934f, 0.560229f, 0.434985f},
{ 0.670041f, 0.370124f, 0.643470f},
{ 0.983347f, -0.178855f, -0.032246f},
{ 0.896960f, 0.302892f, 0.322053f},
{ 0.647030f, 0.160407f, -0.745401f},
{ -0.724162f, 0.232001f, -0.649434f},
{ -0.872720f, 0.367417f, 0.321504f},
{ -0.001419f, -0.999998f, 0.001644f},
{ -0.000583f, -0.999999f, 0.001340f},
{ -0.001195f, -0.999998f, 0.001563f},
{ -0.000370f, -0.999999f, 0.001262f},
{ -0.911878f, 0.293402f, -0.287042f},
{ -0.426375f, 0.803707f, 0.415042f},
{ 0.900311f, 0.215427f, -0.378194f},
{ 0.421186f, 0.802066f, 0.423429f},
{ 0.696200f, -0.450491f, 0.558895f},
{ 0.757609f, -0.033871f, 0.651829f},
{ 0.709423f, 0.553028f, 0.436897f},
{ 0.818721f, 0.564349f, 0.105855f},
{ 0.956827f, -0.217516f, 0.192792f},
{ 0.794332f, -0.607253f, 0.016749f},
{ 0.777450f, 0.551933f, -0.301564f},
{ 0.275567f, 0.175144f, -0.945192f},
{ 0.887792f, -0.242331f, 0.391282f},
{ -0.157861f, 0.037435f, -0.986752f},
{ 0.771413f, -0.404448f, -0.491268f},
{ 0.788822f, -0.537425f, 0.298218f},
{ 0.910461f, -0.337510f, 0.239055f},
{ 0.635235f, -0.539297f, -0.552843f},
{ -0.134418f, 0.011025f, -0.990863f},
{ 0.902636f, 0.110672f, 0.415933f},
{ 0.180844f, -0.934242f, 0.307389f},
{ 0.377331f, 0.645206f, -0.664327f},
{ -0.425532f, -0.561214f, -0.709902f},
{ -0.035925f, 0.808939f, -0.586794f},
{ -0.698364f, -0.432079f, -0.570610f},
{ 0.811000f, 0.441781f, 0.383547f},
{ 0.799037f, 0.472431f, 0.371954f},
{ -0.028827f, 0.915987f, -0.400172f},
{ 0.048488f, -0.858707f, 0.510168f},
{ -0.783918f, -0.485132f, -0.387453f},
{ 0.293320f, -0.795390f, 0.530394f},
{ -0.794067f, -0.450161f, -0.408428f},
{ 0.090033f, -0.039531f, -0.995154f},
{ -0.965863f, -0.205230f, -0.158078f},
{ 0.546450f, 0.364001f, -0.754252f},
{ 0.799417f, 0.547260f, 0.247867f},
{ 0.912647f, 0.078314f, 0.401175f},
{ -0.458604f, -0.071654f, 0.885747f},
{ 0.021574f, -0.258534f, 0.965761f},
{ -0.742453f, 0.613349f, -0.269382f},
{ -0.739283f, 0.212305f, 0.639051f},
{ 0.171991f, 0.668798f, -0.723276f},
{ 0.911058f, 0.245463f, -0.331243f},
{ -0.001443f, -0.999997f, -0.002072f},
{ -0.001203f, -0.999997f, -0.002115f},
{ -0.000510f, -0.999997f, -0.002238f},
{ -0.000257f, -0.999997f, -0.002283f},
{ 0.422120f, 0.893804f, 0.151420f},
{ 0.517353f, 0.370030f, -0.771637f},
{ -0.935400f, 0.345233f, -0.076422f},
{ -0.044379f, 0.907757f, 0.417142f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066065f},
{ -0.662852f, -0.745831f, 0.066064f},
{ -0.320287f, 0.548629f, 0.772284f},
{ -0.322087f, 0.545509f, 0.773744f},
{ -0.321897f, 0.545840f, 0.773590f},
{ -0.323758f, 0.542597f, 0.775093f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: Idile2.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105