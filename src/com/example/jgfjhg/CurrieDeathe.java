package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeathe {

static String TextureName = "CurrieDeath5.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -1.877702f, 1.099743f, -9.339971f,
 -2.127000f, 1.339341f, -6.345562f,
 -1.454959f, 2.490968f, -9.396636f,
 -1.702750f, 2.737601f, -6.404669f,
 0.072720f, 3.175730f, -10.173844f,
 -0.738657f, 4.698922f, -9.610979f,
 1.704254f, 3.310616f, -8.907573f,
 0.712446f, 4.815870f, -8.641037f,
 0.802892f, 3.365763f, -9.499376f,
 -0.101100f, 3.818985f, -9.601016f,
 0.078171f, 4.218283f, -9.022162f,
 1.534329f, 4.016501f, -9.971400f,
 0.257454f, 4.557340f, -10.456903f,
 -0.136402f, 5.199601f, -9.078529f,
 1.821003f, 5.164446f, -10.050762f,
 0.704422f, 5.401453f, -10.468997f,
 0.395235f, 5.963147f, -9.369613f,
 0.904863f, 5.490251f, -9.595611f,
 0.382591f, 5.412631f, -9.832487f,
 0.220354f, 5.234059f, -9.255537f,
 0.855244f, 6.214182f, -9.570960f,
 0.066886f, 5.956991f, -9.883509f,
 -0.142938f, 5.706427f, -9.106985f,
 0.500796f, 6.575962f, -9.419052f,
 -0.011442f, 6.355459f, -9.651769f,
 -0.198632f, 6.223024f, -9.088800f,
 0.344973f, 2.501988f, -7.093859f,
 -0.423905f, 3.594401f, -6.451968f,
 0.968184f, 0.037718f, -4.092528f,
 -0.866941f, 2.621289f, -3.424500f,
 0.612947f, 2.706463f, -8.834626f,
 0.177194f, 4.888666f, -8.783070f,
 0.792173f, 3.526122f, -9.552254f,
 0.136562f, 4.494303f, -9.207012f,
 0.055638f, 3.970508f, -9.732810f,
 0.380255f, 3.759353f, -9.655644f,
 0.048781f, 4.340726f, -9.419472f,
 -0.349863f, 2.380464f, -7.233231f,
 -0.855184f, 2.774878f, -7.039447f,
 -1.568179f, 0.788773f, -4.678034f,
 -0.384846f, -0.121171f, -4.703882f,
 -0.796881f, 3.255871f, -6.686906f,
 -1.637653f, 1.642496f, -4.247790f,
 -0.267426f, 2.851705f, -9.075146f,
 -0.962365f, 3.755194f, -9.353779f,
 -0.764380f, 4.453876f, -9.115197f,
 -1.397574f, 1.766489f, -7.655533f,
 -1.133154f, 3.084681f, -7.722546f,
 -1.103525f, 2.919801f, -8.131514f,
 -1.355536f, 1.654669f, -8.058803f,
 -0.528344f, 3.946418f, -8.572134f,
 -0.425495f, 3.563445f, -8.696944f,
 -1.435999f, 2.815304f, -8.306775f,
 -1.800947f, 1.256743f, -8.274821f,
 -0.237010f, 3.551072f, -9.251279f,
 -1.669519f, 3.080094f, -8.215952f,
 -2.286405f, 1.692343f, -8.157465f,
 -1.166155f, 3.738294f, -9.184815f,
 -1.700813f, 3.231682f, -7.803239f,
 -2.328454f, 1.804355f, -7.754088f,
 -1.179557f, 4.133844f, -8.964089f,
 -1.492989f, 3.115077f, -7.517853f,
 -1.886888f, 1.484973f, -7.451252f,
 -0.425508f, 4.397890f, -9.146512f,
 0.761491f, 3.012106f, -6.783716f,
 1.738713f, 1.016144f, -3.268642f,
 1.333744f, 2.342876f, -2.716780f,
 0.582871f, 3.679756f, -6.460425f,
 0.485943f, 2.779880f, -2.812602f,
 0.085751f, 3.779447f, -6.355835f,
 1.767508f, 4.284404f, -8.670913f,
 1.467838f, 3.188319f, -8.639684f,
 1.260305f, 4.849481f, -8.627420f,
 0.920914f, 4.040413f, -9.066207f,
 0.867324f, 3.820608f, -9.298857f,
 0.616982f, 4.412889f, -9.173175f,
 1.321529f, 4.295397f, -6.316922f,
 1.523604f, 4.003892f, -6.543773f,
 1.116322f, 4.775799f, -7.424797f,
 0.893410f, 5.125765f, -7.286563f,
 1.093397f, 3.861853f, -8.317413f,
 0.991463f, 4.245297f, -8.190886f,
 2.080667f, 3.815611f, -6.303480f,
 1.488972f, 4.775424f, -7.334097f,
 1.199924f, 3.825304f, -8.888388f,
 2.336405f, 4.425364f, -6.345641f,
 1.619932f, 5.086523f, -7.414224f,
 1.862344f, 4.327796f, -8.424129f,
 2.134674f, 4.716189f, -6.119317f,
 1.377448f, 5.465397f, -7.259126f,
 1.774808f, 4.665912f, -8.708620f,
 1.668297f, 4.410295f, -5.840878f,
 1.074473f, 5.413895f, -7.047853f,
 1.008334f, 4.675419f, -8.788769f,
 0.902027f, 3.882491f, -8.856226f,
 1.228456f, 4.556703f, -8.594208f,
 1.480633f, 5.400496f, -8.912446f,
 0.779565f, 5.410141f, -9.045519f,
 0.633874f, 5.951438f, -8.781998f,
 0.392885f, 6.351909f, -8.868392f,
 1.430337f, 2.382305f, -5.255183f,
 1.035980f, 1.437592f, -5.723289f,
 0.042193f, 0.973481f, -5.982205f,
 -0.763651f, 1.335112f, -5.953121f,
 -0.872576f, 2.042922f, -5.406728f,
 -0.395526f, 2.788434f, -4.853267f,
 0.451500f, 3.172144f, -4.584100f,
 1.098321f, 3.040953f, -4.710267f,
 -1.397574f, 1.766489f, -7.655533f,
 -1.397574f, 1.766489f, -7.655533f,
 -1.133154f, 3.084681f, -7.722546f,
 -1.133154f, 3.084681f, -7.722546f,
 -0.528344f, 3.946418f, -8.572134f,
 -0.528344f, 3.946418f, -8.572134f,
 -1.886888f, 1.484973f, -7.451252f,
 -1.886888f, 1.484973f, -7.451252f,
 -0.395526f, 2.788434f, -4.853267f,
 -0.395526f, 2.788434f, -4.853267f,
 -0.423905f, 3.594401f, -6.451968f,
 1.035980f, 1.437592f, -5.723289f,
 1.035980f, 1.437592f, -5.723289f,
 0.344973f, 2.501988f, -7.093859f,
 0.344973f, 2.501988f, -7.093859f,
 0.612947f, 2.706463f, -8.834626f,
 0.612947f, 2.706463f, -8.834626f,
 -0.423905f, 3.594401f, -6.451968f,
 0.177194f, 4.888666f, -8.783070f,
 0.177194f, 4.888666f, -8.783070f,
 0.612947f, 2.706463f, -8.834626f,
 0.792173f, 3.526122f, -9.552254f,
 0.792173f, 3.526122f, -9.552254f,
 0.177194f, 4.888666f, -8.783070f,
 0.177194f, 4.888666f, -8.783070f,
 0.136562f, 4.494303f, -9.207012f,
 1.321529f, 4.295397f, -6.316922f,
 1.321529f, 4.295397f, -6.316922f,
 0.893410f, 5.125765f, -7.286563f,
 0.991463f, 4.245297f, -8.190886f,
 0.991463f, 4.245297f, -8.190886f,
 0.893410f, 5.125765f, -7.286563f,
 1.668297f, 4.410295f, -5.840878f,
 1.668297f, 4.410295f, -5.840878f,
 1.534329f, 4.016501f, -9.971400f,
 0.802892f, 3.365763f, -9.499376f,
 0.802892f, 3.365763f, -9.499376f,
 -0.136402f, 5.199601f, -9.078529f,
 0.078171f, 4.218283f, -9.022162f,
 0.078171f, 4.218283f, -9.022162f,
 1.821003f, 5.164446f, -10.050762f,
 1.534329f, 4.016501f, -9.971400f,
 1.534329f, 4.016501f, -9.971400f,
 -0.136402f, 5.199601f, -9.078529f,
 -0.136402f, 5.199601f, -9.078529f,
 0.395235f, 5.963147f, -9.369613f,
 0.395235f, 5.963147f, -9.369613f,
 1.821003f, 5.164446f, -10.050762f,
 0.855244f, 6.214182f, -9.570960f,
 0.855244f, 6.214182f, -9.570960f,
 0.904863f, 5.490251f, -9.595611f,
 -0.142938f, 5.706427f, -9.106985f,
 0.220354f, 5.234059f, -9.255537f,
 0.220354f, 5.234059f, -9.255537f,
 0.500796f, 6.575962f, -9.419052f,
 0.855244f, 6.214182f, -9.570960f,
 0.855244f, 6.214182f, -9.570960f,
 -0.198632f, 6.223024f, -9.088800f,
 -0.142938f, 5.706427f, -9.106985f,
 -0.142938f, 5.706427f, -9.106985f,
 -0.198632f, 6.223024f, -9.088800f,
 0.500796f, 6.575962f, -9.419052f,
 1.035980f, 1.437592f, -5.723289f,
 0.968184f, 0.037718f, -4.092528f,
 0.968184f, 0.037718f, -4.092528f,
 -0.866941f, 2.621289f, -3.424500f,
 -0.866941f, 2.621289f, -3.424500f,
 -0.395526f, 2.788434f, -4.853267f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.952946f, 0.285404f, -0.102174f},
{ -0.953046f, 0.285007f, -0.102346f},
{ -0.952986f, 0.285244f, -0.102243f},
{ -0.953086f, 0.284849f, -0.102414f},
{ 0.496067f, 0.520940f, -0.694651f},
{ 0.487269f, 0.491811f, -0.721589f},
{ 0.486627f, 0.489756f, -0.723417f},
{ 0.472308f, 0.445841f, -0.760362f},
{ 0.136309f, -0.706644f, -0.694316f},
{ -0.703981f, -0.464336f, -0.537404f},
{ -0.224565f, -0.839743f, -0.494371f},
{ -0.955642f, -0.250315f, -0.155211f},
{ -0.932130f, 0.345078f, -0.109792f},
{ -0.883925f, 0.428690f, 0.186818f},
{ -0.582618f, 0.748540f, 0.316615f},
{ -0.672374f, 0.730744f, 0.118010f},
{ 0.743366f, -0.450154f, -0.494740f},
{ 0.556271f, -0.740486f, -0.377152f},
{ -0.906738f, -0.187442f, -0.377745f},
{ -0.447770f, -0.778158f, -0.440422f},
{ 0.281819f, -0.914617f, -0.289921f},
{ -0.250040f, 0.934394f, 0.253749f},
{ -0.726203f, 0.681157f, 0.093024f},
{ -0.259729f, -0.167362f, -0.951068f},
{ -0.085542f, -0.492780f, -0.865939f},
{ 0.345431f, -0.520435f, -0.780913f},
{ 0.226271f, 0.702288f, -0.674976f},
{ -0.155467f, 0.710009f, -0.686817f},
{ 0.824459f, -0.408262f, -0.391905f},
{ 0.889351f, -0.446250f, -0.099581f},
{ 0.708826f, -0.237947f, 0.664038f},
{ 0.781956f, -0.009722f, 0.623258f},
{ 0.271445f, 0.610647f, 0.743928f},
{ 0.711329f, -0.560772f, 0.423728f},
{ -0.020433f, -0.627131f, -0.778645f},
{ -0.034385f, -0.356517f, -0.933656f},
{ -0.017681f, -0.562875f, -0.826353f},
{ -0.705214f, -0.092321f, -0.702958f},
{ -0.871571f, 0.181895f, -0.455278f},
{ -0.429943f, -0.283384f, -0.857230f},
{ -0.854781f, 0.144476f, 0.498473f},
{ -0.769286f, 0.575444f, 0.277604f},
{ -0.451175f, 0.887286f, 0.095735f},
{ -0.187070f, -0.335871f, 0.923144f},
{ -0.107909f, 0.404583f, 0.908113f},
{ -0.367244f, 0.854107f, -0.368284f},
{ 0.719667f, -0.561761f, -0.408050f},
{ 0.378255f, -0.839827f, -0.389375f},
{ -0.479807f, -0.154813f, -0.863608f},
{ -0.763574f, -0.295018f, -0.574387f},
{ -0.871807f, 0.281138f, 0.401140f},
{ -0.862795f, -0.062166f, 0.501718f},
{ 0.856956f, 0.314180f, -0.408554f},
{ -0.091985f, 0.533734f, -0.840635f},
{ -0.249345f, 0.961466f, 0.115804f},
{ 0.891053f, 0.076311f, -0.447439f},
{ -0.161729f, -0.211204f, -0.963969f},
{ 0.822145f, 0.393375f, -0.411501f},
{ -0.395064f, 0.018633f, -0.918465f},
{ -0.671527f, -0.645134f, 0.364490f},
{ -0.805860f, -0.436420f, 0.400160f},
{ 0.218355f, 0.968242f, -0.121775f},
{ -0.561432f, 0.618655f, -0.549600f},
{ -0.815781f, 0.404055f, 0.413811f},
{ 0.750407f, 0.572455f, 0.330431f},
{ 0.696356f, 0.711648f, 0.092980f},
{ 0.987105f, -0.129813f, -0.093661f},
{ 0.972879f, 0.083801f, -0.215602f},
{ -0.137982f, 0.901040f, 0.411203f},
{ -0.120086f, 0.963508f, 0.239233f},
{ 0.842002f, -0.534547f, 0.072754f},
{ 0.969684f, 0.156198f, 0.187922f},
{ 0.348073f, 0.894501f, 0.280559f},
{ 0.539512f, 0.111559f, -0.834554f},
{ 0.825284f, 0.262612f, -0.499941f},
{ 0.288817f, 0.560488f, -0.776169f},
{ -0.993057f, 0.115253f, -0.023554f},
{ -0.596330f, -0.764052f, 0.246200f},
{ -0.891855f, -0.197162f, 0.407089f},
{ -0.389496f, -0.877466f, -0.279902f},
{ -0.992809f, -0.049622f, 0.108943f},
{ 0.704332f, -0.647923f, 0.290021f},
{ 0.589959f, -0.783098f, -0.196739f},
{ 0.549276f, -0.823662f, -0.140986f},
{ 0.650203f, -0.718782f, -0.246146f},
{ 0.970602f, -0.062747f, -0.232368f},
{ 0.931480f, 0.339008f, -0.131979f},
{ 0.745117f, -0.629227f, 0.221074f},
{ 0.405576f, 0.745705f, 0.528613f},
{ 0.235918f, 0.960247f, -0.149224f},
{ 0.435173f, 0.676451f, -0.594171f},
{ -0.548422f, 0.797696f, 0.250830f},
{ -0.276016f, 0.267067f, 0.923304f},
{ -0.352880f, 0.732556f, -0.582098f},
{ 0.470700f, -0.098420f, 0.876787f},
{ 0.260513f, -0.456709f, 0.850618f},
{ 0.619702f, 0.529332f, 0.579464f},
{ 0.460156f, 0.029676f, 0.887342f},
{ 0.660637f, -0.202011f, 0.723015f},
{ 0.061868f, 0.613752f, 0.787071f},
{ 0.979975f, -0.056457f, -0.190950f},
{ 0.714117f, -0.532552f, -0.454340f},
{ -0.040159f, -0.752286f, -0.657612f},
{ -0.717495f, -0.289986f, -0.633332f},
{ -0.782144f, 0.534382f, -0.320446f},
{ -0.460250f, 0.887592f, 0.018730f},
{ 0.113485f, 0.962869f, 0.244957f},
{ 0.844564f, 0.521963f, 0.119444f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath5.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73