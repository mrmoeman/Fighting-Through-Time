package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieAttacke {

static String TextureName = "CurrieAttack5.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 0.835680f, 7.776294f, 4.601747f,
 3.230367f, 5.955906f, 4.440728f,
 0.421445f, 7.317417f, 3.287612f,
 2.817223f, 5.499129f, 3.128565f,
 0.561630f, 5.778868f, 2.222930f,
 1.099933f, 6.311905f, 0.662205f,
 -1.300127f, 5.622084f, 2.110943f,
 -0.966544f, 6.535777f, 0.449003f,
 -0.244879f, 5.724216f, 2.077022f,
 0.549851f, 5.764732f, 1.391920f,
 -0.035657f, 5.951406f, 0.812268f,
 -0.167543f, 6.481127f, 2.652870f,
 0.901783f, 6.757438f, 1.621985f,
 -0.171873f, 7.186154f, 0.553192f,
 -0.135901f, 7.594775f, 2.700579f,
 0.720116f, 7.662561f, 1.841043f,
 -0.156577f, 8.052272f, 0.970344f,
 -0.153896f, 7.706583f, 1.632966f,
 0.283587f, 7.557374f, 1.285745f,
 -0.165636f, 7.300861f, 0.936483f,
 -0.157282f, 8.404279f, 1.432078f,
 0.461919f, 8.036269f, 0.915469f,
 -0.149645f, 7.655288f, 0.419380f,
 -0.158336f, 8.677132f, 0.963220f,
 0.280835f, 8.386591f, 0.659272f,
 -0.147567f, 8.144693f, 0.249613f,
 -0.325918f, 3.261719f, 1.694654f,
 0.432845f, 3.401860f, 0.372394f,
 -1.222492f, 0.000156f, 1.332232f,
 1.067573f, 0.000186f, -0.957834f,
 -0.423075f, 4.994000f, 2.274107f,
 0.237789f, 5.993039f, 0.399548f,
 -0.233794f, 5.900329f, 2.020545f,
 -0.028877f, 6.318277f, 0.815378f,
 0.447381f, 6.086753f, 1.490365f,
 0.134846f, 6.042109f, 1.766802f,
 0.316165f, 6.196953f, 1.101990f,
 0.393321f, 3.314879f, 1.877048f,
 0.968191f, 3.534266f, 1.557370f,
 1.486753f, 0.000165f, 1.332478f,
 0.132262f, -0.000190f, 1.960310f,
 0.858421f, 3.382975f, 0.823446f,
 1.695612f, -0.000158f, 0.396936f,
 0.482587f, 5.167562f, 2.320710f,
 1.290883f, 5.772764f, 1.722999f,
 1.172705f, 5.934083f, 1.010345f,
 1.741895f, 6.224484f, 4.075503f,
 1.427254f, 5.897110f, 2.808333f,
 1.118650f, 6.111914f, 2.868444f,
 1.418789f, 6.473815f, 4.177353f,
 0.825539f, 5.253098f, 1.145894f,
 0.685432f, 5.180629f, 1.524921f,
 1.126829f, 6.492667f, 2.871135f,
 1.576697f, 6.999073f, 4.498195f,
 0.540406f, 5.668218f, 1.803457f,
 1.407172f, 6.573144f, 2.649176f,
 1.952288f, 7.223104f, 4.000993f,
 1.033621f, 6.131459f, 1.474094f,
 1.730542f, 6.350954f, 2.578887f,
 2.275281f, 6.973778f, 3.899121f,
 1.438216f, 5.981609f, 1.349574f,
 1.815084f, 6.024632f, 2.733298f,
 2.236157f, 6.489714f, 4.289963f,
 0.812000f, 5.983063f, 1.037734f,
 -0.781489f, 3.371542f, 1.089736f,
 -1.850546f, -0.000164f, -0.022530f,
 -1.222759f, 0.000165f, -1.377033f,
 -0.667043f, 3.513648f, 0.281258f,
 -0.287188f, -0.000162f, -1.585893f,
 -0.115670f, 3.466782f, 0.164567f,
 -1.412388f, 5.792674f, 0.780890f,
 -1.235697f, 5.178459f, 1.719762f,
 -0.852659f, 5.974649f, 0.297444f,
 -0.716856f, 6.120884f, 1.374968f,
 -0.510198f, 6.046638f, 1.664080f,
 -0.342087f, 6.236734f, 0.971166f,
 -2.123169f, 4.112473f, -0.185749f,
 -2.143495f, 4.237415f, 0.215708f,
 -1.409794f, 5.081551f, -0.293398f,
 -1.329572f, 5.063351f, -0.712931f,
 -0.823191f, 5.191078f, 0.989002f,
 -0.685966f, 5.264390f, 0.607840f,
 -2.720948f, 4.205243f, 0.478681f,
 -1.770947f, 5.155674f, -0.212286f,
 -0.880196f, 5.676788f, 1.313220f,
 -2.973819f, 4.634913f, 0.042249f,
 -1.878023f, 5.423951f, -0.386104f,
 -1.563756f, 5.755957f, 0.839560f,
 -2.954116f, 4.510227f, -0.358262f,
 -1.784728f, 5.411277f, -0.861547f,
 -1.387366f, 6.137150f, 0.679378f,
 -2.680485f, 3.950390f, -0.340522f,
 -1.637626f, 5.093423f, -0.990493f,
 -0.608312f, 5.994075f, 0.542418f,
 -0.774446f, 5.831810f, 1.275778f,
 -1.210836f, 6.761245f, 1.659247f,
 -1.020673f, 7.662718f, 1.870642f,
 -0.601981f, 7.557775f, 1.301341f,
 -0.788288f, 8.039480f, 0.939902f,
 -0.609310f, 8.396630f, 0.681271f,
 -1.423244f, 1.700465f, 0.609825f,
 -0.934524f, 1.385785f, 1.574106f,
 0.103513f, 1.269260f, 1.997230f,
 1.131285f, 1.923549f, 1.802429f,
 1.206535f, 1.670518f, 0.725911f,
 0.701959f, 1.696346f, -0.275507f,
 -0.257098f, 1.805624f, -0.748413f,
 -1.032255f, 1.909961f, -0.503133f,
 1.741895f, 6.224484f, 4.075503f,
 1.741895f, 6.224484f, 4.075503f,
 1.427254f, 5.897110f, 2.808333f,
 1.427254f, 5.897110f, 2.808333f,
 0.825539f, 5.253098f, 1.145894f,
 0.825539f, 5.253098f, 1.145894f,
 2.236157f, 6.489714f, 4.289963f,
 2.236157f, 6.489714f, 4.289963f,
 0.701959f, 1.696346f, -0.275507f,
 0.701959f, 1.696346f, -0.275507f,
 0.432845f, 3.401860f, 0.372394f,
 -0.934524f, 1.385785f, 1.574106f,
 -0.934524f, 1.385785f, 1.574106f,
 -0.325918f, 3.261719f, 1.694654f,
 -0.325918f, 3.261719f, 1.694654f,
 -0.423075f, 4.994000f, 2.274107f,
 -0.423075f, 4.994000f, 2.274107f,
 0.432845f, 3.401860f, 0.372394f,
 0.237789f, 5.993039f, 0.399548f,
 0.237789f, 5.993039f, 0.399548f,
 -0.423075f, 4.994000f, 2.274107f,
 -0.233794f, 5.900329f, 2.020545f,
 -0.233794f, 5.900329f, 2.020545f,
 0.237789f, 5.993039f, 0.399548f,
 0.237789f, 5.993039f, 0.399548f,
 -0.028877f, 6.318277f, 0.815378f,
 -2.123169f, 4.112473f, -0.185749f,
 -2.123169f, 4.112473f, -0.185749f,
 -1.329572f, 5.063351f, -0.712931f,
 -0.685966f, 5.264390f, 0.607840f,
 -0.685966f, 5.264390f, 0.607840f,
 -1.329572f, 5.063351f, -0.712931f,
 -2.680485f, 3.950390f, -0.340522f,
 -2.680485f, 3.950390f, -0.340522f,
 -0.167543f, 6.481127f, 2.652870f,
 -0.244879f, 5.724216f, 2.077022f,
 -0.244879f, 5.724216f, 2.077022f,
 -0.171873f, 7.186154f, 0.553192f,
 -0.035657f, 5.951406f, 0.812268f,
 -0.035657f, 5.951406f, 0.812268f,
 -0.135901f, 7.594775f, 2.700579f,
 -0.167543f, 6.481127f, 2.652870f,
 -0.167543f, 6.481127f, 2.652870f,
 -0.171873f, 7.186154f, 0.553192f,
 -0.171873f, 7.186154f, 0.553192f,
 -0.156577f, 8.052272f, 0.970344f,
 -0.156577f, 8.052272f, 0.970344f,
 -0.135901f, 7.594775f, 2.700579f,
 -0.157282f, 8.404279f, 1.432078f,
 -0.157282f, 8.404279f, 1.432078f,
 -0.153896f, 7.706583f, 1.632966f,
 -0.149645f, 7.655288f, 0.419380f,
 -0.165636f, 7.300861f, 0.936483f,
 -0.165636f, 7.300861f, 0.936483f,
 -0.158336f, 8.677132f, 0.963220f,
 -0.157282f, 8.404279f, 1.432078f,
 -0.157282f, 8.404279f, 1.432078f,
 -0.147567f, 8.144693f, 0.249613f,
 -0.149645f, 7.655288f, 0.419380f,
 -0.149645f, 7.655288f, 0.419380f,
 -0.147567f, 8.144693f, 0.249613f,
 -0.158336f, 8.677132f, 0.963220f,
 -0.934524f, 1.385785f, 1.574106f,
 -1.222492f, 0.000156f, 1.332232f,
 -1.222492f, 0.000156f, 1.332232f,
 1.067573f, 0.000186f, -0.957834f,
 1.067573f, 0.000186f, -0.957834f,
 0.701959f, 1.696346f, -0.275507f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.529978f, 0.734643f, -0.423584f},
{ 0.529920f, 0.735022f, -0.422997f},
{ 0.529955f, 0.734794f, -0.423350f},
{ 0.529898f, 0.735174f, -0.422763f},
{ -0.097663f, 0.951626f, 0.291326f},
{ -0.015056f, 0.912223f, 0.409416f},
{ -0.008538f, 0.908257f, 0.418325f},
{ 0.044078f, 0.871686f, 0.488079f},
{ -0.059555f, -0.022477f, 0.997972f},
{ 0.700140f, 0.048934f, 0.712327f},
{ 0.080413f, -0.075619f, 0.993889f},
{ 0.936747f, -0.042606f, 0.347403f},
{ 0.937626f, 0.259563f, -0.231267f},
{ 0.883720f, 0.103529f, -0.456421f},
{ 0.569849f, 0.196175f, -0.797990f},
{ 0.668128f, 0.369566f, -0.645775f},
{ -0.644647f, 0.081630f, 0.760110f},
{ -0.544245f, -0.078550f, 0.835241f},
{ 0.891632f, 0.165394f, 0.421471f},
{ 0.362870f, -0.022135f, 0.931577f},
{ -0.366103f, -0.142831f, 0.919548f},
{ 0.338815f, 0.196294f, -0.920148f},
{ 0.781316f, 0.146899f, -0.606602f},
{ 0.238720f, 0.811707f, 0.533052f},
{ 0.398139f, 0.598575f, 0.695121f},
{ -0.228094f, 0.449279f, 0.863784f},
{ 0.052744f, 0.802721f, -0.594018f},
{ 0.315169f, 0.933158f, -0.172872f},
{ -0.809696f, -0.295367f, 0.507100f},
{ -0.799178f, -0.459621f, 0.387380f},
{ 0.044507f, -0.930151f, 0.364469f},
{ -0.041189f, -0.943000f, 0.330233f},
{ 0.890702f, -0.288789f, -0.351071f},
{ 0.569932f, -0.735624f, 0.366107f},
{ -0.549957f, 0.628169f, 0.550410f},
{ -0.819750f, 0.572679f, 0.006939f},
{ -0.872728f, 0.266476f, 0.409068f},
{ -0.087301f, 0.995115f, -0.046095f},
{ 0.011981f, 0.923657f, -0.383032f},
{ -0.458680f, 0.748395f, -0.479080f},
{ 0.921937f, 0.292858f, -0.253508f},
{ 0.756673f, 0.491392f, -0.431254f},
{ 0.217361f, -0.853960f, -0.472766f},
{ 0.840020f, -0.424453f, 0.337944f},
{ 0.808707f, -0.573025f, -0.132802f},
{ 0.898846f, 0.144666f, -0.413700f},
{ 0.029867f, -0.332207f, 0.942734f},
{ -0.052171f, -0.614348f, 0.787309f},
{ 0.997078f, -0.070672f, -0.029012f},
{ 0.932982f, -0.350107f, 0.083484f},
{ -0.053436f, 0.095393f, -0.994004f},
{ 0.064050f, -0.154216f, -0.985959f},
{ 0.022384f, 0.526308f, 0.849999f},
{ 0.792436f, 0.586244f, 0.168414f},
{ -0.005137f, 0.882825f, -0.469675f},
{ 0.017092f, 0.276726f, 0.960797f},
{ 0.941117f, -0.147470f, 0.304223f},
{ 0.014985f, 0.577590f, 0.816190f},
{ 0.999173f, 0.027618f, 0.029851f},
{ -0.029715f, -0.818858f, -0.573226f},
{ -0.010562f, -0.645134f, -0.763997f},
{ 0.012469f, 0.999652f, 0.023265f},
{ 0.726953f, 0.558225f, -0.399906f},
{ -0.019236f, 0.191182f, -0.981366f},
{ -0.790656f, 0.107536f, -0.602742f},
{ -0.719926f, 0.394873f, -0.570773f},
{ -0.968528f, 0.026017f, 0.247542f},
{ -0.962068f, 0.261938f, 0.076245f},
{ 0.147005f, 0.223889f, -0.963464f},
{ 0.168513f, 0.437994f, -0.883043f},
{ -0.900463f, -0.184061f, 0.394065f},
{ -0.958667f, 0.079270f, -0.273265f},
{ -0.264342f, 0.257317f, -0.929468f},
{ -0.590597f, 0.741161f, 0.319178f},
{ -0.581935f, 0.526073f, 0.620161f},
{ -0.182409f, 0.942934f, -0.278571f},
{ 0.826857f, -0.371927f, -0.421875f},
{ 0.369965f, -0.883020f, 0.288794f},
{ 0.547485f, -0.793645f, -0.265309f},
{ 0.563301f, -0.361852f, 0.742802f},
{ 0.799805f, -0.427787f, -0.421082f},
{ -0.569884f, -0.652972f, 0.498858f},
{ -0.343665f, -0.042749f, 0.938119f},
{ -0.301752f, -0.033959f, 0.952781f},
{ -0.527440f, -0.056880f, 0.847686f},
{ -0.672976f, 0.579792f, 0.459287f},
{ -0.739875f, 0.668419f, 0.076164f},
{ -0.771030f, -0.262445f, 0.580203f},
{ -0.694434f, 0.119380f, -0.709584f},
{ -0.108261f, 0.719859f, -0.685625f},
{ -0.165167f, 0.969016f, -0.183652f},
{ 0.288252f, 0.036755f, -0.956849f},
{ -0.287108f, -0.704246f, -0.649312f},
{ 0.526283f, 0.694645f, -0.490403f},
{ -0.993823f, -0.096015f, -0.055650f},
{ -0.903172f, -0.295643f, -0.311248f},
{ -0.780359f, 0.598447f, 0.181388f},
{ -0.999230f, 0.024282f, 0.030833f},
{ -0.932807f, -0.145935f, 0.329506f},
{ -0.729173f, 0.551323f, -0.405401f},
{ -0.956579f, 0.275614f, -0.094835f},
{ -0.761568f, 0.031597f, 0.647315f},
{ 0.005920f, -0.028936f, 0.999564f},
{ 0.791264f, 0.027693f, 0.610847f},
{ 0.936115f, 0.284566f, -0.206666f},
{ 0.630769f, 0.384841f, -0.673816f},
{ 0.149207f, 0.417122f, -0.896519f},
{ -0.601470f, 0.408462f, -0.686580f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieAttack5.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73