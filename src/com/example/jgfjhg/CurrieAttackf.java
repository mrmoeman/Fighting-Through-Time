package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieAttackf {

static String TextureName = "CurrieAttack6.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -0.356463f, 6.868430f, 5.084790f,
 1.653584f, 4.626091f, 5.166996f,
 -0.233446f, 6.901470f, 3.637559f,
 1.776893f, 4.660202f, 3.722266f,
 0.373493f, 5.904237f, 2.169398f,
 1.027344f, 6.378320f, 0.742539f,
 -1.455011f, 5.702611f, 1.798269f,
 -0.943535f, 6.618639f, 0.269226f,
 -0.433178f, 5.802077f, 1.909516f,
 0.424273f, 5.863146f, 1.346656f,
 -0.087966f, 6.028278f, 0.720608f,
 -0.300211f, 6.554390f, 2.513909f,
 0.775213f, 6.832940f, 1.490938f,
 -0.311115f, 7.265885f, 0.428676f,
 -0.253495f, 7.662010f, 2.577868f,
 0.593904f, 7.734828f, 1.710417f,
 -0.286564f, 8.131360f, 0.853235f,
 -0.282257f, 7.780017f, 1.511159f,
 0.151955f, 7.632938f, 1.159071f,
 -0.301095f, 7.378347f, 0.812486f,
 -0.287563f, 8.478868f, 1.314370f,
 0.327899f, 8.114380f, 0.791465f,
 -0.278713f, 7.737926f, 0.304062f,
 -0.289000f, 8.756186f, 0.849482f,
 0.147183f, 8.466990f, 0.541602f,
 -0.276074f, 8.228969f, 0.138902f,
 -0.485231f, 3.346038f, 1.503719f,
 0.541697f, 3.462066f, 0.409647f,
 -1.222501f, 0.000160f, 1.332220f,
 1.067587f, 0.000178f, -0.957818f,
 -0.755227f, 5.069873f, 2.035924f,
 0.394169f, 6.065568f, 0.413592f,
 -0.416078f, 5.976653f, 1.858662f,
 -0.081493f, 6.397096f, 0.725686f,
 0.312662f, 6.173276f, 1.431817f,
 -0.034743f, 6.117085f, 1.663794f,
 0.250350f, 6.277211f, 1.068902f,
 0.147689f, 3.369117f, 1.829812f,
 0.728520f, 3.522353f, 1.626890f,
 1.486753f, 0.000165f, 1.332479f,
 0.132185f, -0.000190f, 1.960297f,
 0.831286f, 3.422198f, 0.924030f,
 1.695577f, -0.000183f, 0.396998f,
 0.106118f, 5.228921f, 2.323893f,
 1.052772f, 5.824102f, 1.968260f,
 1.129285f, 5.986482f, 1.250349f,
 0.497210f, 5.343705f, 4.411132f,
 0.706133f, 5.461926f, 3.086620f,
 0.428364f, 5.721814f, 3.103367f,
 0.192924f, 5.627920f, 4.470845f,
 0.749703f, 5.312258f, 1.281451f,
 0.514142f, 5.242028f, 1.611194f,
 0.480207f, 6.073991f, 3.242363f,
 0.262394f, 5.989911f, 4.988362f,
 0.307235f, 5.732126f, 1.844182f,
 0.835406f, 6.140579f, 3.178253f,
 0.835208f, 6.240459f, 4.770045f,
 0.938773f, 6.142668f, 1.871021f,
 1.128647f, 5.871211f, 3.154519f,
 1.139413f, 5.956282f, 4.710296f,
 1.336826f, 5.935744f, 1.854748f,
 1.101756f, 5.504806f, 3.204720f,
 0.883586f, 5.409510f, 4.866089f,
 0.776990f, 6.044372f, 1.181606f,
 -0.781907f, 3.459876f, 0.824736f,
 -1.850545f, -0.000161f, -0.022540f,
 -1.222759f, 0.000165f, -1.377033f,
 -0.492547f, 3.594534f, 0.074326f,
 -0.287186f, -0.000162f, -1.585894f,
 0.065740f, 3.537121f, 0.087029f,
 -1.300517f, 5.888823f, 0.339332f,
 -1.388991f, 5.268277f, 1.286833f,
 -0.629821f, 6.064150f, 0.024277f,
 -0.806958f, 6.200014f, 1.182065f,
 -0.641939f, 6.123557f, 1.480417f,
 -0.363335f, 6.315841f, 0.829259f,
 -1.750291f, 4.223451f, -0.795103f,
 -1.875352f, 4.347101f, -0.412647f,
 -1.020981f, 5.181972f, -0.700914f,
 -0.831953f, 5.164204f, -1.083978f,
 -0.796639f, 5.277468f, 0.692722f,
 -0.561498f, 5.350240f, 0.362163f,
 -2.502423f, 4.322683f, -0.313530f,
 -1.389715f, 5.261231f, -0.718376f,
 -0.931324f, 5.762766f, 0.993649f,
 -2.623782f, 4.757860f, -0.798214f,
 -1.442905f, 5.531778f, -0.912315f,
 -1.462517f, 5.854187f, 0.355148f,
 -2.499600f, 4.634465f, -1.179927f,
 -1.226164f, 5.519594f, -1.345901f,
 -1.244605f, 6.233280f, 0.250827f,
 -2.248275f, 4.070465f, -1.094219f,
 -1.054320f, 5.200049f, -1.433421f,
 -0.459277f, 6.078912f, 0.325557f,
 -0.849721f, 5.911725f, 1.071807f,
 -1.338009f, 6.834923f, 1.536503f,
 -1.146652f, 7.734878f, 1.756859f,
 -0.733353f, 7.633197f, 1.182755f,
 -0.922056f, 8.117023f, 0.825385f,
 -0.745327f, 8.475613f, 0.567831f,
 -1.342536f, 1.849711f, 0.148041f,
 -1.152205f, 1.549613f, 1.216136f,
 -0.274913f, 1.368291f, 1.899937f,
 0.761059f, 1.815123f, 1.857453f,
 1.101648f, 1.650487f, 0.837902f,
 0.803236f, 1.714584f, -0.214295f,
 -0.034740f, 1.855912f, -0.828206f,
 -0.821806f, 1.980166f, -0.734977f,
 0.497210f, 5.343705f, 4.411132f,
 0.497210f, 5.343705f, 4.411132f,
 0.706133f, 5.461926f, 3.086620f,
 0.706133f, 5.461926f, 3.086620f,
 0.749703f, 5.312258f, 1.281451f,
 0.749703f, 5.312258f, 1.281451f,
 0.883586f, 5.409510f, 4.866089f,
 0.883586f, 5.409510f, 4.866089f,
 0.803236f, 1.714584f, -0.214295f,
 0.803236f, 1.714584f, -0.214295f,
 0.541697f, 3.462066f, 0.409647f,
 -1.152205f, 1.549613f, 1.216136f,
 -1.152205f, 1.549613f, 1.216136f,
 -0.485231f, 3.346038f, 1.503719f,
 -0.485231f, 3.346038f, 1.503719f,
 -0.755227f, 5.069873f, 2.035924f,
 -0.755227f, 5.069873f, 2.035924f,
 0.541697f, 3.462066f, 0.409647f,
 0.394169f, 6.065568f, 0.413592f,
 0.394169f, 6.065568f, 0.413592f,
 -0.755227f, 5.069873f, 2.035924f,
 -0.416078f, 5.976653f, 1.858662f,
 -0.416078f, 5.976653f, 1.858662f,
 0.394169f, 6.065568f, 0.413592f,
 0.394169f, 6.065568f, 0.413592f,
 -0.081493f, 6.397096f, 0.725686f,
 -1.750291f, 4.223451f, -0.795103f,
 -1.750291f, 4.223451f, -0.795103f,
 -0.831953f, 5.164204f, -1.083978f,
 -0.561498f, 5.350240f, 0.362163f,
 -0.561498f, 5.350240f, 0.362163f,
 -0.831953f, 5.164204f, -1.083978f,
 -2.248275f, 4.070465f, -1.094219f,
 -2.248275f, 4.070465f, -1.094219f,
 -0.300211f, 6.554390f, 2.513909f,
 -0.433178f, 5.802077f, 1.909516f,
 -0.433178f, 5.802077f, 1.909516f,
 -0.311115f, 7.265885f, 0.428676f,
 -0.087966f, 6.028278f, 0.720608f,
 -0.087966f, 6.028278f, 0.720608f,
 -0.253495f, 7.662010f, 2.577868f,
 -0.300211f, 6.554390f, 2.513909f,
 -0.300211f, 6.554390f, 2.513909f,
 -0.311115f, 7.265885f, 0.428676f,
 -0.311115f, 7.265885f, 0.428676f,
 -0.286564f, 8.131360f, 0.853235f,
 -0.286564f, 8.131360f, 0.853235f,
 -0.253495f, 7.662010f, 2.577868f,
 -0.287563f, 8.478868f, 1.314370f,
 -0.287563f, 8.478868f, 1.314370f,
 -0.282257f, 7.780017f, 1.511159f,
 -0.278713f, 7.737926f, 0.304062f,
 -0.301095f, 7.378347f, 0.812486f,
 -0.301095f, 7.378347f, 0.812486f,
 -0.289000f, 8.756186f, 0.849482f,
 -0.287563f, 8.478868f, 1.314370f,
 -0.287563f, 8.478868f, 1.314370f,
 -0.276074f, 8.228969f, 0.138902f,
 -0.278713f, 7.737926f, 0.304062f,
 -0.278713f, 7.737926f, 0.304062f,
 -0.276074f, 8.228969f, 0.138902f,
 -0.289000f, 8.756186f, 0.849482f,
 -1.152205f, 1.549613f, 1.216136f,
 -1.222501f, 0.000160f, 1.332220f,
 -1.222501f, 0.000160f, 1.332220f,
 1.067587f, 0.000178f, -0.957818f,
 1.067587f, 0.000178f, -0.957818f,
 0.803236f, 1.714584f, -0.214295f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.740916f, 0.667029f, 0.078207f},
{ 0.740695f, 0.667210f, 0.078749f},
{ 0.740828f, 0.667101f, 0.078423f},
{ 0.740607f, 0.667283f, 0.078966f},
{ -0.155523f, 0.956568f, 0.246558f},
{ -0.078437f, 0.913144f, 0.400019f},
{ -0.069003f, 0.905995f, 0.417626f},
{ -0.017469f, 0.860273f, 0.509534f},
{ -0.256662f, 0.022520f, 0.966239f},
{ 0.540623f, 0.004652f, 0.841252f},
{ -0.115120f, -0.083383f, 0.989846f},
{ 0.824112f, -0.074155f, 0.561552f},
{ 0.972383f, 0.232056f, -0.024930f},
{ 0.976858f, 0.065827f, -0.203510f},
{ 0.748301f, 0.169995f, -0.641208f},
{ 0.801496f, 0.313281f, -0.509372f},
{ -0.837067f, 0.138352f, 0.529318f},
{ -0.719353f, -0.075613f, 0.690517f},
{ 0.742832f, 0.144815f, 0.653628f},
{ 0.112925f, -0.043295f, 0.992660f},
{ -0.598673f, -0.135224f, 0.789496f},
{ 0.573370f, 0.202358f, -0.793914f},
{ 0.919681f, 0.134980f, -0.368737f},
{ 0.093772f, 0.828990f, 0.551346f},
{ 0.302029f, 0.599047f, 0.741567f},
{ -0.395773f, 0.462567f, 0.793344f},
{ 0.097725f, 0.752901f, -0.650838f},
{ 0.364171f, 0.924452f, -0.112996f},
{ -0.976259f, -0.211524f, 0.046648f},
{ -0.940235f, -0.323404f, -0.106619f},
{ -0.221855f, -0.975052f, 0.007322f},
{ -0.296094f, -0.955144f, -0.005319f},
{ 0.963053f, -0.236539f, -0.128756f},
{ 0.108180f, -0.926373f, 0.360735f},
{ -0.652081f, 0.570282f, 0.499568f},
{ -0.677456f, 0.730437f, -0.086689f},
{ -0.888549f, 0.447730f, 0.100089f},
{ 0.057537f, 0.959259f, 0.276609f},
{ 0.281215f, 0.959632f, -0.004852f},
{ -0.133308f, 0.934796f, -0.329220f},
{ 0.970675f, 0.112300f, 0.212551f},
{ 0.920817f, 0.383936f, 0.068474f},
{ 0.623470f, -0.634889f, -0.456291f},
{ 0.565039f, -0.694734f, 0.445057f},
{ 0.720476f, -0.693313f, -0.015220f},
{ 0.980058f, 0.174745f, -0.094613f},
{ 0.046194f, -0.353982f, 0.934111f},
{ -0.132250f, -0.634594f, 0.761446f},
{ 0.997171f, -0.068543f, -0.030844f},
{ 0.902343f, -0.361462f, 0.234784f},
{ -0.082001f, 0.079084f, -0.993490f},
{ 0.102241f, -0.170074f, -0.980113f},
{ 0.034412f, 0.518557f, 0.854350f},
{ 0.795176f, 0.583382f, 0.165409f},
{ -0.007893f, 0.885881f, -0.463845f},
{ 0.025911f, 0.271140f, 0.962191f},
{ 0.943581f, -0.150539f, 0.294946f},
{ 0.019163f, 0.571124f, 0.820640f},
{ 0.999235f, 0.027527f, 0.027778f},
{ -0.041944f, -0.811103f, -0.583397f},
{ -0.012026f, -0.636474f, -0.771204f},
{ 0.011818f, 0.999452f, 0.030916f},
{ 0.726515f, 0.562126f, -0.395209f},
{ -0.022607f, 0.198483f, -0.979844f},
{ -0.618092f, 0.123787f, -0.776298f},
{ -0.543241f, 0.428566f, -0.721956f},
{ -0.998900f, 0.035667f, 0.030455f},
{ -0.946433f, 0.304732f, -0.106784f},
{ 0.370516f, 0.206139f, -0.905662f},
{ 0.318103f, 0.395908f, -0.861433f},
{ -0.975638f, -0.167688f, 0.141463f},
{ -0.845472f, 0.104421f, -0.523711f},
{ -0.002807f, 0.268807f, -0.963190f},
{ -0.670714f, 0.716702f, 0.191000f},
{ -0.683554f, 0.470815f, 0.557751f},
{ -0.126345f, 0.946885f, -0.295714f},
{ 0.904317f, -0.382794f, -0.188889f},
{ 0.267476f, -0.889705f, 0.369976f},
{ 0.587579f, -0.800831f, -0.115848f},
{ 0.339647f, -0.373380f, 0.863266f},
{ 0.877179f, -0.438459f, -0.195732f},
{ -0.691376f, -0.645989f, 0.323569f},
{ -0.582025f, -0.041515f, 0.812111f},
{ -0.545553f, -0.033183f, 0.837419f},
{ -0.735431f, -0.051764f, 0.675619f},
{ -0.763234f, 0.588106f, 0.267591f},
{ -0.724188f, 0.679299f, -0.118761f},
{ -0.901454f, -0.252806f, 0.351384f},
{ -0.478192f, 0.132736f, -0.868167f},
{ 0.088298f, 0.724169f, -0.683946f},
{ -0.096949f, 0.972141f, -0.213409f},
{ 0.533627f, 0.036132f, -0.844948f},
{ -0.112966f, -0.697244f, -0.707877f},
{ 0.647443f, 0.688530f, -0.326716f},
{ -0.991144f, -0.115324f, -0.065839f},
{ -0.862143f, -0.228328f, -0.452300f},
{ -0.777944f, 0.598815f, 0.190326f},
{ -0.999117f, 0.024543f, 0.034095f},
{ -0.930072f, -0.146870f, 0.336743f},
{ -0.730413f, 0.551096f, -0.403473f},
{ -0.963422f, 0.266850f, -0.024684f},
{ -0.773609f, 0.094394f, 0.626593f},
{ 0.077580f, 0.066954f, 0.994735f},
{ 0.775071f, 0.204107f, 0.598001f},
{ 0.904223f, 0.383545f, -0.187815f},
{ 0.658032f, 0.358316f, -0.662272f},
{ 0.146955f, 0.335583f, -0.930478f},
{ -0.625404f, 0.340521f, -0.702079f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieAttack6.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73