package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnardeathb {

static String TextureName = "RagDeath2.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -1.088495f, 11.842364f, 1.954669f,
 0.383709f, 13.229643f, 2.115811f,
 -0.967412f, 16.628313f, 0.003098f,
 -2.459829f, 13.467179f, 0.081999f,
 2.496773f, 11.834463f, 1.888991f,
 1.008597f, 13.228643f, 2.109616f,
 2.342182f, 16.625732f, -0.040947f,
 3.845613f, 13.466098f, -0.155276f,
 -0.822497f, 13.211211f, 1.881918f,
 -0.828404f, 12.636262f, 3.052338f,
 -0.490018f, 10.615536f, 3.982563f,
 1.221877f, 8.093509f, 3.713475f,
 0.697652f, 12.874056f, 3.580055f,
 0.686973f, 14.018490f, 1.506157f,
 -0.399647f, 10.760857f, 2.482423f,
 -0.855537f, 11.913701f, 1.585890f,
 0.625452f, 12.780897f, 0.459169f,
 0.305865f, 5.897634f, -0.092606f,
 -0.317609f, 7.907677f, 1.571493f,
 -1.671090f, 4.723746f, 1.685808f,
 -2.169759f, 4.479763f, -0.901146f,
 -0.938310f, 10.609737f, 3.333719f,
 -4.553535f, 9.066431f, 0.942275f,
 1.879850f, 11.170391f, 2.670064f,
 -1.132110f, 10.788717f, -2.575006f,
 -0.493924f, 3.029357f, -1.646375f,
 1.051746f, 3.157923f, 2.236832f,
 -3.602121f, 11.202323f, 3.022563f,
 0.403037f, 13.547931f, 0.069401f,
 -0.901693f, 6.290586f, 1.106092f,
 0.740584f, 6.106523f, 0.660349f,
 -0.751170f, 6.699357f, -1.926979f,
 -1.863753f, 6.630251f, -0.649457f,
 -1.742581f, 6.620988f, 0.554194f,
 -2.557650f, 3.900458f, 0.675106f,
 0.181805f, 2.145719f, 0.294203f,
 -2.959205f, 9.210372f, 3.318932f,
 -1.739964f, 7.505764f, 2.643238f,
 -3.247986f, 6.445236f, 2.598841f,
 -4.477299f, 7.574566f, 3.049112f,
 -1.353852f, 6.628413f, 5.430430f,
 -0.682132f, 5.694326f, 4.736077f,
 -1.662568f, 4.999203f, 4.706740f,
 -2.340225f, 5.928564f, 5.406999f,
 -2.904933f, 10.817798f, 0.545987f,
 -1.776488f, 11.376559f, 2.468146f,
 -2.507143f, 9.262271f, 0.629200f,
 -1.634433f, 9.158999f, 2.256523f,
 -0.995925f, 2.242653f, 1.474520f,
 -0.986041f, 3.119611f, 3.220017f,
 -2.103467f, 2.450937f, 1.763057f,
 -2.096746f, 3.128021f, 3.090953f,
 -1.031126f, -0.012058f, 0.880221f,
 -0.889358f, -0.006613f, 5.156851f,
 -2.385004f, -0.010251f, 1.042620f,
 -2.384315f, -0.006265f, 5.102015f,
 -0.529687f, 4.380688f, -0.671808f,
 -1.359048f, 4.557418f, -0.164812f,
 -1.113594f, 4.802376f, 0.817051f,
 -0.006976f, 4.441345f, 0.480699f,
 -2.158315f, 1.335110f, 2.667745f,
 -2.197336f, 0.821833f, 1.496233f,
 -1.104661f, 0.818294f, 1.257789f,
 -1.062498f, 1.327482f, 2.741003f,
 2.226967f, 13.207894f, 1.838098f,
 2.226035f, 12.634982f, 3.024942f,
 1.896575f, 10.615536f, 3.961287f,
 2.888674f, 10.760839f, 0.584098f,
 2.341228f, 11.913451f, -0.257484f,
 2.057038f, 7.907735f, 0.202455f,
 2.801258f, 4.168595f, -0.388231f,
 1.092425f, 4.900455f, -2.689635f,
 4.649230f, 10.385406f, 0.212055f,
 3.234118f, 9.628156f, -4.300414f,
 4.685958f, 11.757545f, -2.537931f,
 1.948717f, 6.290222f, -0.536760f,
 0.929433f, 6.648903f, -2.238466f,
 1.891356f, 6.621213f, -1.542217f,
 2.507535f, 3.926292f, -2.037761f,
 5.634150f, 9.904280f, -2.876323f,
 5.569531f, 7.695245f, -2.988245f,
 4.645096f, 7.803411f, -4.589413f,
 4.513656f, 9.499284f, -4.817075f,
 8.047359f, 7.618647f, -4.607576f,
 7.721489f, 6.316007f, -4.507433f,
 7.117828f, 6.386640f, -5.553004f,
 7.443698f, 7.689280f, -5.653146f,
 2.463953f, 10.817962f, -2.553882f,
 3.589976f, 11.367608f, -0.595613f,
 2.337472f, 9.262271f, -2.167840f,
 3.319645f, 9.154989f, -0.596562f,
 1.290466f, 1.984211f, -1.538089f,
 2.473827f, 1.298092f, -0.109677f,
 2.397700f, 2.127022f, -1.884574f,
 3.286553f, 1.647573f, -0.803035f,
 0.506819f, 0.000350f, -3.175999f,
 2.527917f, -0.006620f, 0.604035f,
 1.759366f, 0.002922f, -3.715790f,
 3.795294f, -0.006795f, -0.190872f,
 0.190884f, 4.386277f, -1.133040f,
 1.106937f, 4.592293f, -1.590692f,
 1.794440f, 4.561097f, -0.658147f,
 0.833436f, 4.301725f, -0.025894f,
 2.456601f, 1.067645f, -2.154550f,
 1.829355f, 0.825365f, -3.220641f,
 0.763534f, 0.826597f, -2.878233f,
 1.593313f, 0.921403f, -1.493098f,
 3.305958f, 8.483218f, -9.195705f,
 6.198209f, 5.800349f, -11.244464f,
 8.379603f, 7.819327f, -0.834342f,
 11.271853f, 5.136459f, -2.883103f,
 -0.381255f, 10.627812f, 3.671397f,
 2.170907f, 6.737137f, 7.471859f,
 -3.165160f, 3.045325f, 7.192301f,
 -5.748005f, 6.908675f, 3.459502f,
 -3.602121f, 11.202323f, 3.022563f,
 0.403037f, 13.547931f, 0.069401f,
 0.403037f, 13.547931f, 0.069401f,
 -1.742581f, 6.620988f, 0.554194f,
 -1.742581f, 6.620988f, 0.554194f,
 -3.602121f, 11.202323f, 3.022563f,
 -2.557650f, 3.900458f, 0.675106f,
 -1.742581f, 6.620988f, 0.554194f,
 -1.742581f, 6.620988f, 0.554194f,
 -2.557650f, 3.900458f, 0.675106f,
 0.181805f, 2.145719f, 0.294203f,
 -1.662568f, 4.999203f, 4.706740f,
 -2.340225f, 5.928564f, 5.406999f,
 -2.340225f, 5.928564f, 5.406999f,
 -1.662568f, 4.999203f, 4.706740f,
 -1.662568f, 4.999203f, 4.706740f,
 -3.247986f, 6.445236f, 2.598841f,
 -2.340225f, 5.928564f, 5.406999f,
 -2.340225f, 5.928564f, 5.406999f,
 -3.247986f, 6.445236f, 2.598841f,
 -2.507143f, 9.262271f, 0.629200f,
 -2.507143f, 9.262271f, 0.629200f,
 -0.995925f, 2.242653f, 1.474520f,
 -0.995925f, 2.242653f, 1.474520f,
 -1.104661f, 0.818294f, 1.257789f,
 -0.529687f, 4.380688f, -0.671808f,
 -0.995925f, 2.242653f, 1.474520f,
 -0.995925f, 2.242653f, 1.474520f,
 -2.197336f, 0.821833f, 1.496233f,
 -2.158315f, 1.335110f, 2.667745f,
 -2.158315f, 1.335110f, 2.667745f,
 -1.031126f, -0.012058f, 0.880221f,
 -1.104661f, 0.818294f, 1.257789f,
 -1.104661f, 0.818294f, 1.257789f,
 -2.197336f, 0.821833f, 1.496233f,
 -0.889358f, -0.006613f, 5.156851f,
 -1.031126f, -0.012058f, 0.880221f,
 -1.062498f, 1.327482f, 2.741003f,
 -1.062498f, 1.327482f, 2.741003f,
 -1.031126f, -0.012058f, 0.880221f,
 -1.104661f, 0.818294f, 1.257789f,
 -2.158315f, 1.335110f, 2.667745f,
 -1.062498f, 1.327482f, 2.741003f,
 -1.062498f, 1.327482f, 2.741003f,
 -0.889358f, -0.006613f, 5.156851f,
 1.221877f, 8.093509f, 3.713475f,
 0.697652f, 12.874056f, 3.580055f,
 0.697652f, 12.874056f, 3.580055f,
 0.697652f, 12.874056f, 3.580055f,
 0.697652f, 12.874056f, 3.580055f,
 0.686973f, 14.018490f, 1.506157f,
 0.625452f, 12.780897f, 0.459169f,
 0.625452f, 12.780897f, 0.459169f,
 0.686973f, 14.018490f, 1.506157f,
 1.221877f, 8.093509f, 3.713475f,
 1.221877f, 8.093509f, 3.713475f,
 0.305865f, 5.897634f, -0.092606f,
 0.403037f, 13.547931f, 0.069401f,
 -1.132110f, 10.788717f, -2.575006f,
 -1.132110f, 10.788717f, -2.575006f,
 4.685958f, 11.757545f, -2.537931f,
 0.403037f, 13.547931f, 0.069401f,
 0.403037f, 13.547931f, 0.069401f,
 1.879850f, 11.170391f, 2.670064f,
 -0.751170f, 6.699357f, -1.926979f,
 -1.132110f, 10.788717f, -2.575006f,
 -1.132110f, 10.788717f, -2.575006f,
 0.740584f, 6.106523f, 0.660349f,
 0.740584f, 6.106523f, 0.660349f,
 1.051746f, 3.157923f, 2.236832f,
 4.685958f, 11.757545f, -2.537931f,
 1.891356f, 6.621213f, -1.542217f,
 1.891356f, 6.621213f, -1.542217f,
 -0.751170f, 6.699357f, -1.926979f,
 -0.751170f, 6.699357f, -1.926979f,
 -0.493924f, 3.029357f, -1.646375f,
 1.879850f, 11.170391f, 2.670064f,
 0.740584f, 6.106523f, 0.660349f,
 0.740584f, 6.106523f, 0.660349f,
 2.507535f, 3.926292f, -2.037761f,
 1.891356f, 6.621213f, -1.542217f,
 1.891356f, 6.621213f, -1.542217f,
 1.051746f, 3.157923f, 2.236832f,
 0.181805f, 2.145719f, 0.294203f,
 0.181805f, 2.145719f, 0.294203f,
 2.507535f, 3.926292f, -2.037761f,
 0.181805f, 2.145719f, 0.294203f,
 -0.493924f, 3.029357f, -1.646375f,
 -0.493924f, 3.029357f, -1.646375f,
 7.443698f, 7.689280f, -5.653146f,
 7.443698f, 7.689280f, -5.653146f,
 7.117828f, 6.386640f, -5.553004f,
 7.117828f, 6.386640f, -5.553004f,
 7.117828f, 6.386640f, -5.553004f,
 4.645096f, 7.803411f, -4.589413f,
 7.443698f, 7.689280f, -5.653146f,
 7.443698f, 7.689280f, -5.653146f,
 2.337472f, 9.262271f, -2.167840f,
 2.337472f, 9.262271f, -2.167840f,
 4.645096f, 7.803411f, -4.589413f,
 0.763534f, 0.826597f, -2.878233f,
 1.290466f, 1.984211f, -1.538089f,
 1.290466f, 1.984211f, -1.538089f,
 1.290466f, 1.984211f, -1.538089f,
 1.290466f, 1.984211f, -1.538089f,
 0.190884f, 4.386277f, -1.133040f,
 2.456601f, 1.067645f, -2.154550f,
 2.456601f, 1.067645f, -2.154550f,
 1.829355f, 0.825365f, -3.220641f,
 1.829355f, 0.825365f, -3.220641f,
 0.763534f, 0.826597f, -2.878233f,
 0.763534f, 0.826597f, -2.878233f,
 0.506819f, 0.000350f, -3.175999f,
 0.763534f, 0.826597f, -2.878233f,
 0.506819f, 0.000350f, -3.175999f,
 1.593313f, 0.921403f, -1.493098f,
 1.593313f, 0.921403f, -1.493098f,
 0.506819f, 0.000350f, -3.175999f,
 2.527917f, -0.006620f, 0.604035f,
 2.456601f, 1.067645f, -2.154550f,
 1.593313f, 0.921403f, -1.493098f,
 1.593313f, 0.921403f, -1.493098f,
 2.527917f, -0.006620f, 0.604035f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.497426f, 0.441110f, 0.746987f},
{ -0.530154f, 0.332366f, 0.780044f},
{ -0.536252f, 0.308261f, 0.785754f},
{ -0.543692f, 0.276464f, 0.792443f},
{ 0.532045f, 0.454906f, 0.714135f},
{ 0.581538f, 0.292527f, 0.759106f},
{ 0.573704f, 0.323367f, 0.752527f},
{ 0.590527f, 0.253261f, 0.766249f},
{ 0.372957f, -0.621011f, 0.689383f},
{ 0.025888f, 0.515138f, 0.856716f},
{ -0.427609f, -0.109892f, 0.897260f},
{ -0.815665f, 0.323677f, 0.479503f},
{ -0.772231f, 0.628136f, -0.095422f},
{ 0.007561f, 0.996028f, -0.088720f},
{ -0.995179f, -0.085668f, -0.047745f},
{ -0.982003f, 0.065428f, -0.177169f},
{ -0.008446f, 0.719237f, -0.694713f},
{ -0.691571f, -0.541668f, 0.477834f},
{ 0.431965f, -0.822296f, 0.370453f},
{ -0.157836f, 0.972098f, -0.173530f},
{ -0.520946f, 0.416890f, -0.744861f},
{ -0.745437f, 0.506584f, 0.433240f},
{ -0.984461f, -0.002248f, -0.175592f},
{ 0.052363f, 0.035121f, 0.998010f},
{ 0.490708f, 0.151014f, 0.858138f},
{ -0.493325f, -0.105406f, -0.863435f},
{ -0.778546f, -0.216018f, -0.589238f},
{ -0.674061f, -0.421684f, 0.606485f},
{ 0.355978f, -0.291916f, 0.887730f},
{ 0.484489f, -0.131128f, 0.864914f},
{ -0.350266f, -0.006220f, 0.936630f},
{ -0.058163f, -0.247209f, 0.967215f},
{ -0.791474f, -0.128239f, -0.597598f},
{ -0.840013f, -0.476965f, 0.258618f},
{ -0.312550f, -0.672083f, -0.671280f},
{ -0.021830f, -0.995408f, 0.093205f},
{ 0.465703f, 0.575882f, 0.671923f},
{ -0.641046f, -0.147719f, 0.753153f},
{ 0.959318f, -0.197215f, -0.202031f},
{ -0.017181f, -0.965139f, -0.261172f},
{ -0.281548f, -0.759646f, -0.586233f},
{ -0.980133f, 0.032809f, 0.195608f},
{ -0.336476f, 0.649194f, 0.682152f},
{ -0.920337f, 0.390051f, -0.028987f},
{ -0.609728f, 0.555112f, 0.565759f},
{ 0.897532f, -0.117324f, -0.425054f},
{ -0.403547f, -0.358150f, -0.841949f},
{ 0.914335f, -0.046204f, 0.402313f},
{ -0.885453f, 0.038894f, -0.463098f},
{ -0.817233f, -0.263513f, -0.512534f},
{ 0.770045f, -0.456672f, -0.445512f},
{ 0.170692f, -0.716368f, -0.676521f},
{ -0.401058f, 0.826315f, 0.395417f},
{ -0.714207f, 0.459025f, 0.528399f},
{ 0.662337f, 0.226266f, 0.714222f},
{ 0.992143f, -0.091192f, 0.085650f},
{ 0.913679f, 0.263321f, 0.309600f},
{ 0.623850f, 0.239401f, -0.743975f},
{ -0.693659f, 0.299559f, -0.655058f},
{ -0.892829f, 0.326644f, 0.310098f},
{ -0.001177f, -0.999998f, 0.001312f},
{ -0.000453f, -0.999999f, 0.001049f},
{ -0.000983f, -0.999999f, 0.001242f},
{ -0.000269f, -1.000000f, 0.000982f},
{ -0.901696f, 0.305934f, -0.305531f},
{ -0.418582f, 0.810219f, 0.410286f},
{ 0.885817f, 0.233343f, -0.401098f},
{ 0.409526f, 0.810722f, 0.418352f},
{ 0.704989f, -0.146275f, 0.693970f},
{ 0.832963f, 0.290101f, 0.471183f},
{ 0.706010f, 0.707506f, -0.031386f},
{ 0.712478f, 0.613692f, -0.340231f},
{ 0.970532f, -0.135245f, 0.199442f},
{ 0.840759f, -0.488798f, 0.232812f},
{ 0.692527f, 0.564703f, -0.448906f},
{ 0.264091f, -0.036085f, -0.963822f},
{ 0.906035f, -0.000049f, 0.423202f},
{ -0.154402f, -0.257167f, -0.953953f},
{ 0.839320f, -0.396957f, -0.371439f},
{ 0.861072f, -0.291956f, 0.416313f},
{ 0.936662f, -0.187536f, 0.295796f},
{ 0.678344f, -0.480906f, -0.555499f},
{ -0.040575f, -0.101548f, -0.994003f},
{ 0.867961f, 0.346405f, 0.355875f},
{ 0.311375f, -0.786415f, 0.533476f},
{ 0.290342f, 0.501480f, -0.814997f},
{ -0.323677f, -0.781426f, -0.533485f},
{ -0.144059f, 0.616471f, -0.774087f},
{ -0.615306f, -0.662785f, -0.426750f},
{ 0.728544f, 0.640915f, 0.241767f},
{ 0.712671f, 0.665248f, 0.222588f},
{ -0.157209f, 0.767452f, -0.621533f},
{ 0.165370f, -0.681820f, 0.712583f},
{ -0.695580f, -0.679107f, -0.234483f},
{ 0.396954f, -0.580332f, 0.711086f},
{ -0.904871f, -0.382829f, -0.186148f},
{ 0.146287f, 0.230277f, -0.962067f},
{ -0.978469f, -0.191353f, -0.077344f},
{ 0.474493f, 0.438106f, -0.763492f},
{ 0.845642f, 0.460377f, 0.270079f},
{ 0.970475f, 0.064446f, 0.232432f},
{ -0.388788f, -0.232403f, 0.891534f},
{ -0.062300f, -0.419163f, 0.905771f},
{ -0.771421f, 0.572115f, -0.278557f},
{ -0.723409f, 0.194799f, 0.662369f},
{ 0.155182f, 0.636280f, -0.755690f},
{ 0.909429f, 0.245062f, -0.335983f},
{ -0.001371f, -0.999997f, -0.001965f},
{ -0.000886f, -0.999998f, -0.002052f},
{ 0.000513f, -0.999997f, -0.002300f},
{ 0.001023f, -0.999997f, -0.002391f},
{ 0.445118f, 0.883605f, 0.145300f},
{ 0.540932f, 0.348673f, -0.765389f},
{ -0.933166f, 0.353706f, -0.063976f},
{ -0.051654f, 0.904521f, 0.423289f},
{ -0.546068f, -0.793601f, 0.268340f},
{ -0.546068f, -0.793602f, 0.268340f},
{ -0.546068f, -0.793602f, 0.268340f},
{ -0.546068f, -0.793602f, 0.268340f},
{ -0.381129f, 0.505884f, 0.773836f},
{ -0.382585f, 0.500696f, 0.776487f},
{ -0.382435f, 0.501232f, 0.776215f},
{ -0.383910f, 0.495914f, 0.778898f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagDeath2.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105