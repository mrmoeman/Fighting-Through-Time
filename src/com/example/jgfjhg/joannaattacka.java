package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaattacka {

static String TextureName = "joannaattack1.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.228996f, 0.633510f, -1.157182f,
 0.493457f, 0.855165f, -1.675673f,
 1.049213f, 0.735359f, -1.420612f,
 0.776092f, 0.520906f, -0.945552f,
 0.128587f, 0.064661f, -1.138319f,
 0.320370f, 0.061373f, -1.706571f,
 2.329691f, 0.061373f, -1.017519f,
 2.136739f, 0.061637f, -0.459940f,
 0.121375f, 3.167182f, 0.131528f,
 0.601658f, 3.461926f, -0.407850f,
 1.338647f, 3.542342f, 0.052943f,
 0.963664f, 3.260801f, 0.644413f,
 1.415357f, 2.050805f, 0.083116f,
 1.666048f, 2.231815f, -0.339582f,
 1.138385f, 2.347147f, -0.573747f,
 0.847991f, 2.187492f, -0.113512f,
 -0.002984f, 8.094190f, -0.081641f,
 -0.169564f, 6.425406f, 0.675354f,
 -1.043106f, 6.957141f, -0.483355f,
 -0.678973f, 8.015373f, -0.439307f,
 -0.576095f, 7.765840f, 1.027886f,
 0.172836f, 6.657838f, -0.200850f,
 -0.055879f, 6.639197f, -0.889978f,
 -0.482623f, 5.014822f, -0.136451f,
 0.233946f, 5.102207f, -0.246658f,
 0.577264f, 5.041904f, 0.253229f,
 0.119450f, 4.795439f, 0.823334f,
 -0.584026f, 9.054329f, 1.132006f,
 0.031697f, 8.817728f, 0.741808f,
 0.028502f, 7.962811f, 0.662557f,
 -0.187779f, 7.483984f, 0.189639f,
 0.765624f, 7.365875f, -0.321515f,
 -0.645519f, 9.156180f, -0.292837f,
 -0.000388f, 8.871633f, -0.016264f,
 -0.378676f, 7.509032f, -0.328396f,
 0.887371f, 7.263713f, -0.695803f,
 0.110341f, 7.611918f, -0.561531f,
 0.185947f, 7.436577f, -1.020811f,
 1.616244f, 6.901029f, -0.240940f,
 1.787085f, 7.239962f, -0.294266f,
 1.994568f, 7.106915f, -0.337429f,
 1.858930f, 6.769394f, -0.287104f,
 -0.489698f, 7.389184f, 0.638723f,
 -0.648753f, 7.653865f, -0.414556f,
 0.203197f, 7.889133f, 0.569214f,
 0.803269f, 8.209163f, 0.327415f,
 1.144998f, 8.063373f, 0.688379f,
 0.810023f, 7.687387f, 1.058491f,
 -0.066086f, 2.122071f, -0.088051f,
 1.714821f, 3.482769f, -0.198732f,
 0.980018f, 3.175652f, -0.838744f,
 0.727930f, 3.343122f, 1.455755f,
 -1.386202f, 7.772447f, 0.667565f,
 -0.704408f, 7.921968f, 0.814658f,
 -1.465069f, 7.870767f, 1.109662f,
 -0.745157f, 8.052871f, 1.208393f,
 -1.230847f, 8.817407f, 0.796029f,
 -1.263142f, 8.871492f, 0.038794f,
 -0.638483f, 4.825322f, 0.961491f,
 -0.923195f, 4.899059f, 0.433088f,
 -0.896004f, 6.903283f, 0.961366f,
 -1.348740f, 7.101657f, 1.076872f,
 -1.201952f, 7.536433f, 0.166760f,
 -0.979937f, 7.495920f, 0.594764f,
 -1.234187f, 7.962692f, 0.716191f,
 -1.265663f, 8.094252f, -0.026838f,
 0.689392f, 7.890642f, -0.640369f,
 1.275769f, 8.293488f, -0.227863f,
 0.407330f, 8.503885f, -0.387401f,
 0.817059f, 8.725931f, -0.158433f,
 0.253015f, 8.089600f, 1.155761f,
 0.410585f, 8.258116f, 1.495426f,
 0.301780f, 8.595134f, 1.392209f,
 0.159873f, 8.462246f, 1.084347f,
 -0.954865f, 3.884773f, 1.758397f,
 -1.229805f, 2.698187f, 1.064814f,
 -0.349404f, 0.848024f, 2.494473f,
 -0.939766f, 0.880987f, 2.496461f,
 -0.950087f, 1.201557f, 3.030735f,
 -0.362399f, 1.173293f, 3.049121f,
 -0.357782f, 0.291401f, 2.561671f,
 -0.946553f, 0.292723f, 2.577411f,
 -0.941863f, 1.048823f, 4.562466f,
 -0.352693f, 1.047508f, 4.558529f,
 -0.019569f, 2.935677f, 0.992619f,
 -0.769585f, 3.108712f, 1.051483f,
 -0.745984f, 3.870413f, 1.475006f,
 0.005978f, 3.807040f, 1.486419f,
 -0.294193f, 3.083006f, 2.684815f,
 -0.811916f, 3.121038f, 2.685878f,
 -0.807458f, 2.768966f, 2.223308f,
 -0.276601f, 2.698630f, 2.148625f,
 2.740338f, 10.520754f, -4.619512f,
 1.896437f, 11.249801f, -4.038276f,
 0.836466f, 6.664583f, 1.221936f,
 0.229579f, 7.489313f, 1.611680f,
 0.847991f, 2.187492f, -0.113512f,
 0.847991f, 2.187492f, -0.113512f,
 0.121375f, 3.167182f, 0.131528f,
 0.228996f, 0.633510f, -1.157182f,
 0.128587f, 0.064661f, -1.138319f,
 0.128587f, 0.064661f, -1.138319f,
 0.228996f, 0.633510f, -1.157182f,
 0.128587f, 0.064661f, -1.138319f,
 0.776092f, 0.520906f, -0.945552f,
 0.776092f, 0.520906f, -0.945552f,
 0.128587f, 0.064661f, -1.138319f,
 2.136739f, 0.061637f, -0.459940f,
 0.776092f, 0.520906f, -0.945552f,
 2.136739f, 0.061637f, -0.459940f,
 2.136739f, 0.061637f, -0.459940f,
 1.049213f, 0.735359f, -1.420612f,
 1.049213f, 0.735359f, -1.420612f,
 1.049213f, 0.735359f, -1.420612f,
 1.049213f, 0.735359f, -1.420612f,
 0.493457f, 0.855165f, -1.675673f,
 0.493457f, 0.855165f, -1.675673f,
 0.847991f, 2.187492f, -0.113512f,
 0.847991f, 2.187492f, -0.113512f,
 0.493457f, 0.855165f, -1.675673f,
 0.228996f, 0.633510f, -1.157182f,
 -0.187779f, 7.483984f, 0.189639f,
 -0.187779f, 7.483984f, 0.189639f,
 0.172836f, 6.657838f, -0.200850f,
 0.172836f, 6.657838f, -0.200850f,
 -0.187779f, 7.483984f, 0.189639f,
 -0.187779f, 7.483984f, 0.189639f,
 -0.378676f, 7.509032f, -0.328396f,
 -0.378676f, 7.509032f, -0.328396f,
 -0.378676f, 7.509032f, -0.328396f,
 -0.187779f, 7.483984f, 0.189639f,
 -0.187779f, 7.483984f, 0.189639f,
 0.172836f, 6.657838f, -0.200850f,
 -0.055879f, 6.639197f, -0.889978f,
 1.616244f, 6.901029f, -0.240940f,
 1.616244f, 6.901029f, -0.240940f,
 -0.055879f, 6.639197f, -0.889978f,
 -0.055879f, 6.639197f, -0.889978f,
 0.172836f, 6.657838f, -0.200850f,
 0.203197f, 7.889133f, 0.569214f,
 0.203197f, 7.889133f, 0.569214f,
 1.616244f, 6.901029f, -0.240940f,
 0.810023f, 7.687387f, 1.058491f,
 0.810023f, 7.687387f, 1.058491f,
 1.616244f, 6.901029f, -0.240940f,
 -0.055879f, 6.639197f, -0.889978f,
 -0.055879f, 6.639197f, -0.889978f,
 -0.378676f, 7.509032f, -0.328396f,
 -0.378676f, 7.509032f, -0.328396f,
 0.810023f, 7.687387f, 1.058491f,
 -0.066086f, 2.122071f, -0.088051f,
 0.980018f, 3.175652f, -0.838744f,
 0.727930f, 3.343122f, 1.455755f,
 0.727930f, 3.343122f, 1.455755f,
 0.980018f, 3.175652f, -0.838744f,
 1.714821f, 3.482769f, -0.198732f,
 -0.584026f, 9.054329f, 1.132006f,
 -0.645519f, 9.156180f, -0.292837f,
 -0.645519f, 9.156180f, -0.292837f,
 -0.169564f, 6.425406f, 0.675354f,
 -0.979937f, 7.495920f, 0.594764f,
 -0.169564f, 6.425406f, 0.675354f,
 -0.489698f, 7.389184f, 0.638723f,
 -0.979937f, 7.495920f, 0.594764f,
 -0.896004f, 6.903283f, 0.961366f,
 -0.896004f, 6.903283f, 0.961366f,
 -0.489698f, 7.389184f, 0.638723f,
 -0.576095f, 7.765840f, 1.027886f,
 -0.979937f, 7.495920f, 0.594764f,
 -0.576095f, 7.765840f, 1.027886f,
 -0.979937f, 7.495920f, 0.594764f,
 -0.648753f, 7.653865f, -0.414556f,
 -1.201952f, 7.536433f, 0.166760f,
 -0.678973f, 8.015373f, -0.439307f,
 -1.201952f, 7.536433f, 0.166760f,
 -0.678973f, 8.015373f, -0.439307f,
 -1.201952f, 7.536433f, 0.166760f,
 -0.979937f, 7.495920f, 0.594764f,
 -0.979937f, 7.495920f, 0.594764f,
 0.119450f, 4.795439f, 0.823334f,
 -0.169564f, 6.425406f, 0.675354f,
 -0.169564f, 6.425406f, 0.675354f,
 -0.896004f, 6.903283f, 0.961366f,
 0.253015f, 8.089600f, 1.155761f,
 -1.348740f, 7.101657f, 1.076872f,
 0.253015f, 8.089600f, 1.155761f,
 -1.348740f, 7.101657f, 1.076872f,
 -1.348740f, 7.101657f, 1.076872f,
 -0.896004f, 6.903283f, 0.961366f,
 0.689392f, 7.890642f, -0.640369f,
 0.689392f, 7.890642f, -0.640369f,
 1.275769f, 8.293488f, -0.227863f,
 0.253015f, 8.089600f, 1.155761f,
 1.275769f, 8.293488f, -0.227863f,
 0.253015f, 8.089600f, 1.155761f,
 -1.348740f, 7.101657f, 1.076872f,
 -1.348740f, 7.101657f, 1.076872f,
 -1.201952f, 7.536433f, 0.166760f,
 -1.043106f, 6.957141f, -0.483355f,
 -1.201952f, 7.536433f, 0.166760f,
 -0.648753f, 7.653865f, -0.414556f,
 -1.043106f, 6.957141f, -0.483355f,
 1.275769f, 8.293488f, -0.227863f,
 -0.678973f, 8.015373f, -0.439307f,
 -0.645519f, 9.156180f, -0.292837f,
 -0.678973f, 8.015373f, -0.439307f,
 -0.584026f, 9.054329f, 1.132006f,
 -0.576095f, 7.765840f, 1.027886f,
 -0.576095f, 7.765840f, 1.027886f,
 -0.482623f, 5.014822f, -0.136451f,
 -1.043106f, 6.957141f, -0.483355f,
 -0.482623f, 5.014822f, -0.136451f,
 -0.066086f, 2.122071f, -0.088051f,
 -0.482623f, 5.014822f, -0.136451f,
 -0.482623f, 5.014822f, -0.136451f,
 0.727930f, 3.343122f, 1.455755f,
 0.119450f, 4.795439f, 0.823334f,
 0.119450f, 4.795439f, 0.823334f,
 -0.066086f, 2.122071f, -0.088051f,
 0.727930f, 3.343122f, 1.455755f,
 -1.229805f, 2.698187f, 1.064814f,
 0.727930f, 3.343122f, 1.455755f,
 -0.954865f, 3.884773f, 1.758397f,
 -1.229805f, 2.698187f, 1.064814f,
 -0.276601f, 2.698630f, 2.148625f,
 -0.019569f, 2.935677f, 0.992619f,
 -0.276601f, 2.698630f, 2.148625f,
 -0.349404f, 0.848024f, 2.494473f,
 -0.357782f, 0.291401f, 2.561671f,
 -0.357782f, 0.291401f, 2.561671f,
 -0.349404f, 0.848024f, 2.494473f,
 -0.362399f, 1.173293f, 3.049121f,
 -0.357782f, 0.291401f, 2.561671f,
 -0.362399f, 1.173293f, 3.049121f,
 -0.352693f, 1.047508f, 4.558529f,
 -0.357782f, 0.291401f, 2.561671f,
 -0.362399f, 1.173293f, 3.049121f,
 -0.352693f, 1.047508f, 4.558529f,
 -0.352693f, 1.047508f, 4.558529f,
 -0.950087f, 1.201557f, 3.030735f,
 -0.950087f, 1.201557f, 3.030735f,
 -0.950087f, 1.201557f, 3.030735f,
 -0.939766f, 0.880987f, 2.496461f,
 -0.950087f, 1.201557f, 3.030735f,
 -0.276601f, 2.698630f, 2.148625f,
 -0.939766f, 0.880987f, 2.496461f,
 -0.276601f, 2.698630f, 2.148625f,
 -0.349404f, 0.848024f, 2.494473f,
 -0.939766f, 0.880987f, 2.496461f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.413071f, -0.863636f, 0.288973f},
{ -0.111493f, -0.761000f, -0.639100f},
{ 0.399501f, -0.700224f, 0.591680f},
{ 0.693457f, -0.615903f, -0.373872f},
{ 0.247739f, -0.324152f, 0.912990f},
{ 0.404961f, -0.460531f, 0.789885f},
{ 0.937702f, 0.290726f, -0.190245f},
{ 0.968107f, 0.026365f, -0.249146f},
{ -0.787854f, -0.608338f, 0.095967f},
{ -0.857856f, -0.292215f, 0.422722f},
{ -0.090759f, 0.449734f, -0.888539f},
{ -0.116780f, 0.044897f, -0.992142f},
{ -0.939680f, 0.174260f, 0.294338f},
{ -0.341010f, 0.495153f, -0.799084f},
{ 0.683768f, 0.243601f, -0.687837f},
{ 0.001754f, -0.083507f, 0.996506f},
{ 0.346453f, 0.865985f, 0.360611f},
{ 0.025762f, 0.570008f, 0.821235f},
{ -0.136957f, 0.234531f, -0.962413f},
{ 0.358998f, 0.145082f, -0.921993f},
{ 0.029806f, 0.652266f, 0.757404f},
{ 0.768489f, 0.465631f, 0.438877f},
{ -0.023186f, 0.728345f, -0.684818f},
{ 0.761642f, 0.425506f, -0.488720f},
{ 0.877175f, 0.396087f, 0.271441f},
{ 0.339664f, 0.160827f, -0.926695f},
{ 0.943003f, -0.094813f, 0.318992f},
{ -0.048858f, -0.292712f, -0.954952f},
{ -0.061615f, 0.427233f, -0.902040f},
{ 0.942587f, 0.009812f, 0.333816f},
{ 0.645725f, 0.200683f, 0.736726f},
{ 0.446717f, -0.080261f, 0.891068f},
{ 0.086293f, -0.308733f, 0.947226f},
{ 0.854911f, -0.278511f, 0.437674f},
{ -0.438276f, 0.147983f, -0.886575f},
{ -0.094208f, 0.035195f, -0.994930f},
{ 0.857849f, -0.060520f, -0.510326f},
{ 0.524735f, 0.402304f, 0.750203f},
{ -0.888928f, -0.411489f, -0.201205f},
{ -0.095297f, -0.645739f, 0.757588f},
{ -0.229279f, 0.663637f, -0.712052f},
{ 0.755945f, 0.451388f, 0.474127f},
{ -0.484185f, -0.733630f, 0.476814f},
{ 0.776391f, -0.614235f, -0.141183f},
{ 0.984526f, -0.146658f, 0.095915f},
{ 0.040436f, 0.772579f, -0.633630f},
{ -0.844622f, -0.177192f, -0.505191f},
{ 0.994828f, -0.070241f, -0.073370f},
{ 0.174226f, -0.412097f, -0.894327f},
{ -0.653895f, -0.133928f, -0.744638f},
{ -0.246745f, -0.821595f, -0.513905f},
{ 0.632108f, -0.213196f, 0.744975f},
{ 0.181841f, 0.470756f, -0.863321f},
{ -0.829443f, 0.239252f, 0.504761f},
{ 0.202770f, 0.128381f, -0.970774f},
{ -0.365163f, 0.375264f, 0.851958f},
{ -0.727351f, 0.461088f, 0.508289f},
{ -0.804221f, 0.433322f, -0.406769f},
{ -0.286285f, 0.347295f, 0.892988f},
{ 0.361585f, -0.095566f, 0.927428f},
{ -0.961618f, 0.017118f, -0.273856f},
{ -0.900339f, -0.324787f, 0.289659f},
{ -0.959498f, 0.047109f, -0.277748f},
{ -0.078709f, 0.118590f, 0.989819f},
{ -0.844123f, -0.210213f, 0.493220f},
{ -0.882910f, -0.102041f, -0.458321f},
{ -0.074355f, -0.955748f, -0.284634f},
{ -0.867322f, 0.198215f, -0.456579f},
{ 0.919418f, -0.361954f, 0.153819f},
{ 0.342743f, 0.938479f, 0.042250f},
{ 0.281803f, -0.949878f, -0.135346f},
{ 0.579261f, -0.185252f, 0.793813f},
{ 0.283975f, 0.765752f, 0.577047f},
{ -0.712933f, 0.583643f, -0.388700f},
{ -0.464111f, 0.077526f, 0.882378f},
{ -0.784507f, -0.620119f, 0.000664f},
{ 0.533394f, -0.843063f, 0.068815f},
{ 0.564630f, -0.376112f, 0.734665f},
{ -0.550976f, -0.831358f, 0.072595f},
{ -0.581553f, -0.362464f, 0.728297f},
{ 0.745932f, 0.461598f, 0.480117f},
{ -0.654851f, 0.656192f, 0.374942f},
{ 0.634473f, 0.350128f, 0.689097f},
{ -0.616034f, 0.430122f, 0.659922f},
{ 0.650718f, -0.759240f, -0.011003f},
{ 0.847858f, -0.413797f, -0.331526f},
{ -0.896482f, -0.183003f, -0.403521f},
{ -0.800468f, -0.573405f, -0.174521f},
{ 0.677245f, -0.144872f, -0.721354f},
{ -0.661613f, -0.091162f, -0.744284f},
{ -0.898161f, 0.317698f, 0.303931f},
{ 0.893247f, 0.297346f, 0.337186f},
{ 0.734029f, 0.431720f, 0.524233f},
{ 0.739335f, 0.426670f, 0.520900f},
{ 0.792393f, 0.371706f, 0.483681f},
{ 0.800052f, 0.363007f, 0.477642f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaattack1.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117