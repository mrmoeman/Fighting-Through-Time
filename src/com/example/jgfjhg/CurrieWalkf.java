package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieWalkf {

static String TextureName = "CurrieWalk6.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 3.045782f, 4.699414f, 3.121255f,
 3.134471f, 2.181094f, 1.467070f,
 2.285065f, 5.345471f, 2.063494f,
 2.373448f, 2.828985f, 0.407479f,
 0.993277f, 5.604371f, 1.465020f,
 0.998951f, 6.049981f, -0.373877f,
 -1.066990f, 5.319956f, 1.527608f,
 -0.988355f, 6.215593f, -0.228127f,
 -0.025686f, 5.451878f, 1.318517f,
 0.642205f, 5.577698f, 0.520579f,
 -0.005300f, 5.654503f, 0.007264f,
 -0.017316f, 6.224344f, 1.872222f,
 1.038695f, 6.471090f, 0.831812f,
 -0.023689f, 6.868914f, -0.256191f,
 -0.011955f, 7.325843f, 1.881731f,
 0.853779f, 7.374907f, 1.030626f,
 -0.021653f, 7.751718f, 0.141414f,
 -0.017835f, 7.413504f, 0.811729f,
 0.423120f, 7.257260f, 0.472798f,
 -0.021612f, 6.992150f, 0.124499f,
 -0.019026f, 8.106483f, 0.595107f,
 0.603345f, 7.729608f, 0.092953f,
 -0.023221f, 7.347456f, -0.404974f,
 -0.021830f, 8.375637f, 0.120483f,
 0.419660f, 8.077780f, -0.174392f,
 -0.024207f, 7.836232f, -0.586738f,
 -0.079242f, 3.141163f, 0.777652f,
 0.242374f, 2.854897f, -0.651861f,
 -0.513448f, 0.000164f, 1.769576f,
 0.505256f, 0.000177f, -1.304682f,
 0.005336f, 4.702192f, 1.538846f,
 -0.013402f, 5.696151f, -0.451375f,
 -0.024857f, 5.622305f, 1.255582f,
 -0.006519f, 6.030723f, 0.003451f,
 0.566845f, 5.850381f, 0.632793f,
 0.308080f, 5.765703f, 0.939115f,
 0.324678f, 5.942052f, 0.224336f,
 0.672816f, 3.130119f, 0.762682f,
 1.069362f, 3.043064f, 0.270652f,
 1.907738f, 0.000165f, 0.553886f,
 0.979048f, -0.000156f, 1.722865f,
 0.770084f, 2.894314f, -0.353515f,
 1.674491f, -0.000155f, -0.375851f,
 0.872037f, 4.900922f, 1.285234f,
 1.420996f, 5.522249f, 0.454893f,
 1.050943f, 5.666774f, -0.189877f,
 2.360732f, 3.468871f, 1.884771f,
 1.771401f, 4.106043f, 0.855771f,
 1.771919f, 4.407835f, 1.149114f,
 2.360904f, 3.770738f, 2.177722f,
 0.802031f, 4.980300f, 0.059142f,
 0.802929f, 4.910465f, 0.466864f,
 2.106198f, 4.586315f, 1.243785f,
 2.899487f, 3.820986f, 2.510605f,
 0.743320f, 5.400949f, 0.779051f,
 2.286067f, 4.596963f, 0.920867f,
 3.253988f, 3.961399f, 1.968907f,
 1.552108f, 5.515831f, 0.390004f,
 2.285588f, 4.295883f, 0.632123f,
 3.253814f, 3.659535f, 1.675878f,
 1.547691f, 5.335974f, -0.024591f,
 2.105160f, 3.972084f, 0.648494f,
 2.899130f, 3.204638f, 1.912414f,
 0.737427f, 5.710690f, -0.036360f,
 -0.711856f, 3.114703f, 0.334184f,
 -1.682712f, -0.000163f, 0.840784f,
 -1.729597f, 0.000165f, -0.651395f,
 -0.840999f, 3.063357f, -0.437892f,
 -0.987276f, -0.000164f, -1.257924f,
 -0.349784f, 2.918735f, -0.698628f,
 -1.440950f, 5.452437f, 0.449292f,
 -0.948203f, 4.854826f, 1.279235f,
 -1.075927f, 5.644897f, -0.191239f,
 -0.605836f, 5.821981f, 0.672633f,
 -0.353810f, 5.752160f, 0.938668f,
 -0.331327f, 5.944947f, 0.227891f,
 -2.375874f, 3.740550f, -0.228649f,
 -2.267587f, 3.869986f, 0.157169f,
 -1.767585f, 4.729027f, -0.565438f,
 -1.828469f, 4.708200f, -0.988063f,
 -0.797552f, 4.870830f, 0.453433f,
 -0.794907f, 4.943472f, 0.048989f,
 -2.725958f, 3.824164f, 0.594720f,
 -2.084468f, 4.793630f, -0.371033f,
 -0.760734f, 5.358510f, 0.777992f,
 -3.120998f, 4.241116f, 0.264354f,
 -2.250810f, 5.056626f, -0.500784f,
 -1.563576f, 5.412023f, 0.554415f,
 -3.229479f, 4.112322f, -0.120319f,
 -2.317864f, 5.040968f, -0.980117f,
 -1.461317f, 5.796260f, 0.344692f,
 -2.947693f, 3.560923f, -0.192182f,
 -2.211146f, 4.726019f, -1.149567f,
 -0.765830f, 5.674282f, -0.039459f,
 -0.673230f, 5.526956f, 0.595729f,
 -1.074237f, 6.468075f, 0.854788f,
 -0.887076f, 7.374644f, 1.041020f,
 -0.462428f, 7.257049f, 0.479229f,
 -0.645906f, 7.730409f, 0.106188f,
 -0.464658f, 8.081783f, -0.159105f,
 -1.368459f, 1.625131f, 0.904173f,
 -0.533507f, 1.519966f, 1.652600f,
 0.591995f, 1.570787f, 1.676314f,
 1.344523f, 1.584069f, 1.042936f,
 1.063416f, 1.327939f, 0.176728f,
 0.211605f, 1.223733f, -0.446581f,
 -0.825161f, 1.350126f, -0.521730f,
 -1.424736f, 1.589056f, -0.096744f,
 2.360732f, 3.468871f, 1.884771f,
 2.360732f, 3.468871f, 1.884771f,
 1.771401f, 4.106043f, 0.855771f,
 1.771401f, 4.106043f, 0.855771f,
 0.802031f, 4.980300f, 0.059142f,
 0.802031f, 4.980300f, 0.059142f,
 2.899130f, 3.204638f, 1.912414f,
 2.899130f, 3.204638f, 1.912414f,
 0.211605f, 1.223733f, -0.446581f,
 0.211605f, 1.223733f, -0.446581f,
 0.242374f, 2.854897f, -0.651861f,
 -0.533507f, 1.519966f, 1.652600f,
 -0.533507f, 1.519966f, 1.652600f,
 -0.079242f, 3.141163f, 0.777652f,
 -0.079242f, 3.141163f, 0.777652f,
 0.005336f, 4.702192f, 1.538846f,
 0.005336f, 4.702192f, 1.538846f,
 0.242374f, 2.854897f, -0.651861f,
 -0.013402f, 5.696151f, -0.451375f,
 -0.013402f, 5.696151f, -0.451375f,
 0.005336f, 4.702192f, 1.538846f,
 -0.024857f, 5.622305f, 1.255582f,
 -0.024857f, 5.622305f, 1.255582f,
 -0.013402f, 5.696151f, -0.451375f,
 -0.013402f, 5.696151f, -0.451375f,
 -0.006519f, 6.030723f, 0.003451f,
 -2.375874f, 3.740550f, -0.228649f,
 -2.375874f, 3.740550f, -0.228649f,
 -1.828469f, 4.708200f, -0.988063f,
 -0.794907f, 4.943472f, 0.048989f,
 -0.794907f, 4.943472f, 0.048989f,
 -1.828469f, 4.708200f, -0.988063f,
 -2.947693f, 3.560923f, -0.192182f,
 -2.947693f, 3.560923f, -0.192182f,
 -0.017316f, 6.224344f, 1.872222f,
 -0.025686f, 5.451878f, 1.318517f,
 -0.025686f, 5.451878f, 1.318517f,
 -0.023689f, 6.868914f, -0.256191f,
 -0.005300f, 5.654503f, 0.007264f,
 -0.005300f, 5.654503f, 0.007264f,
 -0.011955f, 7.325843f, 1.881731f,
 -0.017316f, 6.224344f, 1.872222f,
 -0.017316f, 6.224344f, 1.872222f,
 -0.023689f, 6.868914f, -0.256191f,
 -0.023689f, 6.868914f, -0.256191f,
 -0.021653f, 7.751718f, 0.141414f,
 -0.021653f, 7.751718f, 0.141414f,
 -0.011955f, 7.325843f, 1.881731f,
 -0.019026f, 8.106483f, 0.595107f,
 -0.019026f, 8.106483f, 0.595107f,
 -0.017835f, 7.413504f, 0.811729f,
 -0.023221f, 7.347456f, -0.404974f,
 -0.021612f, 6.992150f, 0.124499f,
 -0.021612f, 6.992150f, 0.124499f,
 -0.021830f, 8.375637f, 0.120483f,
 -0.019026f, 8.106483f, 0.595107f,
 -0.019026f, 8.106483f, 0.595107f,
 -0.024207f, 7.836232f, -0.586738f,
 -0.023221f, 7.347456f, -0.404974f,
 -0.023221f, 7.347456f, -0.404974f,
 -0.024207f, 7.836232f, -0.586738f,
 -0.021830f, 8.375637f, 0.120483f,
 -0.533507f, 1.519966f, 1.652600f,
 -0.513448f, 0.000164f, 1.769576f,
 -0.513448f, 0.000164f, 1.769576f,
 0.505256f, 0.000177f, -1.304682f,
 0.505256f, 0.000177f, -1.304682f,
 0.211605f, 1.223733f, -0.446581f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.851517f, 0.308482f, -0.423977f},
{ 0.851786f, 0.308456f, -0.423457f},
{ 0.851625f, 0.308472f, -0.423769f},
{ 0.851893f, 0.308446f, -0.423249f},
{ -0.126022f, 0.964213f, 0.233264f},
{ -0.013506f, 0.938299f, 0.345561f},
{ -0.005524f, 0.935541f, 0.353175f},
{ 0.107060f, 0.883723f, 0.455601f},
{ 0.288284f, 0.279820f, 0.915747f},
{ 0.891609f, 0.233259f, 0.388104f},
{ 0.434768f, 0.082482f, 0.896757f},
{ 0.998653f, -0.007879f, -0.051284f},
{ 0.746092f, 0.286250f, -0.601172f},
{ 0.679678f, -0.015417f, -0.733349f},
{ 0.299764f, 0.008831f, -0.953973f},
{ 0.335293f, 0.288608f, -0.896819f},
{ -0.348185f, 0.287230f, 0.892337f},
{ -0.300992f, 0.083863f, 0.949932f},
{ 0.986726f, 0.144798f, 0.073527f},
{ 0.675563f, -0.059667f, 0.734884f},
{ -0.036043f, -0.215538f, 0.975830f},
{ 0.007093f, 0.214687f, -0.976657f},
{ 0.538158f, 0.181128f, -0.823151f},
{ 0.429465f, 0.781978f, 0.451741f},
{ 0.479112f, 0.577139f, 0.661334f},
{ -0.015963f, 0.440782f, 0.897472f},
{ 0.001283f, 0.805522f, -0.592564f},
{ 0.249002f, 0.929439f, -0.272288f},
{ -0.681172f, 0.082598f, 0.727449f},
{ -0.774579f, -0.040813f, 0.631159f},
{ -0.647922f, -0.758800f, 0.066484f},
{ -0.725037f, -0.686787f, 0.051428f},
{ 0.209351f, -0.300241f, -0.930606f},
{ -0.536086f, -0.731768f, 0.420865f},
{ 0.201731f, 0.420384f, 0.884637f},
{ 0.033021f, 0.770904f, 0.636094f},
{ -0.052154f, 0.521465f, 0.851677f},
{ 0.721346f, 0.649639f, 0.240063f},
{ 0.759414f, 0.636988f, -0.132428f},
{ 0.356257f, 0.892320f, 0.277211f},
{ 0.775941f, -0.292390f, -0.558949f},
{ 0.715416f, 0.037513f, -0.697691f},
{ 0.150321f, -0.004906f, -0.988625f},
{ 0.238296f, -0.952758f, -0.188328f},
{ 0.022845f, -0.707039f, -0.706806f},
{ 0.487054f, 0.576586f, -0.655993f},
{ 0.009428f, -0.302464f, 0.953114f},
{ 0.010283f, -0.606136f, 0.795294f},
{ 0.995788f, -0.084852f, -0.034725f},
{ 0.922245f, -0.367817f, -0.119062f},
{ -0.013395f, 0.086558f, -0.996157f},
{ -0.028291f, -0.177371f, -0.983737f},
{ 0.006365f, 0.552730f, 0.833336f},
{ 0.787584f, 0.595826f, 0.157172f},
{ -0.003099f, 0.871427f, -0.490516f},
{ 0.006535f, 0.298361f, 0.954431f},
{ 0.939009f, -0.139019f, 0.314540f},
{ 0.009876f, 0.595265f, 0.803469f},
{ 0.999370f, 0.026911f, 0.023154f},
{ -0.007105f, -0.827093f, -0.562020f},
{ -0.008795f, -0.656144f, -0.754585f},
{ 0.005705f, 0.999871f, 0.014988f},
{ 0.731201f, 0.543007f, -0.412902f},
{ -0.015244f, 0.176060f, -0.984261f},
{ -0.880556f, 0.034137f, -0.472710f},
{ -0.907468f, 0.295091f, -0.299036f},
{ -0.857116f, 0.106854f, 0.503918f},
{ -0.831197f, 0.306026f, 0.464176f},
{ -0.145243f, 0.021437f, -0.989164f},
{ -0.180447f, 0.277272f, -0.943694f},
{ -0.711308f, -0.244853f, 0.658854f},
{ -0.996542f, 0.036439f, 0.074680f},
{ -0.557385f, 0.251344f, -0.791295f},
{ -0.467685f, 0.766724f, 0.439778f},
{ -0.476885f, 0.569871f, 0.669199f},
{ -0.276320f, 0.926020f, -0.257167f},
{ 0.654673f, -0.352623f, -0.668626f},
{ 0.471699f, -0.868295f, 0.153505f},
{ 0.454971f, -0.780590f, -0.428580f},
{ 0.786375f, -0.336359f, 0.518148f},
{ 0.631153f, -0.408914f, -0.659117f},
{ -0.354379f, -0.663491f, 0.658934f},
{ -0.016641f, -0.041077f, 0.999017f},
{ 0.027781f, -0.031278f, 0.999125f},
{ -0.218770f, -0.062917f, 0.973746f},
{ -0.503432f, 0.565488f, 0.653283f},
{ -0.694838f, 0.647431f, 0.313104f},
{ -0.530078f, -0.278274f, 0.800987f},
{ -0.891700f, 0.090721f, -0.443441f},
{ -0.348861f, 0.708167f, -0.613836f},
{ -0.246529f, 0.961531f, -0.121166f},
{ -0.041878f, 0.033808f, -0.998551f},
{ -0.461581f, -0.719849f, -0.518421f},
{ 0.314876f, 0.703710f, -0.636903f},
{ -0.995886f, -0.081116f, -0.040389f},
{ -0.924832f, -0.361452f, -0.118485f},
{ -0.785549f, 0.597578f, 0.160665f},
{ -0.999176f, 0.025108f, 0.031894f},
{ -0.935816f, -0.139850f, 0.323559f},
{ -0.737869f, 0.542416f, -0.401664f},
{ -0.896799f, 0.157269f, 0.413544f},
{ -0.326694f, 0.067524f, 0.942715f},
{ 0.492753f, 0.146821f, 0.857694f},
{ 0.928149f, 0.316612f, 0.195693f},
{ 0.677277f, 0.501834f, -0.538013f},
{ 0.271796f, 0.546846f, -0.791888f},
{ -0.230703f, 0.462977f, -0.855820f},
{ -0.872958f, 0.304980f, -0.380698f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieWalk6.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73