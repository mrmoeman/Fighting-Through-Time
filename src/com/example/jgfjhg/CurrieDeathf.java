package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeathf {

static String TextureName = "CurrieDeath6.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -4.362823f, -0.944005f, -9.467871f,
 -3.803814f, 1.097403f, -7.324142f,
 -3.263650f, -0.400154f, -10.247931f,
 -2.708441f, 1.640602f, -8.103596f,
 -1.425320f, 0.044167f, -10.568696f,
 -1.297877f, 1.917071f, -10.506635f,
 0.407537f, -0.257778f, -10.607426f,
 0.712613f, 1.649561f, -10.902197f,
 -0.459424f, 0.063541f, -10.502430f,
 -0.990189f, 0.905541f, -10.329498f,
 -0.295015f, 1.328072f, -10.362624f,
 -0.570775f, -0.135577f, -11.544585f,
 -1.559393f, 0.916315f, -11.135065f,
 -0.492698f, 2.067390f, -11.136641f,
 -0.731077f, 0.407056f, -12.538439f,
 -1.528470f, 1.173701f, -12.037050f,
 -0.648445f, 2.125969f, -12.098853f,
 -0.658394f, 1.389118f, -12.110778f,
 -1.044577f, 1.609321f, -11.743634f,
 -0.541388f, 1.791837f, -11.422328f,
 -0.743091f, 1.910288f, -12.609131f,
 -1.261943f, 2.165687f, -11.947201f,
 -0.540420f, 2.410025f, -11.506880f,
 -0.739448f, 2.443959f, -12.627520f,
 -1.108791f, 2.562404f, -12.159722f,
 -0.595547f, 2.798637f, -11.849412f,
 -0.272973f, 0.482369f, -8.006923f,
 -0.042177f, 1.965576f, -7.761428f,
 -0.232824f, -0.741131f, -5.066671f,
 0.282661f, 2.374847f, -4.349901f,
 -0.513998f, -0.145757f, -9.608754f,
 -0.173175f, 1.840809f, -10.550072f,
 -0.467681f, 0.163142f, -10.644851f,
 -0.330269f, 1.437552f, -10.706510f,
 -0.969107f, 0.862298f, -10.625530f,
 -0.761612f, 0.526431f, -10.653466f,
 -0.655066f, 1.265309f, -10.709813f,
 -0.971228f, 0.769188f, -7.964275f,
 -1.188505f, 1.361135f, -7.891125f,
 -1.819149f, 1.406092f, -4.605098f,
 -1.535026f, -0.024241f, -4.925075f,
 -0.654972f, 1.873761f, -7.766974f,
 -1.183133f, 2.102958f, -4.435782f,
 -1.324412f, 0.281636f, -9.727978f,
 -1.742122f, 1.228018f, -10.281828f,
 -1.268735f, 1.791647f, -10.438841f,
 -3.253277f, 0.172060f, -8.450333f,
 -2.322725f, 0.755198f, -9.228887f,
 -2.396311f, 0.467931f, -9.467935f,
 -3.366266f, -0.154725f, -8.689955f,
 -1.020023f, 1.472201f, -9.782001f,
 -1.094593f, 1.070151f, -9.723066f,
 -2.713557f, 0.450300f, -9.685948f,
 -3.991198f, -0.266069f, -8.713603f,
 -1.134360f, 0.772407f, -10.223538f,
 -2.801541f, 0.801769f, -9.739260f,
 -4.115137f, 0.327276f, -8.980093f,
 -1.787327f, 1.287876f, -10.424154f,
 -2.716283f, 1.110023f, -9.493295f,
 -4.002188f, 0.653990f, -8.740524f,
 -1.776785f, 1.687626f, -10.214846f,
 -2.552300f, 1.094308f, -9.161032f,
 -3.760301f, 0.401125f, -8.224496f,
 -0.990630f, 1.582476f, -10.513206f,
 0.494365f, 0.642532f, -7.995772f,
 1.232964f, -0.469433f, -4.980154f,
 1.963315f, 0.797639f, -4.680336f,
 0.932953f, 1.276437f, -7.935913f,
 1.584875f, 1.657747f, -4.490821f,
 0.537388f, 1.771975f, -7.834136f,
 1.059302f, 0.666661f, -10.446365f,
 0.455959f, -0.073692f, -9.832054f,
 0.819771f, 1.375452f, -10.590506f,
 0.162698f, 0.726708f, -10.762351f,
 -0.115606f, 0.452723f, -10.722395f,
 -0.007305f, 1.158940f, -10.782892f,
 2.847867f, 0.514523f, -8.584643f,
 2.755296f, 0.133708f, -8.430640f,
 1.716376f, 0.356145f, -9.327762f,
 1.833743f, 0.697788f, -9.450167f,
 0.474388f, 0.759747f, -9.812504f,
 0.547358f, 1.166682f, -9.876259f,
 3.250840f, -0.258855f, -8.369526f,
 1.880702f, 0.022927f, -9.432573f,
 0.335165f, 0.478747f, -10.307036f,
 3.375416f, -0.248244f, -9.019710f,
 2.015369f, 0.097899f, -9.762816f,
 0.948639f, 0.350735f, -10.501566f,
 3.468500f, 0.132127f, -9.174367f,
 2.131563f, 0.461645f, -9.903998f,
 1.137986f, 0.697906f, -10.731489f,
 3.440327f, 0.517204f, -8.684938f,
 2.141849f, 0.780613f, -9.715211f,
 0.481593f, 1.288451f, -10.599860f,
 0.273345f, 0.750691f, -10.480933f,
 0.517013f, 0.900168f, -11.485624f,
 0.187431f, 1.172310f, -12.328604f,
 -0.171317f, 1.606298f, -11.892953f,
 -0.029570f, 2.156983f, -12.160552f,
 -0.238703f, 2.556428f, -12.311707f,
 0.911170f, -0.116059f, -6.514168f,
 -0.158262f, -0.456803f, -6.413129f,
 -1.187909f, -0.002945f, -6.352239f,
 -1.598894f, 0.974297f, -6.273959f,
 -0.945548f, 1.675596f, -6.012464f,
 0.107005f, 1.899372f, -5.927186f,
 1.122733f, 1.548958f, -6.111168f,
 1.598605f, 0.944672f, -6.370640f,
 -3.253277f, 0.172060f, -8.450333f,
 -3.253277f, 0.172060f, -8.450333f,
 -2.322725f, 0.755198f, -9.228887f,
 -2.322725f, 0.755198f, -9.228887f,
 -1.020023f, 1.472201f, -9.782001f,
 -1.020023f, 1.472201f, -9.782001f,
 -3.760301f, 0.401125f, -8.224496f,
 -3.760301f, 0.401125f, -8.224496f,
 0.107005f, 1.899372f, -5.927186f,
 0.107005f, 1.899372f, -5.927186f,
 -0.042177f, 1.965576f, -7.761428f,
 -0.158262f, -0.456803f, -6.413129f,
 -0.158262f, -0.456803f, -6.413129f,
 -0.272973f, 0.482369f, -8.006923f,
 -0.272973f, 0.482369f, -8.006923f,
 -0.513998f, -0.145757f, -9.608754f,
 -0.513998f, -0.145757f, -9.608754f,
 -0.042177f, 1.965576f, -7.761428f,
 -0.173175f, 1.840809f, -10.550072f,
 -0.173175f, 1.840809f, -10.550072f,
 -0.513998f, -0.145757f, -9.608754f,
 -0.467681f, 0.163142f, -10.644851f,
 -0.467681f, 0.163142f, -10.644851f,
 -0.173175f, 1.840809f, -10.550072f,
 -0.173175f, 1.840809f, -10.550072f,
 -0.330269f, 1.437552f, -10.706510f,
 2.847867f, 0.514523f, -8.584643f,
 2.847867f, 0.514523f, -8.584643f,
 1.833743f, 0.697788f, -9.450167f,
 0.547358f, 1.166682f, -9.876259f,
 0.547358f, 1.166682f, -9.876259f,
 1.833743f, 0.697788f, -9.450167f,
 3.440327f, 0.517204f, -8.684938f,
 3.440327f, 0.517204f, -8.684938f,
 -0.570775f, -0.135577f, -11.544585f,
 -0.459424f, 0.063541f, -10.502430f,
 -0.459424f, 0.063541f, -10.502430f,
 -0.492698f, 2.067390f, -11.136641f,
 -0.295015f, 1.328072f, -10.362624f,
 -0.295015f, 1.328072f, -10.362624f,
 -0.731077f, 0.407056f, -12.538439f,
 -0.570775f, -0.135577f, -11.544585f,
 -0.570775f, -0.135577f, -11.544585f,
 -0.492698f, 2.067390f, -11.136641f,
 -0.492698f, 2.067390f, -11.136641f,
 -0.648445f, 2.125969f, -12.098853f,
 -0.648445f, 2.125969f, -12.098853f,
 -0.731077f, 0.407056f, -12.538439f,
 -0.743091f, 1.910288f, -12.609131f,
 -0.743091f, 1.910288f, -12.609131f,
 -0.658394f, 1.389118f, -12.110778f,
 -0.540420f, 2.410025f, -11.506880f,
 -0.541388f, 1.791837f, -11.422328f,
 -0.541388f, 1.791837f, -11.422328f,
 -0.739448f, 2.443959f, -12.627520f,
 -0.743091f, 1.910288f, -12.609131f,
 -0.743091f, 1.910288f, -12.609131f,
 -0.595547f, 2.798637f, -11.849412f,
 -0.540420f, 2.410025f, -11.506880f,
 -0.540420f, 2.410025f, -11.506880f,
 -0.595547f, 2.798637f, -11.849412f,
 -0.739448f, 2.443959f, -12.627520f,
 -0.158262f, -0.456803f, -6.413129f,
 -0.232824f, -0.741131f, -5.066671f,
 -0.232824f, -0.741131f, -5.066671f,
 0.282661f, 2.374847f, -4.349901f,
 0.282661f, 2.374847f, -4.349901f,
 0.107005f, 1.899372f, -5.927186f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.630006f, 0.637795f, -0.443069f},
{ -0.630713f, 0.637213f, -0.442902f},
{ -0.630287f, 0.637563f, -0.443002f},
{ -0.630996f, 0.636979f, -0.442834f},
{ -0.015488f, 0.034166f, -0.999296f},
{ -0.122278f, -0.049946f, -0.991238f},
{ -0.125086f, -0.052170f, -0.990773f},
{ -0.206694f, -0.117061f, -0.971378f},
{ -0.695959f, -0.660937f, -0.280718f},
{ -0.981341f, 0.098936f, -0.164870f},
{ -0.728096f, -0.683412f, -0.053141f},
{ -0.931240f, 0.359074f, 0.062115f},
{ -0.440369f, 0.885624f, -0.147459f},
{ -0.395471f, 0.917999f, 0.029664f},
{ 0.081299f, 0.996562f, -0.015947f},
{ 0.055244f, 0.987960f, -0.144507f},
{ -0.066773f, -0.932562f, -0.354781f},
{ -0.088777f, -0.992630f, -0.082490f},
{ -0.991055f, 0.112262f, -0.072163f},
{ -0.796918f, -0.594325f, 0.108167f},
{ -0.169876f, -0.973177f, 0.155143f},
{ 0.177440f, 0.966430f, -0.185818f},
{ -0.381690f, 0.912389f, -0.147845f},
{ -0.558334f, -0.336691f, -0.758223f},
{ -0.684840f, -0.484225f, -0.544537f},
{ -0.156168f, -0.873839f, -0.460454f},
{ -0.056379f, 0.380112f, -0.923221f},
{ -0.212369f, 0.246093f, -0.945694f},
{ 0.354296f, -0.929625f, 0.101351f},
{ 0.547877f, -0.833097f, 0.076026f},
{ 0.579286f, -0.147922f, 0.801590f},
{ 0.587223f, -0.245286f, 0.771365f},
{ -0.100940f, 0.921887f, 0.374080f},
{ 0.297328f, -0.505913f, 0.809721f},
{ -0.517286f, -0.807933f, -0.282241f},
{ -0.112774f, -0.689925f, -0.715043f},
{ 0.041366f, -0.885255f, -0.463264f},
{ -0.751171f, -0.091821f, -0.653691f},
{ -0.590418f, 0.206487f, -0.780237f},
{ -0.212875f, -0.150106f, -0.965480f},
{ -0.505783f, 0.854235f, 0.120279f},
{ -0.522176f, 0.831425f, -0.189907f},
{ 0.002425f, 0.999974f, 0.006860f},
{ -0.143042f, 0.453678f, 0.879611f},
{ 0.121307f, 0.729558f, 0.673074f},
{ -0.359749f, 0.812051f, -0.459515f},
{ -0.012317f, -0.989686f, -0.142720f},
{ -0.001613f, -0.970118f, 0.242630f},
{ -0.965691f, -0.054051f, 0.254008f},
{ -0.810650f, 0.114027f, 0.574321f},
{ 0.049663f, 0.920352f, 0.387926f},
{ 0.183457f, 0.776656f, 0.602618f},
{ -0.145410f, -0.482880f, -0.863529f},
{ -0.878269f, 0.140033f, -0.457203f},
{ -0.086685f, 0.844081f, -0.529162f},
{ -0.122645f, -0.696232f, -0.707261f},
{ -0.929965f, -0.344467f, 0.128479f},
{ -0.159027f, -0.428060f, -0.889649f},
{ -0.991108f, 0.000890f, 0.133055f},
{ 0.159963f, 0.127909f, 0.978801f},
{ 0.165268f, 0.373724f, 0.912698f},
{ -0.149276f, 0.454651f, -0.878071f},
{ -0.763814f, 0.627763f, -0.150004f},
{ 0.060532f, 0.951621f, 0.301253f},
{ 0.987198f, 0.112372f, -0.113191f},
{ 0.945032f, -0.063594f, -0.320734f},
{ 0.583098f, -0.799620f, -0.143547f},
{ 0.573667f, -0.725714f, -0.379797f},
{ 0.518636f, 0.853209f, -0.055243f},
{ 0.523300f, 0.834920f, -0.170488f},
{ 0.550829f, -0.830418f, 0.083626f},
{ 0.942967f, -0.277251f, -0.184243f},
{ 0.680955f, 0.687563f, -0.252106f},
{ 0.305093f, -0.453896f, -0.837196f},
{ 0.437501f, -0.622500f, -0.648912f},
{ 0.155448f, 0.241110f, -0.957968f},
{ -0.127227f, 0.749658f, 0.649482f},
{ -0.504873f, -0.037235f, 0.862390f},
{ -0.157932f, 0.815351f, 0.557011f},
{ -0.476860f, -0.161052f, 0.864099f},
{ 0.105195f, 0.902537f, 0.417567f},
{ -0.483487f, -0.401339f, 0.777925f},
{ -0.374109f, -0.904169f, 0.206206f},
{ 0.118150f, -0.838580f, 0.531812f},
{ -0.526689f, -0.836760f, -0.149774f},
{ 0.316887f, -0.905478f, -0.282297f},
{ 0.191084f, -0.779115f, -0.597048f},
{ -0.091036f, -0.885886f, -0.454883f},
{ 0.691344f, 0.209653f, -0.691440f},
{ 0.555038f, -0.041051f, -0.830812f},
{ 0.384770f, 0.274815f, -0.881152f},
{ 0.402119f, 0.877443f, -0.261521f},
{ 0.638045f, 0.768086f, 0.054251f},
{ 0.205391f, 0.814390f, -0.542756f},
{ 0.993252f, -0.070939f, -0.091754f},
{ 0.964292f, -0.161597f, 0.209827f},
{ 0.682325f, 0.136804f, -0.718134f},
{ 0.977041f, -0.020434f, -0.212070f},
{ 0.917962f, -0.351158f, -0.184484f},
{ 0.680165f, 0.608432f, -0.408884f},
{ 0.620093f, -0.726006f, -0.297321f},
{ -0.122394f, -0.969621f, -0.211790f},
{ -0.850174f, -0.481068f, -0.213959f},
{ -0.905048f, 0.341773f, -0.253140f},
{ -0.352588f, 0.889992f, -0.289131f},
{ 0.135064f, 0.956074f, -0.260154f},
{ 0.632842f, 0.750098f, -0.192002f},
{ 0.970539f, -0.056082f, -0.234325f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath6.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73