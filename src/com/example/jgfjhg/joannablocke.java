package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannablocke {

static String TextureName = "joannablock5.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.217399f, 0.648586f, -1.910236f,
 0.513990f, 0.909486f, -2.380456f,
 1.052583f, 0.725311f, -2.126743f,
 0.750494f, 0.476455f, -1.686967f,
 0.113802f, 0.064536f, -2.027659f,
 0.472875f, 0.061374f, -2.507451f,
 2.157338f, 0.061372f, -1.213330f,
 1.797000f, 0.061363f, -0.746355f,
 -0.033788f, 2.731982f, -0.668211f,
 0.459757f, 3.095556f, -1.148154f,
 1.080907f, 3.336047f, -0.582941f,
 0.673340f, 3.004189f, -0.041192f,
 1.434706f, 1.864544f, -0.463168f,
 1.710452f, 2.076928f, -0.854688f,
 1.235142f, 2.161626f, -1.114998f,
 0.917728f, 1.971464f, -0.685181f,
 0.875967f, 7.440049f, 0.877135f,
 0.665058f, 5.714931f, 0.766871f,
 -0.193440f, 6.503730f, 0.381317f,
 0.227414f, 7.353721f, 0.497574f,
 0.267982f, 7.163976f, 1.951345f,
 0.768521f, 6.417478f, 0.213433f,
 0.756886f, 6.781355f, -0.153233f,
 -0.068834f, 5.021956f, -0.101886f,
 0.558559f, 4.853390f, -0.435138f,
 0.891596f, 4.451441f, -0.136900f,
 0.487590f, 4.179919f, 0.454873f,
 0.228962f, 8.461948f, 2.002487f,
 0.865362f, 8.206438f, 1.660784f,
 0.865530f, 7.348588f, 1.627452f,
 0.737153f, 6.938220f, 1.030238f,
 1.044148f, 7.080074f, 0.880016f,
 0.249228f, 8.487860f, 0.576377f,
 0.875881f, 8.219780f, 0.900913f,
 0.585413f, 7.075792f, 0.583296f,
 1.399438f, 7.200075f, 0.690071f,
 0.620387f, 7.412221f, 0.409890f,
 0.923633f, 7.516388f, 0.067528f,
 1.772913f, 6.544214f, 1.443546f,
 1.823573f, 6.896749f, 1.603216f,
 2.218763f, 6.949698f, 1.491600f,
 2.218434f, 6.619110f, 1.328437f,
 0.579750f, 6.719031f, 1.419917f,
 0.249224f, 6.979996f, 0.532782f,
 1.253819f, 5.955173f, 3.156908f,
 1.382278f, 6.649403f, 3.020076f,
 1.898434f, 6.659604f, 3.045940f,
 2.067557f, 6.062474f, 3.129455f,
 -0.934296f, 2.420413f, -0.985389f,
 1.508397f, 3.338673f, -0.760823f,
 0.600565f, 2.929600f, -1.702904f,
 0.340056f, 2.696531f, 0.499474f,
 -0.244382f, 6.410851f, 2.194835f,
 -0.047228f, 5.674473f, 2.326280f,
 -0.682863f, 6.244956f, 2.168126f,
 -0.432240f, 5.531118f, 2.314739f,
 -0.397431f, 8.206088f, 1.644733f,
 -0.387523f, 8.219118f, 0.885245f,
 -0.108940f, 4.445356f, 0.863297f,
 -0.401920f, 4.852349f, 0.524917f,
 0.008207f, 5.721391f, 1.520063f,
 -0.787077f, 5.835068f, 1.353462f,
 -0.228703f, 6.928824f, 1.013462f,
 0.006683f, 6.807248f, 1.426571f,
 -0.397693f, 7.348323f, 1.610562f,
 -0.387522f, 7.439297f, 0.861057f,
 0.901723f, 6.384342f, 2.378855f,
 1.375466f, 5.724594f, 2.507930f,
 0.681628f, 6.062088f, 2.984959f,
 1.021482f, 5.672272f, 3.030917f,
 -0.004631f, 4.708367f, 2.357927f,
 -0.062157f, 4.432727f, 2.380671f,
 -0.084656f, 4.499997f, 2.740981f,
 -0.030223f, 4.746561f, 2.738088f,
 -1.182915f, 3.575070f, 1.224056f,
 -1.538256f, 2.719883f, 0.448667f,
 -0.307559f, 0.563293f, 1.742365f,
 -0.892710f, 0.531018f, 1.696620f,
 -0.982613f, 0.796819f, 2.252993f,
 -0.399089f, 0.826226f, 2.323658f,
 -0.284263f, 0.060926f, 1.593163f,
 -0.863753f, 0.061375f, 1.504707f,
 -1.227994f, 0.061373f, 3.597429f,
 -0.647323f, 0.061378f, 3.695676f,
 -0.083798f, 2.811625f, 0.462283f,
 -0.848920f, 2.906212f, 0.471438f,
 -0.945034f, 3.617566f, 0.965888f,
 -0.194229f, 3.630313f, 1.041424f,
 -0.511089f, 2.757001f, 2.131541f,
 -1.027599f, 2.743412f, 2.088197f,
 -0.946156f, 2.439533f, 1.596866f,
 -0.407895f, 2.423706f, 1.564311f,
 -4.036543f, 7.924757f, 1.495045f,
 -4.274276f, 7.038050f, 2.161098f,
 3.082312f, 6.577010f, 2.580014f,
 2.828362f, 5.713150f, 3.144070f,
 0.917728f, 1.971464f, -0.685181f,
 0.917728f, 1.971464f, -0.685181f,
 -0.033788f, 2.731982f, -0.668211f,
 0.217399f, 0.648586f, -1.910236f,
 0.113802f, 0.064536f, -2.027659f,
 0.113802f, 0.064536f, -2.027659f,
 0.217399f, 0.648586f, -1.910236f,
 0.113802f, 0.064536f, -2.027659f,
 0.750494f, 0.476455f, -1.686967f,
 0.750494f, 0.476455f, -1.686967f,
 0.113802f, 0.064536f, -2.027659f,
 1.797000f, 0.061363f, -0.746355f,
 0.750494f, 0.476455f, -1.686967f,
 1.797000f, 0.061363f, -0.746355f,
 1.797000f, 0.061363f, -0.746355f,
 1.052583f, 0.725311f, -2.126743f,
 1.052583f, 0.725311f, -2.126743f,
 1.052583f, 0.725311f, -2.126743f,
 1.052583f, 0.725311f, -2.126743f,
 0.513990f, 0.909486f, -2.380456f,
 0.513990f, 0.909486f, -2.380456f,
 0.917728f, 1.971464f, -0.685181f,
 0.917728f, 1.971464f, -0.685181f,
 0.513990f, 0.909486f, -2.380456f,
 0.217399f, 0.648586f, -1.910236f,
 0.737153f, 6.938220f, 1.030238f,
 0.737153f, 6.938220f, 1.030238f,
 0.768521f, 6.417478f, 0.213433f,
 0.768521f, 6.417478f, 0.213433f,
 0.737153f, 6.938220f, 1.030238f,
 0.737153f, 6.938220f, 1.030238f,
 0.585413f, 7.075792f, 0.583296f,
 0.585413f, 7.075792f, 0.583296f,
 0.585413f, 7.075792f, 0.583296f,
 0.737153f, 6.938220f, 1.030238f,
 0.737153f, 6.938220f, 1.030238f,
 0.768521f, 6.417478f, 0.213433f,
 0.756886f, 6.781355f, -0.153233f,
 1.772913f, 6.544214f, 1.443546f,
 1.772913f, 6.544214f, 1.443546f,
 0.756886f, 6.781355f, -0.153233f,
 0.756886f, 6.781355f, -0.153233f,
 0.768521f, 6.417478f, 0.213433f,
 1.253819f, 5.955173f, 3.156908f,
 1.253819f, 5.955173f, 3.156908f,
 1.772913f, 6.544214f, 1.443546f,
 2.067557f, 6.062474f, 3.129455f,
 2.067557f, 6.062474f, 3.129455f,
 1.772913f, 6.544214f, 1.443546f,
 0.756886f, 6.781355f, -0.153233f,
 0.756886f, 6.781355f, -0.153233f,
 0.585413f, 7.075792f, 0.583296f,
 0.585413f, 7.075792f, 0.583296f,
 2.067557f, 6.062474f, 3.129455f,
 -0.934296f, 2.420413f, -0.985389f,
 0.600565f, 2.929600f, -1.702904f,
 0.340056f, 2.696531f, 0.499474f,
 0.340056f, 2.696531f, 0.499474f,
 0.600565f, 2.929600f, -1.702904f,
 1.508397f, 3.338673f, -0.760823f,
 0.228962f, 8.461948f, 2.002487f,
 0.249228f, 8.487860f, 0.576377f,
 0.249228f, 8.487860f, 0.576377f,
 0.665058f, 5.714931f, 0.766871f,
 0.006683f, 6.807248f, 1.426571f,
 0.665058f, 5.714931f, 0.766871f,
 0.579750f, 6.719031f, 1.419917f,
 0.006683f, 6.807248f, 1.426571f,
 0.008207f, 5.721391f, 1.520063f,
 0.008207f, 5.721391f, 1.520063f,
 0.579750f, 6.719031f, 1.419917f,
 0.267982f, 7.163976f, 1.951345f,
 0.006683f, 6.807248f, 1.426571f,
 0.267982f, 7.163976f, 1.951345f,
 0.006683f, 6.807248f, 1.426571f,
 0.249224f, 6.979996f, 0.532782f,
 -0.228703f, 6.928824f, 1.013462f,
 0.227414f, 7.353721f, 0.497574f,
 -0.228703f, 6.928824f, 1.013462f,
 0.227414f, 7.353721f, 0.497574f,
 -0.228703f, 6.928824f, 1.013462f,
 0.006683f, 6.807248f, 1.426571f,
 0.006683f, 6.807248f, 1.426571f,
 0.487590f, 4.179919f, 0.454873f,
 0.665058f, 5.714931f, 0.766871f,
 0.665058f, 5.714931f, 0.766871f,
 0.008207f, 5.721391f, 1.520063f,
 -0.004631f, 4.708367f, 2.357927f,
 -0.787077f, 5.835068f, 1.353462f,
 -0.004631f, 4.708367f, 2.357927f,
 -0.787077f, 5.835068f, 1.353462f,
 -0.787077f, 5.835068f, 1.353462f,
 0.008207f, 5.721391f, 1.520063f,
 0.901723f, 6.384342f, 2.378855f,
 0.901723f, 6.384342f, 2.378855f,
 1.375466f, 5.724594f, 2.507930f,
 -0.004631f, 4.708367f, 2.357927f,
 1.375466f, 5.724594f, 2.507930f,
 -0.004631f, 4.708367f, 2.357927f,
 -0.787077f, 5.835068f, 1.353462f,
 -0.787077f, 5.835068f, 1.353462f,
 -0.228703f, 6.928824f, 1.013462f,
 -0.193440f, 6.503730f, 0.381317f,
 -0.228703f, 6.928824f, 1.013462f,
 0.249224f, 6.979996f, 0.532782f,
 -0.193440f, 6.503730f, 0.381317f,
 1.375466f, 5.724594f, 2.507930f,
 0.227414f, 7.353721f, 0.497574f,
 0.249228f, 8.487860f, 0.576377f,
 0.227414f, 7.353721f, 0.497574f,
 0.228962f, 8.461948f, 2.002487f,
 0.267982f, 7.163976f, 1.951345f,
 0.267982f, 7.163976f, 1.951345f,
 -0.068834f, 5.021956f, -0.101886f,
 -0.193440f, 6.503730f, 0.381317f,
 -0.068834f, 5.021956f, -0.101886f,
 -0.934296f, 2.420413f, -0.985389f,
 -0.068834f, 5.021956f, -0.101886f,
 -0.068834f, 5.021956f, -0.101886f,
 0.340056f, 2.696531f, 0.499474f,
 0.487590f, 4.179919f, 0.454873f,
 0.487590f, 4.179919f, 0.454873f,
 -0.934296f, 2.420413f, -0.985389f,
 0.340056f, 2.696531f, 0.499474f,
 -1.538256f, 2.719883f, 0.448667f,
 0.340056f, 2.696531f, 0.499474f,
 -1.182915f, 3.575070f, 1.224056f,
 -1.538256f, 2.719883f, 0.448667f,
 -0.407895f, 2.423706f, 1.564311f,
 -0.083798f, 2.811625f, 0.462283f,
 -0.407895f, 2.423706f, 1.564311f,
 -0.307559f, 0.563293f, 1.742365f,
 -0.284263f, 0.060926f, 1.593163f,
 -0.284263f, 0.060926f, 1.593163f,
 -0.307559f, 0.563293f, 1.742365f,
 -0.399089f, 0.826226f, 2.323658f,
 -0.284263f, 0.060926f, 1.593163f,
 -0.399089f, 0.826226f, 2.323658f,
 -0.647323f, 0.061378f, 3.695676f,
 -0.284263f, 0.060926f, 1.593163f,
 -0.399089f, 0.826226f, 2.323658f,
 -0.647323f, 0.061378f, 3.695676f,
 -0.647323f, 0.061378f, 3.695676f,
 -0.982613f, 0.796819f, 2.252993f,
 -0.982613f, 0.796819f, 2.252993f,
 -0.982613f, 0.796819f, 2.252993f,
 -0.892710f, 0.531018f, 1.696620f,
 -0.982613f, 0.796819f, 2.252993f,
 -0.407895f, 2.423706f, 1.564311f,
 -0.892710f, 0.531018f, 1.696620f,
 -0.407895f, 2.423706f, 1.564311f,
 -0.307559f, 0.563293f, 1.742365f,
 -0.892710f, 0.531018f, 1.696620f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.493596f, -0.861447f, 0.119468f},
{ 0.085779f, -0.760759f, -0.643341f},
{ 0.208363f, -0.706052f, 0.676813f},
{ 0.793412f, -0.601322f, -0.094388f},
{ 0.187332f, -0.227689f, 0.955544f},
{ 0.439697f, -0.447985f, 0.778444f},
{ 0.891982f, 0.451588f, -0.020904f},
{ 0.996590f, 0.027631f, -0.077750f},
{ -0.624435f, -0.780762f, -0.022174f},
{ -0.832774f, -0.389528f, 0.393391f},
{ 0.019526f, 0.506116f, -0.862245f},
{ 0.045340f, -0.062673f, -0.997004f},
{ -0.939358f, 0.194336f, 0.282560f},
{ -0.291972f, 0.609271f, -0.737253f},
{ 0.788214f, 0.144669f, -0.598156f},
{ -0.206756f, -0.026124f, 0.978044f},
{ 0.011963f, 0.661214f, 0.750102f},
{ -0.698331f, 0.071317f, 0.712213f},
{ 0.326771f, 0.610574f, -0.721401f},
{ 0.660008f, 0.595061f, -0.458575f},
{ -0.017844f, 0.686181f, 0.727212f},
{ 0.743415f, 0.490354f, 0.454848f},
{ 0.014440f, 0.693543f, -0.720270f},
{ 0.789092f, 0.400742f, -0.465554f},
{ 0.962558f, 0.160812f, 0.218223f},
{ 0.156387f, 0.438386f, -0.885077f},
{ 0.973035f, -0.230053f, -0.016698f},
{ 0.012899f, 0.239527f, -0.970804f},
{ -0.483253f, 0.600361f, -0.637207f},
{ 0.982719f, -0.142120f, 0.118598f},
{ 0.868743f, -0.142535f, 0.474310f},
{ 0.518787f, -0.419029f, 0.745167f},
{ 0.014999f, -0.329754f, 0.943948f},
{ 0.817364f, -0.292838f, 0.496146f},
{ -0.435696f, 0.295344f, -0.850259f},
{ -0.083658f, 0.002992f, -0.996490f},
{ 0.897922f, -0.048861f, -0.437434f},
{ 0.639680f, -0.087270f, 0.763671f},
{ -0.549305f, -0.832822f, -0.068345f},
{ 0.642398f, -0.762155f, 0.080271f},
{ -0.816597f, 0.552202f, 0.168053f},
{ 0.629515f, 0.665410f, 0.401174f},
{ -0.359204f, -0.925575f, -0.119515f},
{ 0.731459f, -0.565169f, -0.381512f},
{ 0.768744f, 0.638690f, 0.033294f},
{ -0.528684f, 0.816126f, 0.233307f},
{ -0.743026f, 0.278871f, -0.608394f},
{ 0.946073f, -0.236737f, -0.221138f},
{ 0.002382f, -0.206976f, -0.978343f},
{ -0.660409f, 0.343109f, -0.667935f},
{ -0.660889f, -0.290697f, -0.691897f},
{ 0.449339f, -0.706107f, 0.547273f},
{ 0.517576f, 0.578088f, 0.630817f},
{ -0.866988f, 0.358181f, 0.346465f},
{ 0.847674f, 0.236749f, 0.474762f},
{ -0.851290f, -0.164511f, 0.498238f},
{ -0.752900f, 0.478901f, 0.451438f},
{ -0.779049f, 0.409100f, -0.475101f},
{ 0.223848f, -0.102001f, 0.969272f},
{ 0.758986f, -0.499805f, 0.417296f},
{ -0.963482f, 0.266388f, -0.027194f},
{ -0.975430f, -0.150600f, -0.160799f},
{ -0.906788f, 0.362718f, -0.214876f},
{ 0.182738f, -0.249601f, 0.950950f},
{ -0.850728f, -0.263393f, 0.454847f},
{ -0.861280f, -0.171745f, -0.478226f},
{ -0.210993f, 0.536175f, -0.817312f},
{ -0.645841f, 0.592207f, 0.481850f},
{ 0.702245f, -0.311823f, -0.640015f},
{ 0.488598f, -0.417900f, 0.765919f},
{ 0.371594f, -0.025306f, -0.928050f},
{ -0.182195f, -0.982451f, -0.039942f},
{ 0.075899f, -0.913902f, 0.398776f},
{ -0.565003f, 0.408588f, 0.716817f},
{ -0.491630f, 0.000784f, 0.870804f},
{ -0.953541f, -0.301225f, -0.004909f},
{ 0.625829f, -0.774935f, -0.088392f},
{ 0.535677f, -0.550456f, 0.640350f},
{ -0.535196f, -0.794449f, -0.287082f},
{ -0.706466f, -0.560549f, 0.432078f},
{ 0.652787f, 0.477702f, 0.587937f},
{ -0.752971f, 0.542479f, 0.372494f},
{ 0.538745f, 0.339944f, 0.770838f},
{ -0.714685f, 0.297332f, 0.633103f},
{ 0.731977f, -0.680892f, -0.024409f},
{ 0.911574f, -0.290720f, -0.290715f},
{ -0.836442f, -0.232608f, -0.496245f},
{ -0.718392f, -0.625382f, -0.304649f},
{ 0.749235f, 0.025293f, -0.661821f},
{ -0.564946f, -0.007560f, -0.825093f},
{ -0.926201f, 0.252711f, 0.279801f},
{ 0.807351f, 0.247618f, 0.535603f},
{ -0.007751f, 0.601899f, 0.798535f},
{ -0.008212f, 0.597515f, 0.801816f},
{ -0.012583f, 0.554992f, 0.831761f},
{ -0.013145f, 0.549383f, 0.835467f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannablock5.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117