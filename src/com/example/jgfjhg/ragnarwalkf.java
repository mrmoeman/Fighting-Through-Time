package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarwalkf {

static String TextureName = "RagWalk6.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -2.029945f, 10.249112f, 4.171533f,
 -0.509712f, 11.047059f, 5.261836f,
 -1.817908f, 14.939717f, 6.342486f,
 -3.421292f, 12.837756f, 4.032823f,
 1.563127f, 10.232972f, 4.055304f,
 0.115088f, 11.045247f, 5.241340f,
 1.496684f, 14.930941f, 6.234283f,
 2.944965f, 12.801754f, 3.839705f,
 -1.729334f, 11.228203f, 5.119586f,
 -1.716995f, 9.958506f, 5.493675f,
 -1.412223f, 7.899773f, 4.631219f,
 0.008367f, 6.211410f, 3.969669f,
 -0.172099f, 9.718667f, 5.979033f,
 -0.191546f, 12.025051f, 5.415876f,
 -2.249722f, 10.160744f, 3.651811f,
 -2.101757f, 11.540195f, 3.008990f,
 -0.210788f, 12.336196f, 3.075309f,
 -0.101008f, 6.067029f, 0.570312f,
 -1.594838f, 7.597564f, 2.264643f,
 -2.276439f, 4.813274f, 1.302114f,
 -2.304115f, 4.965171f, -1.411707f,
 -3.275261f, 9.731377f, 4.031071f,
 -5.011010f, 9.763824f, -0.331225f,
 -0.390176f, 10.064542f, 5.077317f,
 -0.221717f, 11.426767f, -0.838953f,
 -0.188557f, 3.788895f, -1.971039f,
 -0.068515f, 3.742661f, 2.514445f,
 -5.284285f, 11.018726f, 2.528058f,
 -0.158132f, 13.197955f, 2.860035f,
 -1.685887f, 6.227585f, 1.285062f,
 0.005536f, 6.024216f, 1.457118f,
 -0.388408f, 7.426586f, -1.224404f,
 -1.923221f, 7.107113f, -0.543925f,
 -2.256669f, 6.768713f, 0.577574f,
 -2.918120f, 4.149911f, 0.040283f,
 -0.055618f, 2.827074f, 0.108493f,
 -5.081255f, 9.115962f, 2.089225f,
 -3.726677f, 7.458452f, 1.596967f,
 -5.059283f, 6.668096f, 0.606699f,
 -6.314993f, 7.850637f, 0.736296f,
 -4.710737f, 5.947885f, 3.923144f,
 -3.815796f, 5.102499f, 3.384657f,
 -4.684392f, 4.580136f, 2.739249f,
 -5.587704f, 5.420457f, 3.278945f,
 -3.321339f, 11.087392f, 0.819293f,
 -3.379508f, 10.993508f, 3.134160f,
 -3.101002f, 9.502994f, 0.657673f,
 -3.242199f, 8.897049f, 2.400877f,
 -1.108663f, 2.846209f, 0.903876f,
 -1.114796f, 2.892275f, 2.783532f,
 -2.224776f, 2.867733f, 1.234543f,
 -2.229187f, 2.931718f, 2.652418f,
 -1.029888f, 1.255189f, -0.855548f,
 -0.889386f, -0.360199f, 3.107055f,
 -2.383936f, 1.194362f, -0.705386f,
 -2.384402f, -0.339174f, 3.056541f,
 -0.615142f, 4.864582f, -0.723721f,
 -1.611693f, 4.938734f, -0.528453f,
 -1.636253f, 4.995659f, 0.471563f,
 -0.499440f, 4.686752f, 0.442567f,
 -2.165546f, 1.715942f, 1.347488f,
 -2.197265f, 1.791457f, 0.031580f,
 -1.104492f, 1.880127f, -0.189933f,
 -1.073118f, 1.721388f, 1.421535f,
 1.324101f, 11.220528f, 5.018674f,
 1.336780f, 9.956099f, 5.389729f,
 0.973823f, 7.899883f, 4.549242f,
 1.539907f, 9.950913f, 3.759951f,
 1.581793f, 11.336090f, 3.114057f,
 1.122382f, 7.591017f, 2.152300f,
 2.127191f, 4.609201f, 0.870185f,
 1.824632f, 5.477085f, -1.838318f,
 3.323101f, 8.830016f, 3.946259f,
 4.272433f, 10.153677f, -0.499323f,
 4.880795f, 10.966678f, 2.389408f,
 1.577409f, 6.417372f, 0.904893f,
 1.295919f, 7.308797f, -0.902740f,
 1.904319f, 7.011245f, 0.091477f,
 2.666957f, 4.329228f, -0.644436f,
 5.169252f, 9.496909f, 1.298352f,
 4.559094f, 7.640734f, 0.292620f,
 5.254302f, 8.266369f, -1.297070f,
 5.798659f, 9.841481f, -0.839869f,
 7.199517f, 6.447703f, 0.827166f,
 6.562634f, 5.463397f, 0.166210f,
 7.021607f, 5.868140f, -0.877832f,
 7.661803f, 6.849479f, -0.213976f,
 2.866181f, 10.745029f, 0.995941f,
 2.807002f, 10.627197f, 3.307271f,
 2.482257f, 9.193862f, 0.817019f,
 2.464666f, 8.576759f, 2.560833f,
 1.007667f, 2.383909f, -0.521103f,
 1.040814f, 2.300097f, 1.457369f,
 2.122246f, 2.422665f, -0.187335f,
 2.148775f, 2.374389f, 1.315754f,
 1.030588f, -0.005132f, -1.788170f,
 0.889387f, -0.006623f, 2.494529f,
 2.384640f, -0.005085f, -1.626834f,
 2.384432f, -0.006647f, 2.439773f,
 0.229292f, 4.929402f, -0.845412f,
 1.267534f, 5.139351f, -0.856459f,
 1.449174f, 4.994091f, 0.217920f,
 0.351611f, 4.658880f, 0.307470f,
 2.167580f, 1.166004f, 0.086229f,
 2.197264f, 0.823425f, -1.166851f,
 1.104397f, 0.823931f, -1.405267f,
 1.076315f, 1.140444f, 0.182277f,
 8.161195f, 9.723735f, -4.883900f,
 10.580924f, 6.121176f, -5.442445f,
 4.588113f, 6.287237f, 3.569882f,
 7.112219f, 2.647313f, 3.047666f,
 -2.927175f, 10.051623f, 3.902035f,
 -2.563786f, 5.093984f, 7.265303f,
 -7.222631f, 2.374709f, 3.665055f,
 -7.632165f, 7.326780f, 0.331390f,
 -5.284285f, 11.018726f, 2.528058f,
 -0.158132f, 13.197955f, 2.860035f,
 -0.158132f, 13.197955f, 2.860035f,
 -2.256669f, 6.768713f, 0.577574f,
 -2.256669f, 6.768713f, 0.577574f,
 -5.284285f, 11.018726f, 2.528058f,
 -2.918120f, 4.149911f, 0.040283f,
 -2.256669f, 6.768713f, 0.577574f,
 -2.256669f, 6.768713f, 0.577574f,
 -2.918120f, 4.149911f, 0.040283f,
 -0.055618f, 2.827074f, 0.108493f,
 -4.684392f, 4.580136f, 2.739249f,
 -5.587704f, 5.420457f, 3.278945f,
 -5.587704f, 5.420457f, 3.278945f,
 -4.684392f, 4.580136f, 2.739249f,
 -4.684392f, 4.580136f, 2.739249f,
 -5.059283f, 6.668096f, 0.606699f,
 -5.587704f, 5.420457f, 3.278945f,
 -5.587704f, 5.420457f, 3.278945f,
 -5.059283f, 6.668096f, 0.606699f,
 -3.101002f, 9.502994f, 0.657673f,
 -3.101002f, 9.502994f, 0.657673f,
 -1.108663f, 2.846209f, 0.903876f,
 -1.108663f, 2.846209f, 0.903876f,
 -1.104492f, 1.880127f, -0.189933f,
 -0.615142f, 4.864582f, -0.723721f,
 -1.108663f, 2.846209f, 0.903876f,
 -1.108663f, 2.846209f, 0.903876f,
 -2.197265f, 1.791457f, 0.031580f,
 -2.165546f, 1.715942f, 1.347488f,
 -2.165546f, 1.715942f, 1.347488f,
 -1.029888f, 1.255189f, -0.855548f,
 -1.104492f, 1.880127f, -0.189933f,
 -1.104492f, 1.880127f, -0.189933f,
 -2.197265f, 1.791457f, 0.031580f,
 -0.889386f, -0.360199f, 3.107055f,
 -1.029888f, 1.255189f, -0.855548f,
 -1.073118f, 1.721388f, 1.421535f,
 -1.073118f, 1.721388f, 1.421535f,
 -1.029888f, 1.255189f, -0.855548f,
 -1.104492f, 1.880127f, -0.189933f,
 -2.165546f, 1.715942f, 1.347488f,
 -1.073118f, 1.721388f, 1.421535f,
 -1.073118f, 1.721388f, 1.421535f,
 -0.889386f, -0.360199f, 3.107055f,
 0.008367f, 6.211410f, 3.969669f,
 -0.172099f, 9.718667f, 5.979033f,
 -0.172099f, 9.718667f, 5.979033f,
 -0.172099f, 9.718667f, 5.979033f,
 -0.172099f, 9.718667f, 5.979033f,
 -0.191546f, 12.025051f, 5.415876f,
 -0.210788f, 12.336196f, 3.075309f,
 -0.210788f, 12.336196f, 3.075309f,
 -0.191546f, 12.025051f, 5.415876f,
 0.008367f, 6.211410f, 3.969669f,
 0.008367f, 6.211410f, 3.969669f,
 -0.101008f, 6.067029f, 0.570312f,
 -0.158132f, 13.197955f, 2.860035f,
 -0.221717f, 11.426767f, -0.838953f,
 -0.221717f, 11.426767f, -0.838953f,
 4.880795f, 10.966678f, 2.389408f,
 -0.158132f, 13.197955f, 2.860035f,
 -0.158132f, 13.197955f, 2.860035f,
 -0.390176f, 10.064542f, 5.077317f,
 -0.388408f, 7.426586f, -1.224404f,
 -0.221717f, 11.426767f, -0.838953f,
 -0.221717f, 11.426767f, -0.838953f,
 0.005536f, 6.024216f, 1.457118f,
 0.005536f, 6.024216f, 1.457118f,
 -0.068515f, 3.742661f, 2.514445f,
 4.880795f, 10.966678f, 2.389408f,
 1.904319f, 7.011245f, 0.091477f,
 1.904319f, 7.011245f, 0.091477f,
 -0.388408f, 7.426586f, -1.224404f,
 -0.388408f, 7.426586f, -1.224404f,
 -0.188557f, 3.788895f, -1.971039f,
 -0.390176f, 10.064542f, 5.077317f,
 0.005536f, 6.024216f, 1.457118f,
 0.005536f, 6.024216f, 1.457118f,
 2.666957f, 4.329228f, -0.644436f,
 1.904319f, 7.011245f, 0.091477f,
 1.904319f, 7.011245f, 0.091477f,
 -0.068515f, 3.742661f, 2.514445f,
 -0.055618f, 2.827074f, 0.108493f,
 -0.055618f, 2.827074f, 0.108493f,
 2.666957f, 4.329228f, -0.644436f,
 -0.055618f, 2.827074f, 0.108493f,
 -0.188557f, 3.788895f, -1.971039f,
 -0.188557f, 3.788895f, -1.971039f,
 7.661803f, 6.849479f, -0.213976f,
 7.661803f, 6.849479f, -0.213976f,
 7.021607f, 5.868140f, -0.877832f,
 7.021607f, 5.868140f, -0.877832f,
 7.021607f, 5.868140f, -0.877832f,
 5.254302f, 8.266369f, -1.297070f,
 7.661803f, 6.849479f, -0.213976f,
 7.661803f, 6.849479f, -0.213976f,
 2.482257f, 9.193862f, 0.817019f,
 2.482257f, 9.193862f, 0.817019f,
 5.254302f, 8.266369f, -1.297070f,
 1.104397f, 0.823931f, -1.405267f,
 1.007667f, 2.383909f, -0.521103f,
 1.007667f, 2.383909f, -0.521103f,
 1.007667f, 2.383909f, -0.521103f,
 1.007667f, 2.383909f, -0.521103f,
 0.229292f, 4.929402f, -0.845412f,
 2.167580f, 1.166004f, 0.086229f,
 2.167580f, 1.166004f, 0.086229f,
 2.197264f, 0.823425f, -1.166851f,
 2.197264f, 0.823425f, -1.166851f,
 1.104397f, 0.823931f, -1.405267f,
 1.104397f, 0.823931f, -1.405267f,
 1.030588f, -0.005132f, -1.788170f,
 1.104397f, 0.823931f, -1.405267f,
 1.030588f, -0.005132f, -1.788170f,
 1.076315f, 1.140444f, 0.182277f,
 1.076315f, 1.140444f, 0.182277f,
 1.030588f, -0.005132f, -1.788170f,
 0.889387f, -0.006623f, 2.494529f,
 2.167580f, 1.166004f, 0.086229f,
 1.076315f, 1.140444f, 0.182277f,
 1.076315f, 1.140444f, 0.182277f,
 0.889387f, -0.006623f, 2.494529f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.490440f, -0.218395f, 0.843666f},
{ -0.533398f, -0.333869f, 0.777186f},
{ -0.541721f, -0.359255f, 0.759917f},
{ -0.551217f, -0.390012f, 0.737598f},
{ 0.540078f, -0.222400f, 0.811698f},
{ 0.583916f, -0.360190f, 0.727534f},
{ 0.577111f, -0.335707f, 0.744475f},
{ 0.591725f, -0.390597f, 0.705192f},
{ 0.014156f, -0.929085f, 0.369595f},
{ 0.025320f, -0.189225f, 0.981607f},
{ -0.678370f, -0.518446f, 0.520604f},
{ -0.716219f, -0.149660f, 0.681639f},
{ -0.634063f, 0.568896f, 0.523758f},
{ 0.016579f, 0.788438f, 0.614891f},
{ -0.973473f, -0.118207f, 0.195901f},
{ -0.623830f, 0.749694f, 0.220898f},
{ 0.004903f, 0.987098f, 0.160041f},
{ -0.789925f, -0.606112f, 0.092987f},
{ -0.035672f, -0.998414f, 0.043553f},
{ 0.038477f, 0.996123f, 0.079107f},
{ -0.018416f, 0.672687f, -0.739698f},
{ -0.845721f, 0.513258f, 0.146021f},
{ -0.735015f, 0.166049f, -0.657405f},
{ -0.493251f, -0.205204f, 0.845337f},
{ 0.000777f, -0.086340f, 0.996266f},
{ -0.135688f, 0.183034f, -0.973698f},
{ -0.409881f, -0.026979f, -0.911740f},
{ -0.873128f, -0.476192f, 0.104346f},
{ 0.025235f, -0.473644f, 0.880355f},
{ 0.040897f, -0.444353f, 0.894918f},
{ -0.626295f, -0.284309f, 0.725894f},
{ -0.404333f, -0.493106f, 0.770300f},
{ -0.580717f, -0.000569f, -0.814105f},
{ -0.826101f, -0.563333f, -0.014595f},
{ -0.062563f, -0.485195f, -0.872165f},
{ 0.006692f, -0.999866f, -0.014969f},
{ 0.113529f, 0.339921f, 0.933576f},
{ -0.923258f, -0.219085f, 0.315591f},
{ 0.936926f, -0.283566f, 0.204354f},
{ 0.081914f, -0.871387f, -0.483709f},
{ -0.006234f, -0.500460f, -0.865737f},
{ -0.927264f, 0.171072f, -0.333041f},
{ -0.648911f, 0.521652f, 0.553890f},
{ -0.661005f, 0.611611f, -0.434747f},
{ -0.780941f, 0.498013f, 0.376981f},
{ 0.979290f, -0.199301f, 0.035650f},
{ 0.201517f, -0.043564f, -0.978516f},
{ 0.212814f, -0.482051f, 0.849904f},
{ -0.930191f, 0.098000f, -0.353753f},
{ -0.549904f, -0.430039f, -0.716011f},
{ 0.806658f, -0.261996f, -0.529774f},
{ 0.233946f, -0.644327f, -0.728088f},
{ -0.565414f, 0.704159f, 0.429497f},
{ -0.584121f, 0.272687f, 0.764490f},
{ 0.520275f, 0.166821f, 0.837547f},
{ 0.913349f, 0.219722f, 0.342805f},
{ 0.919694f, 0.135694f, 0.368442f},
{ 0.568187f, 0.640350f, -0.516832f},
{ -0.639390f, 0.626915f, -0.445149f},
{ -0.905061f, 0.146429f, 0.399278f},
{ -0.000264f, -0.926014f, -0.377488f},
{ -0.000267f, -0.926015f, -0.377487f},
{ -0.000265f, -0.926015f, -0.377488f},
{ -0.000268f, -0.926015f, -0.377487f},
{ -0.885623f, 0.425292f, -0.186544f},
{ -0.403845f, 0.601895f, 0.688936f},
{ 0.873548f, 0.390636f, -0.290374f},
{ 0.405971f, 0.596479f, 0.692387f},
{ 0.753362f, -0.441980f, 0.486928f},
{ 0.748193f, -0.142267f, 0.648048f},
{ 0.684633f, 0.552398f, 0.475535f},
{ 0.723948f, 0.675717f, 0.138948f},
{ 0.983881f, -0.137386f, 0.114474f},
{ 0.857479f, -0.511999f, 0.050860f},
{ 0.832041f, 0.510531f, 0.216947f},
{ 0.689354f, 0.258851f, -0.676600f},
{ 0.518112f, -0.301456f, 0.800427f},
{ 0.297098f, 0.076092f, -0.951810f},
{ 0.902280f, -0.403493f, -0.151933f},
{ 0.654304f, -0.560042f, 0.508173f},
{ 0.746249f, -0.303297f, 0.592557f},
{ 0.850175f, -0.475104f, -0.226888f},
{ 0.411061f, 0.104151f, -0.905639f},
{ 0.332390f, -0.142590f, 0.932301f},
{ -0.448686f, -0.861522f, 0.237615f},
{ 0.931522f, 0.332012f, -0.148442f},
{ -0.006170f, -0.499130f, -0.866505f},
{ 0.455188f, 0.783687f, -0.422655f},
{ -0.286041f, -0.085902f, -0.954359f},
{ 0.691671f, 0.226969f, 0.685621f},
{ 0.631776f, 0.326596f, 0.702990f},
{ 0.136264f, 0.910480f, -0.390459f},
{ -0.494693f, -0.826474f, 0.268737f},
{ -0.657528f, -0.272895f, -0.702272f},
{ 0.277824f, -0.696077f, 0.662036f},
{ -0.614933f, -0.281870f, -0.736482f},
{ 0.576344f, 0.046390f, -0.815890f},
{ -0.747195f, -0.103228f, -0.656539f},
{ 0.863381f, 0.205610f, -0.460758f},
{ 0.773067f, 0.454784f, 0.442197f},
{ 0.728235f, 0.093782f, 0.678881f},
{ -0.862420f, -0.017296f, 0.505898f},
{ -0.652666f, -0.146945f, 0.743259f},
{ -0.576253f, 0.405989f, -0.709299f},
{ -0.948839f, 0.198766f, 0.245350f},
{ 0.621771f, 0.456338f, -0.636518f},
{ 0.934805f, 0.253832f, 0.248412f},
{ -0.000030f, -1.000000f, -0.000384f},
{ -0.000009f, -1.000000f, -0.000376f},
{ 0.000053f, -1.000000f, -0.000354f},
{ 0.000076f, -1.000000f, -0.000346f},
{ 0.369201f, 0.844722f, 0.387474f},
{ 0.869113f, 0.342837f, -0.356519f},
{ -0.839771f, 0.283335f, -0.463148f},
{ -0.350265f, 0.850042f, 0.393374f},
{ -0.758058f, -0.433638f, -0.487141f},
{ -0.748615f, -0.442462f, -0.493765f},
{ -0.754568f, -0.436927f, -0.489614f},
{ -0.745207f, -0.445588f, -0.496103f},
{ -0.688184f, 0.372100f, 0.622852f},
{ -0.690748f, 0.366951f, 0.623068f},
{ -0.690499f, 0.367454f, 0.623048f},
{ -0.693066f, 0.362245f, 0.623247f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagWalk6.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105