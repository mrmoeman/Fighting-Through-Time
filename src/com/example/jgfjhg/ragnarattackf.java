package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarattackf {

static String TextureName = "RagAttack6.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -2.417180f, 9.023300f, 3.692636f,
 -1.797715f, 9.477997f, 5.566907f,
 -3.961317f, 12.966505f, 6.646027f,
 -3.810426f, 11.622804f, 3.425210f,
 0.682013f, 9.008764f, 5.491776f,
 -1.257780f, 9.477535f, 5.880840f,
 -1.096867f, 12.959159f, 8.308120f,
 1.667373f, 11.539795f, 6.605161f,
 -2.776957f, 9.710703f, 4.845869f,
 -2.794751f, 8.374788f, 4.862607f,
 -1.815800f, 6.616409f, 3.847970f,
 -0.264375f, 5.055799f, 4.289181f,
 -1.703990f, 7.996287f, 6.022771f,
 -1.738386f, 10.373370f, 6.086343f,
 -2.520511f, 9.789049f, 3.170753f,
 -1.715230f, 11.028252f, 2.780972f,
 -0.078038f, 11.412500f, 3.957458f,
 -0.504086f, 4.925866f, 1.710412f,
 -1.668689f, 6.880932f, 2.793918f,
 -2.909503f, 3.986254f, 2.534761f,
 -2.905926f, 4.072966f, -0.146991f,
 -3.783278f, 9.631416f, 2.802287f,
 -2.490397f, 9.710523f, -1.751317f,
 -1.885212f, 9.442787f, 5.404018f,
 1.710385f, 10.122540f, 0.683938f,
 -0.935997f, 2.565988f, -0.458682f,
 1.138894f, 2.427605f, 2.678720f,
 -3.991958f, 11.352850f, 0.464260f,
 0.287493f, 12.215596f, 3.843247f,
 -2.010990f, 5.402167f, 2.455616f,
 -0.384353f, 4.883336f, 2.595613f,
 -0.580717f, 6.269618f, -0.102453f,
 -2.136548f, 6.256770f, 0.620357f,
 -2.486057f, 6.027155f, 1.745836f,
 -3.507858f, 3.292674f, 1.345844f,
 0.128503f, 1.785428f, 0.826863f,
 -4.128476f, 9.591543f, -0.010908f,
 -3.491236f, 7.507267f, 0.240841f,
 -4.150403f, 7.108943f, -1.428397f,
 -4.675412f, 8.670064f, -1.957090f,
 -6.139558f, 6.822900f, 1.328902f,
 -5.498243f, 5.640963f, 1.354252f,
 -5.932377f, 5.375151f, 0.264488f,
 -6.579801f, 6.555532f, 0.235480f,
 -1.533308f, 10.607655f, 0.274952f,
 -2.920459f, 10.772098f, 2.130976f,
 -1.637891f, 9.004295f, 0.216564f,
 -2.885697f, 8.632267f, 1.533629f,
 -1.301354f, 2.210895f, 2.118906f,
 -1.207042f, 2.488208f, 4.024188f,
 -2.393018f, 2.082138f, 2.565666f,
 -2.317149f, 2.305226f, 3.990546f,
 -1.029150f, -0.004327f, 0.872226f,
 -0.889356f, -0.006617f, 5.156851f,
 -2.382654f, -0.008007f, 1.036861f,
 -2.384208f, -0.006510f, 5.102087f,
 -1.262137f, 3.834699f, 0.466243f,
 -2.244095f, 4.091920f, 0.673940f,
 -2.320491f, 4.172135f, 1.667276f,
 -1.116429f, 3.671218f, 1.625257f,
 -2.136233f, 1.096725f, 2.795825f,
 -2.197245f, 0.822216f, 1.495968f,
 -1.105096f, 0.824506f, 1.255331f,
 -1.050266f, 1.224175f, 2.809626f,
 -0.140579f, 9.702538f, 6.378851f,
 -0.156106f, 8.373672f, 6.399792f,
 0.246848f, 6.615312f, 5.048338f,
 0.353837f, 8.801711f, 5.446714f,
 1.079498f, 10.069634f, 4.991732f,
 0.681552f, 6.335686f, 3.458427f,
 2.086484f, 3.293932f, 1.114109f,
 0.441197f, 4.196918f, -0.326113f,
 0.687208f, 8.580808f, 6.204422f,
 4.357579f, 6.933601f, 4.236179f,
 3.416136f, 8.763245f, 6.544781f,
 1.218093f, 4.954215f, 2.000556f,
 1.021979f, 5.834554f, 0.225929f,
 1.629638f, 5.457065f, 1.164087f,
 1.600629f, 3.486107f, -0.295965f,
 1.703269f, 6.138938f, 6.893585f,
 1.162046f, 4.393248f, 5.611585f,
 2.854590f, 4.460835f, 4.853862f,
 3.576942f, 5.743907f, 5.699236f,
 2.307001f, 2.464090f, 7.559030f,
 1.895619f, 1.655844f, 6.565275f,
 2.995447f, 1.710410f, 6.064641f,
 3.407975f, 2.514271f, 7.063247f,
 3.159877f, 8.995211f, 3.991294f,
 1.771892f, 9.197986f, 5.804294f,
 2.596828f, 7.549507f, 3.569841f,
 1.439935f, 7.152724f, 4.954362f,
 1.188932f, 1.539100f, -1.114933f,
 3.042598f, 1.134662f, -0.404924f,
 1.912380f, 2.261459f, -1.560448f,
 3.290962f, 2.021642f, -1.037852f,
 0.507783f, -0.003946f, -3.174368f,
 2.527921f, -0.006619f, 0.604031f,
 1.753245f, 0.008115f, -3.714542f,
 3.795461f, -0.006509f, -0.191262f,
 -0.393144f, 3.633689f, 0.387192f,
 0.564920f, 3.682348f, 0.382654f,
 1.135426f, 3.434701f, 1.207799f,
 0.027082f, 3.185054f, 1.490000f,
 2.410407f, 1.308059f, -2.264887f,
 1.826715f, 0.826819f, -3.219687f,
 0.763269f, 0.821101f, -2.875068f,
 1.831684f, 0.858589f, -1.628968f,
 7.609703f, 4.252462f, 3.964893f,
 8.329913f, -0.022638f, 4.734998f,
 -1.261352f, 3.636892f, 8.082672f,
 -0.464583f, -0.666017f, 8.922695f,
 -3.312904f, 9.956230f, 2.819576f,
 -6.909416f, 5.754983f, 5.182628f,
 -9.127111f, 4.390257f, -0.767050f,
 -5.567183f, 8.602354f, -3.125977f,
 -3.991958f, 11.352850f, 0.464260f,
 0.287493f, 12.215596f, 3.843247f,
 0.287493f, 12.215596f, 3.843247f,
 -2.486057f, 6.027155f, 1.745836f,
 -2.486057f, 6.027155f, 1.745836f,
 -3.991958f, 11.352850f, 0.464260f,
 -3.507858f, 3.292674f, 1.345844f,
 -2.486057f, 6.027155f, 1.745836f,
 -2.486057f, 6.027155f, 1.745836f,
 -3.507858f, 3.292674f, 1.345844f,
 0.128503f, 1.785428f, 0.826863f,
 -5.932377f, 5.375151f, 0.264488f,
 -6.579801f, 6.555532f, 0.235480f,
 -6.579801f, 6.555532f, 0.235480f,
 -5.932377f, 5.375151f, 0.264488f,
 -5.932377f, 5.375151f, 0.264488f,
 -4.150403f, 7.108943f, -1.428397f,
 -6.579801f, 6.555532f, 0.235480f,
 -6.579801f, 6.555532f, 0.235480f,
 -4.150403f, 7.108943f, -1.428397f,
 -1.637891f, 9.004295f, 0.216564f,
 -1.637891f, 9.004295f, 0.216564f,
 -1.301354f, 2.210895f, 2.118906f,
 -1.301354f, 2.210895f, 2.118906f,
 -1.105096f, 0.824506f, 1.255331f,
 -1.262137f, 3.834699f, 0.466243f,
 -1.301354f, 2.210895f, 2.118906f,
 -1.301354f, 2.210895f, 2.118906f,
 -2.197245f, 0.822216f, 1.495968f,
 -2.136233f, 1.096725f, 2.795825f,
 -2.136233f, 1.096725f, 2.795825f,
 -1.029150f, -0.004327f, 0.872226f,
 -1.105096f, 0.824506f, 1.255331f,
 -1.105096f, 0.824506f, 1.255331f,
 -2.197245f, 0.822216f, 1.495968f,
 -0.889356f, -0.006617f, 5.156851f,
 -1.029150f, -0.004327f, 0.872226f,
 -1.050266f, 1.224175f, 2.809626f,
 -1.050266f, 1.224175f, 2.809626f,
 -1.029150f, -0.004327f, 0.872226f,
 -1.105096f, 0.824506f, 1.255331f,
 -2.136233f, 1.096725f, 2.795825f,
 -1.050266f, 1.224175f, 2.809626f,
 -1.050266f, 1.224175f, 2.809626f,
 -0.889356f, -0.006617f, 5.156851f,
 -0.264375f, 5.055799f, 4.289181f,
 -1.703990f, 7.996287f, 6.022771f,
 -1.703990f, 7.996287f, 6.022771f,
 -1.703990f, 7.996287f, 6.022771f,
 -1.703990f, 7.996287f, 6.022771f,
 -1.738386f, 10.373370f, 6.086343f,
 -0.078038f, 11.412500f, 3.957458f,
 -0.078038f, 11.412500f, 3.957458f,
 -1.738386f, 10.373370f, 6.086343f,
 -0.264375f, 5.055799f, 4.289181f,
 -0.264375f, 5.055799f, 4.289181f,
 -0.504086f, 4.925866f, 1.710412f,
 0.287493f, 12.215596f, 3.843247f,
 1.710385f, 10.122540f, 0.683938f,
 1.710385f, 10.122540f, 0.683938f,
 3.416136f, 8.763245f, 6.544781f,
 0.287493f, 12.215596f, 3.843247f,
 0.287493f, 12.215596f, 3.843247f,
 -1.885212f, 9.442787f, 5.404018f,
 -0.580717f, 6.269618f, -0.102453f,
 1.710385f, 10.122540f, 0.683938f,
 1.710385f, 10.122540f, 0.683938f,
 -0.384353f, 4.883336f, 2.595613f,
 -0.384353f, 4.883336f, 2.595613f,
 1.138894f, 2.427605f, 2.678720f,
 3.416136f, 8.763245f, 6.544781f,
 1.629638f, 5.457065f, 1.164087f,
 1.629638f, 5.457065f, 1.164087f,
 -0.580717f, 6.269618f, -0.102453f,
 -0.580717f, 6.269618f, -0.102453f,
 -0.935997f, 2.565988f, -0.458682f,
 -1.885212f, 9.442787f, 5.404018f,
 -0.384353f, 4.883336f, 2.595613f,
 -0.384353f, 4.883336f, 2.595613f,
 1.600629f, 3.486107f, -0.295965f,
 1.629638f, 5.457065f, 1.164087f,
 1.629638f, 5.457065f, 1.164087f,
 1.138894f, 2.427605f, 2.678720f,
 0.128503f, 1.785428f, 0.826863f,
 0.128503f, 1.785428f, 0.826863f,
 1.600629f, 3.486107f, -0.295965f,
 0.128503f, 1.785428f, 0.826863f,
 -0.935997f, 2.565988f, -0.458682f,
 -0.935997f, 2.565988f, -0.458682f,
 3.407975f, 2.514271f, 7.063247f,
 3.407975f, 2.514271f, 7.063247f,
 2.995447f, 1.710410f, 6.064641f,
 2.995447f, 1.710410f, 6.064641f,
 2.995447f, 1.710410f, 6.064641f,
 2.854590f, 4.460835f, 4.853862f,
 3.407975f, 2.514271f, 7.063247f,
 3.407975f, 2.514271f, 7.063247f,
 2.596828f, 7.549507f, 3.569841f,
 2.596828f, 7.549507f, 3.569841f,
 2.854590f, 4.460835f, 4.853862f,
 0.763269f, 0.821101f, -2.875068f,
 1.188932f, 1.539100f, -1.114933f,
 1.188932f, 1.539100f, -1.114933f,
 1.188932f, 1.539100f, -1.114933f,
 1.188932f, 1.539100f, -1.114933f,
 -0.393144f, 3.633689f, 0.387192f,
 2.410407f, 1.308059f, -2.264887f,
 2.410407f, 1.308059f, -2.264887f,
 1.826715f, 0.826819f, -3.219687f,
 1.826715f, 0.826819f, -3.219687f,
 0.763269f, 0.821101f, -2.875068f,
 0.763269f, 0.821101f, -2.875068f,
 0.507783f, -0.003946f, -3.174368f,
 0.763269f, 0.821101f, -2.875068f,
 0.507783f, -0.003946f, -3.174368f,
 1.831684f, 0.858589f, -1.628968f,
 1.831684f, 0.858589f, -1.628968f,
 0.507783f, -0.003946f, -3.174368f,
 2.527921f, -0.006619f, 0.604031f,
 2.410407f, 1.308059f, -2.264887f,
 1.831684f, 0.858589f, -1.628968f,
 1.831684f, 0.858589f, -1.628968f,
 2.527921f, -0.006619f, 0.604031f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.832832f, -0.407872f, 0.374208f},
{ -0.819682f, -0.511277f, 0.258296f},
{ -0.813672f, -0.533886f, 0.230006f},
{ -0.805073f, -0.559903f, 0.195871f},
{ 0.077638f, -0.426612f, 0.901097f},
{ 0.179260f, -0.542517f, 0.820696f},
{ 0.161525f, -0.523039f, 0.836864f},
{ 0.201461f, -0.566425f, 0.799110f},
{ -0.142399f, -0.906216f, 0.398114f},
{ -0.476374f, -0.414799f, 0.775249f},
{ -0.824847f, -0.559517f, 0.081045f},
{ -0.941155f, -0.326803f, 0.086183f},
{ -0.827392f, 0.491667f, 0.271454f},
{ -0.402388f, 0.659121f, 0.635329f},
{ -0.966608f, 0.113463f, -0.229773f},
{ -0.507968f, 0.820460f, 0.262324f},
{ -0.164459f, 0.906792f, 0.388177f},
{ -0.877231f, -0.473869f, -0.076901f},
{ -0.485825f, -0.869516f, 0.088971f},
{ 0.285493f, 0.955927f, 0.068531f},
{ 0.667400f, 0.456802f, -0.588141f},
{ -0.622603f, 0.704659f, -0.340324f},
{ -0.102655f, 0.024819f, -0.994407f},
{ -0.903074f, 0.063466f, 0.424770f},
{ -0.623249f, -0.028033f, 0.781521f},
{ -0.128205f, 0.257278f, -0.957795f},
{ -0.237238f, -0.153255f, -0.959287f},
{ -0.982453f, -0.165748f, -0.085524f},
{ 0.268560f, -0.519246f, 0.811332f},
{ -0.091656f, -0.404235f, 0.910051f},
{ -0.470516f, -0.373490f, 0.799450f},
{ -0.288817f, -0.058119f, 0.955619f},
{ -0.578049f, 0.018263f, -0.815798f},
{ -0.815438f, -0.562971f, 0.134629f},
{ -0.198842f, -0.553357f, -0.808862f},
{ -0.060194f, -0.997076f, 0.047083f},
{ -0.344628f, 0.413431f, 0.842797f},
{ -0.926987f, 0.177569f, -0.330402f},
{ 0.440339f, -0.566681f, 0.696401f},
{ 0.017203f, -0.904993f, -0.425079f},
{ 0.327860f, -0.580112f, -0.745640f},
{ -0.374926f, 0.429338f, -0.821644f},
{ -0.629359f, 0.764820f, 0.137684f},
{ 0.064146f, 0.712395f, -0.698841f},
{ -0.724263f, 0.688924f, 0.028764f},
{ 0.558702f, -0.565170f, 0.606988f},
{ 0.708264f, -0.259951f, -0.656344f},
{ -0.537054f, -0.486362f, 0.689221f},
{ -0.942568f, -0.117122f, -0.312806f},
{ -0.609608f, -0.538562f, -0.581660f},
{ 0.727737f, -0.171829f, -0.663983f},
{ -0.041634f, -0.712195f, -0.700746f},
{ -0.708679f, 0.629239f, 0.319112f},
{ -0.575796f, 0.230415f, 0.784454f},
{ 0.497142f, 0.372288f, 0.783742f},
{ 0.867087f, 0.448507f, 0.216798f},
{ 0.946571f, 0.246113f, 0.208402f},
{ 0.546650f, 0.457592f, -0.701273f},
{ -0.645990f, 0.444533f, -0.620554f},
{ -0.923014f, 0.241568f, 0.299484f},
{ 0.002644f, -0.999996f, -0.000621f},
{ 0.000468f, -1.000000f, 0.000168f},
{ 0.002063f, -0.999998f, -0.000410f},
{ -0.000085f, -1.000000f, 0.000368f},
{ -0.850328f, 0.372155f, -0.372079f},
{ -0.353663f, 0.846587f, 0.397759f},
{ 0.861624f, 0.253663f, -0.439613f},
{ 0.379307f, 0.829889f, 0.409159f},
{ 0.592442f, -0.409542f, 0.693749f},
{ 0.292653f, -0.318355f, 0.901668f},
{ 0.257083f, 0.431591f, 0.864661f},
{ 0.511485f, 0.605167f, 0.610046f},
{ 0.874908f, -0.128091f, 0.467042f},
{ 0.878635f, -0.458746f, 0.132486f},
{ 0.750107f, 0.120695f, 0.650209f},
{ 0.981888f, -0.187750f, -0.025421f},
{ -0.178561f, -0.317677f, 0.931234f},
{ 0.630613f, -0.009883f, -0.776035f},
{ 0.833006f, -0.546286f, 0.087591f},
{ 0.636049f, -0.423512f, 0.645042f},
{ 0.961517f, -0.217506f, 0.167859f},
{ 0.637049f, -0.203817f, -0.743389f},
{ 0.152923f, 0.187558f, -0.970277f},
{ -0.370337f, -0.083917f, 0.925099f},
{ -0.773934f, -0.611149f, -0.165901f},
{ 0.869687f, -0.028888f, 0.492757f},
{ 0.331172f, -0.600799f, -0.727575f},
{ 0.896270f, 0.227484f, 0.380726f},
{ 0.272305f, -0.388552f, -0.880271f},
{ 0.607337f, 0.254375f, 0.752619f},
{ -0.108802f, 0.366048f, 0.924214f},
{ 0.897844f, 0.208357f, 0.387895f},
{ -0.930790f, -0.243833f, -0.272353f},
{ 0.464982f, -0.259630f, -0.846395f},
{ -0.979433f, 0.028150f, -0.199797f},
{ -0.851335f, -0.397443f, -0.342445f},
{ 0.215534f, 0.765105f, -0.606762f},
{ -0.783183f, -0.616710f, 0.079335f},
{ -0.108598f, 0.820171f, -0.561717f},
{ 0.661200f, 0.231391f, 0.713634f},
{ 0.837156f, 0.543629f, -0.060316f},
{ -0.438946f, -0.773641f, 0.456952f},
{ 0.403129f, -0.709382f, 0.578156f},
{ -0.720049f, 0.679225f, -0.142067f},
{ -0.632492f, 0.270750f, 0.725705f},
{ -0.001380f, 0.735281f, -0.677761f},
{ 0.836510f, 0.322789f, -0.442786f},
{ -0.001846f, -0.999994f, -0.003081f},
{ 0.000053f, -0.999994f, -0.003421f},
{ 0.005585f, -0.999975f, -0.004413f},
{ 0.007612f, -0.999960f, -0.004777f},
{ 0.505491f, 0.858401f, 0.087327f},
{ 0.623485f, 0.281681f, -0.729330f},
{ -0.874688f, 0.484473f, -0.014395f},
{ -0.068202f, 0.922934f, 0.378869f},
{ -0.404992f, -0.227740f, -0.885504f},
{ -0.396945f, -0.241067f, -0.885619f},
{ -0.401996f, -0.232727f, -0.885572f},
{ -0.394023f, -0.245852f, -0.885609f},
{ -0.720712f, 0.683171f, 0.117694f},
{ -0.723474f, 0.680480f, 0.116326f},
{ -0.723211f, 0.680737f, 0.116457f},
{ -0.725978f, 0.678021f, 0.115079f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagAttack6.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105