package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieWalkd {

static String TextureName = "CurrieWalk4.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 3.210386f, 3.825454f, 3.082735f,
 3.072948f, 1.294433f, 1.449540f,
 2.498545f, 4.524066f, 2.026052f,
 2.361975f, 1.995448f, 0.391141f,
 1.265925f, 4.940034f, 1.412434f,
 1.225403f, 5.341875f, -0.430923f,
 -0.809257f, 4.744761f, 1.535476f,
 -0.736913f, 5.579581f, -0.236762f,
 0.241677f, 4.827577f, 1.297924f,
 0.880895f, 4.906176f, 0.488125f,
 0.201672f, 4.993897f, -0.009749f,
 0.229496f, 5.633728f, 1.824337f,
 1.287197f, 5.832855f, 0.790628f,
 0.244508f, 6.178867f, -0.332608f,
 0.216570f, 6.738017f, 1.780702f,
 1.098260f, 6.746291f, 0.944499f,
 0.239964f, 7.080441f, 0.023665f,
 0.230775f, 6.774141f, 0.707801f,
 0.677999f, 6.601890f, 0.385048f,
 0.239595f, 6.320240f, 0.041668f,
 0.234081f, 7.455907f, 0.458138f,
 0.865428f, 7.055526f, -0.013801f,
 0.243028f, 6.651806f, -0.501449f,
 0.240799f, 7.702489f, -0.027471f,
 0.686409f, 7.390758f, -0.300603f,
 0.245460f, 7.131634f, -0.705894f,
 0.268134f, 2.537699f, 0.510681f,
 -0.355653f, 1.980738f, -0.461424f,
 1.331860f, 0.000165f, 1.332224f,
 -0.958189f, 0.000180f, -0.957852f,
 0.172364f, 4.070033f, 1.522510f,
 0.218738f, 5.045320f, -0.476201f,
 0.243031f, 4.996004f, 1.230966f,
 0.209439f, 5.369303f, -0.023627f,
 0.819204f, 5.187047f, 0.580130f,
 0.570010f, 5.117102f, 0.898957f,
 0.525648f, 5.279515f, 0.154477f,
 0.752307f, 2.447369f, 0.080471f,
 0.712750f, 2.239127f, -0.308999f,
 1.332110f, 0.000162f, -1.377033f,
 1.959939f, -0.000152f, -0.022424f,
 0.178420f, 2.024959f, -0.621145f,
 0.396612f, -0.000164f, -1.585818f,
 1.047385f, 4.193192f, 1.261448f,
 1.640269f, 4.759231f, 0.421830f,
 1.277277f, 4.929447f, -0.223525f,
 2.415127f, 2.646299f, 1.863670f,
 1.873632f, 3.322027f, 0.833066f,
 1.901660f, 3.625180f, 1.123591f,
 2.442816f, 2.949540f, 2.153797f,
 0.974788f, 4.267964f, 0.034708f,
 0.973163f, 4.201621f, 0.443514f,
 2.250366f, 3.775898f, 1.213531f,
 2.986249f, 2.957191f, 2.482695f,
 0.957389f, 4.698087f, 0.751335f,
 2.427914f, 3.768746f, 0.889040f,
 3.347186f, 3.062801f, 1.937266f,
 1.769889f, 4.741282f, 0.356112f,
 2.400226f, 3.466143f, 0.604202f,
 3.319471f, 2.759563f, 1.646983f,
 1.747277f, 4.558951f, -0.056807f,
 2.193407f, 3.158781f, 0.624741f,
 2.929676f, 2.338040f, 1.890090f,
 0.971165f, 5.000283f, -0.066527f,
 -0.436564f, 2.502135f, 0.662058f,
 -0.022903f, -0.000162f, 1.960271f,
 -1.377402f, 0.000162f, 1.332478f,
 -0.961292f, 2.354623f, 0.197996f,
 -1.586262f, -0.000166f, 0.396907f,
 -0.772216f, 2.108242f, -0.134485f,
 -1.217396f, 4.929877f, 0.436386f,
 -0.769604f, 4.299848f, 1.268806f,
 -0.842533f, 5.085542f, -0.208051f,
 -0.347567f, 5.199105f, 0.670726f,
 -0.088770f, 5.129210f, 0.924936f,
 -0.118953f, 5.308477f, 0.251880f,
 -2.297742f, 3.296761f, -0.218242f,
 -2.176051f, 3.420032f, 0.164197f,
 -1.611208f, 4.227952f, -0.569548f,
 -1.676804f, 4.208769f, -0.991618f,
 -0.624733f, 4.296066f, 0.442833f,
 -0.619370f, 4.365148f, 0.036224f,
 -2.633347f, 3.416548f, 0.605167f,
 -1.919984f, 4.320419f, -0.372739f,
 -0.544756f, 4.781818f, 0.761651f,
 -2.994492f, 3.862393f, 0.273766f,
 -2.064733f, 4.595307f, -0.503422f,
 -1.342194f, 4.900815f, 0.542618f,
 -3.116295f, 3.739941f, -0.109039f,
 -2.136486f, 4.581502f, -0.983320f,
 -1.209641f, 5.273333f, 0.328750f,
 -2.882312f, 3.166244f, -0.177826f,
 -2.057841f, 4.257296f, -1.150673f,
 -0.529750f, 5.090166f, -0.059002f,
 -0.432856f, 4.908892f, 0.588747f,
 -0.824963f, 5.832829f, 0.779925f,
 -0.642301f, 6.746169f, 0.922727f,
 -0.207188f, 6.601902f, 0.375675f,
 -0.383227f, 7.057088f, -0.021453f,
 -0.197207f, 7.395310f, -0.299963f,
 0.194454f, 1.556742f, 1.771569f,
 1.253304f, 1.362532f, 1.439043f,
 1.859451f, 1.391522f, 0.490359f,
 1.431291f, 1.273862f, -0.073498f,
 0.783674f, 0.973882f, -0.344301f,
 -0.069853f, 0.889590f, 0.147840f,
 -0.620220f, 1.126290f, 0.903366f,
 -0.695645f, 1.473820f, 1.407349f,
 2.415127f, 2.646299f, 1.863670f,
 2.415127f, 2.646299f, 1.863670f,
 1.873632f, 3.322027f, 0.833066f,
 1.873632f, 3.322027f, 0.833066f,
 0.974788f, 4.267964f, 0.034708f,
 0.974788f, 4.267964f, 0.034708f,
 2.929676f, 2.338040f, 1.890090f,
 2.929676f, 2.338040f, 1.890090f,
 -0.069853f, 0.889590f, 0.147840f,
 -0.069853f, 0.889590f, 0.147840f,
 -0.355653f, 1.980738f, -0.461424f,
 1.253304f, 1.362532f, 1.439043f,
 1.253304f, 1.362532f, 1.439043f,
 0.268134f, 2.537699f, 0.510681f,
 0.268134f, 2.537699f, 0.510681f,
 0.172364f, 4.070033f, 1.522510f,
 0.172364f, 4.070033f, 1.522510f,
 -0.355653f, 1.980738f, -0.461424f,
 0.218738f, 5.045320f, -0.476201f,
 0.218738f, 5.045320f, -0.476201f,
 0.172364f, 4.070033f, 1.522510f,
 0.243031f, 4.996004f, 1.230966f,
 0.243031f, 4.996004f, 1.230966f,
 0.218738f, 5.045320f, -0.476201f,
 0.218738f, 5.045320f, -0.476201f,
 0.209439f, 5.369303f, -0.023627f,
 -2.297742f, 3.296761f, -0.218242f,
 -2.297742f, 3.296761f, -0.218242f,
 -1.676804f, 4.208769f, -0.991618f,
 -0.619370f, 4.365148f, 0.036224f,
 -0.619370f, 4.365148f, 0.036224f,
 -1.676804f, 4.208769f, -0.991618f,
 -2.882312f, 3.166244f, -0.177826f,
 -2.882312f, 3.166244f, -0.177826f,
 0.229496f, 5.633728f, 1.824337f,
 0.241677f, 4.827577f, 1.297924f,
 0.241677f, 4.827577f, 1.297924f,
 0.244508f, 6.178867f, -0.332608f,
 0.201672f, 4.993897f, -0.009749f,
 0.201672f, 4.993897f, -0.009749f,
 0.216570f, 6.738017f, 1.780702f,
 0.229496f, 5.633728f, 1.824337f,
 0.229496f, 5.633728f, 1.824337f,
 0.244508f, 6.178867f, -0.332608f,
 0.244508f, 6.178867f, -0.332608f,
 0.239964f, 7.080441f, 0.023665f,
 0.239964f, 7.080441f, 0.023665f,
 0.216570f, 6.738017f, 1.780702f,
 0.234081f, 7.455907f, 0.458138f,
 0.234081f, 7.455907f, 0.458138f,
 0.230775f, 6.774141f, 0.707801f,
 0.243028f, 6.651806f, -0.501449f,
 0.239595f, 6.320240f, 0.041668f,
 0.239595f, 6.320240f, 0.041668f,
 0.240799f, 7.702489f, -0.027471f,
 0.234081f, 7.455907f, 0.458138f,
 0.234081f, 7.455907f, 0.458138f,
 0.245460f, 7.131634f, -0.705894f,
 0.243028f, 6.651806f, -0.501449f,
 0.243028f, 6.651806f, -0.501449f,
 0.245460f, 7.131634f, -0.705894f,
 0.240799f, 7.702489f, -0.027471f,
 1.253304f, 1.362532f, 1.439043f,
 1.331860f, 0.000165f, 1.332224f,
 1.331860f, 0.000165f, 1.332224f,
 -0.958189f, 0.000180f, -0.957852f,
 -0.958189f, 0.000180f, -0.957852f,
 -0.069853f, 0.889590f, 0.147840f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.870892f, 0.232213f, -0.433157f},
{ 0.871405f, 0.232128f, -0.432168f},
{ 0.871097f, 0.232179f, -0.432762f},
{ 0.871610f, 0.232094f, -0.431774f},
{ -0.078932f, 0.973643f, 0.213984f},
{ 0.030665f, 0.947145f, 0.319338f},
{ 0.038932f, 0.944221f, 0.327004f},
{ 0.150237f, 0.892010f, 0.426318f},
{ 0.913877f, 0.376611f, 0.151633f},
{ 0.508110f, 0.498441f, -0.702410f},
{ 0.863284f, 0.330907f, 0.381107f},
{ 0.746368f, -0.057276f, -0.663064f},
{ -0.187016f, 0.555846f, -0.809975f},
{ 0.020844f, -0.096813f, -0.995084f},
{ -0.469583f, -0.118013f, -0.874966f},
{ -0.551634f, 0.476751f, -0.684404f},
{ 0.572905f, 0.369119f, 0.731800f},
{ 0.437176f, 0.139823f, 0.888441f},
{ 0.994857f, -0.067507f, 0.075511f},
{ 0.688893f, -0.322384f, 0.649226f},
{ 0.032318f, -0.272431f, 0.961633f},
{ -0.003097f, 0.147510f, -0.989056f},
{ 0.562760f, 0.132930f, -0.815862f},
{ 0.500139f, 0.762514f, 0.410407f},
{ 0.552736f, 0.535965f, 0.638141f},
{ 0.046381f, 0.446940f, 0.893361f},
{ -0.087024f, 0.809193f, -0.581062f},
{ 0.302765f, 0.901247f, -0.309980f},
{ -0.666320f, 0.145997f, 0.731234f},
{ -0.770245f, 0.030483f, 0.637019f},
{ -0.708750f, -0.701169f, 0.077685f},
{ -0.779684f, -0.623037f, 0.062589f},
{ 0.177107f, -0.324125f, -0.929288f},
{ -0.592292f, -0.680535f, 0.431350f},
{ 0.242792f, 0.409661f, 0.879335f},
{ 0.102895f, 0.770885f, 0.628608f},
{ -0.001538f, 0.531162f, 0.847269f},
{ 0.774980f, 0.588931f, 0.229274f},
{ 0.809301f, 0.569580f, -0.143563f},
{ 0.431931f, 0.861496f, 0.266946f},
{ 0.744448f, -0.361242f, -0.561516f},
{ 0.710346f, -0.029178f, -0.703248f},
{ 0.141699f, -0.026024f, -0.989568f},
{ 0.156101f, -0.970962f, -0.181285f},
{ -0.041865f, -0.712382f, -0.700542f},
{ 0.528794f, 0.527579f, -0.664859f},
{ -0.006617f, -0.260260f, 0.965516f},
{ 0.032563f, -0.572663f, 0.819144f},
{ 0.995352f, -0.093864f, -0.021534f},
{ 0.922272f, -0.352838f, -0.157859f},
{ 0.018544f, 0.038587f, -0.999083f},
{ -0.024093f, -0.224357f, -0.974209f},
{ -0.013855f, 0.590672f, 0.806793f},
{ 0.784537f, 0.604019f, 0.140227f},
{ 0.006645f, 0.847077f, -0.531429f},
{ -0.010350f, 0.343895f, 0.938951f},
{ 0.932962f, -0.123375f, 0.338172f},
{ -0.003313f, 0.632698f, 0.774392f},
{ 0.998904f, 0.028168f, 0.037382f},
{ 0.005016f, -0.851168f, -0.524870f},
{ 0.001637f, -0.689328f, -0.724448f},
{ 0.007228f, 0.999487f, -0.031210f},
{ 0.738595f, 0.520769f, -0.428109f},
{ 0.000772f, 0.129548f, -0.991573f},
{ -0.992889f, -0.101770f, 0.061760f},
{ -0.660932f, 0.350313f, 0.663664f},
{ -0.308580f, 0.085318f, 0.947364f},
{ 0.073856f, 0.435163f, 0.897318f},
{ -0.705805f, -0.149274f, -0.692500f},
{ -0.826429f, 0.354581f, -0.437364f},
{ -0.694362f, -0.067105f, 0.716490f},
{ -0.982476f, 0.183765f, 0.031155f},
{ -0.506753f, 0.168295f, -0.845505f},
{ -0.393091f, 0.795279f, 0.461530f},
{ -0.417151f, 0.618533f, 0.665884f},
{ -0.203698f, 0.953777f, -0.220943f},
{ 0.617352f, -0.412575f, -0.669820f},
{ 0.398251f, -0.903661f, 0.157459f},
{ 0.384990f, -0.819636f, -0.424241f},
{ 0.759124f, -0.396761f, 0.516053f},
{ 0.589445f, -0.466664f, -0.659378f},
{ -0.404285f, -0.625143f, 0.667645f},
{ -0.011916f, -0.032687f, 0.999395f},
{ 0.032277f, -0.025445f, 0.999155f},
{ -0.216528f, -0.034835f, 0.975655f},
{ -0.449641f, 0.611010f, 0.651529f},
{ -0.635692f, 0.706130f, 0.311891f},
{ -0.545506f, -0.225343f, 0.807245f},
{ -0.884263f, 0.161651f, -0.438118f},
{ -0.293370f, 0.730117f, -0.617141f},
{ -0.165725f, 0.977817f, -0.128100f},
{ -0.046247f, 0.028325f, -0.998528f},
{ -0.523470f, -0.683159f, -0.509188f},
{ 0.368027f, 0.669514f, -0.645218f},
{ -0.996305f, -0.078051f, -0.035841f},
{ -0.923070f, -0.381323f, -0.050340f},
{ -0.789524f, 0.601787f, 0.120436f},
{ -0.999502f, 0.027631f, 0.015226f},
{ -0.941831f, -0.124732f, 0.312085f},
{ -0.731469f, 0.523320f, -0.437138f},
{ -0.037708f, 0.125423f, 0.991386f},
{ 0.679507f, -0.019917f, 0.733399f},
{ 0.989801f, 0.106382f, -0.094748f},
{ 0.430418f, 0.606444f, -0.668555f},
{ -0.129391f, 0.785212f, -0.605558f},
{ -0.412307f, 0.794724f, -0.445441f},
{ -0.743018f, 0.643439f, -0.184148f},
{ -0.740676f, 0.320815f, 0.590319f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieWalk4.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73