package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieDeatha {

static String TextureName = "CurrieDeath1.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 2.732560f, 4.779059f, 1.316000f,
 2.766077f, 1.990919f, 0.170219f,
 2.207444f, 5.271618f, 0.051601f,
 2.239430f, 2.486990f, -1.098916f,
 1.146344f, 6.123951f, -0.491409f,
 1.374373f, 5.657279f, -2.413046f,
 -0.915353f, 6.063679f, -0.839957f,
 -0.535247f, 5.734690f, -2.732153f,
 0.131994f, 5.985529f, -0.856392f,
 0.904669f, 5.684204f, -1.405494f,
 0.353101f, 5.445415f, -2.025590f,
 0.221571f, 6.999997f, -0.896194f,
 1.306831f, 6.536803f, -1.850240f,
 0.257727f, 6.128239f, -2.963421f,
 0.246803f, 7.857937f, -1.626763f,
 1.122801f, 7.349068f, -2.296640f,
 0.267908f, 7.072379f, -3.220685f,
 0.253827f, 7.233607f, -2.500139f,
 0.698427f, 6.897908f, -2.651406f,
 0.255856f, 6.468012f, -2.752522f,
 0.258757f, 7.622636f, -3.113147f,
 0.887313f, 7.017448f, -3.241493f,
 0.279249f, 6.424933f, -3.375819f,
 0.269595f, 7.533552f, -3.640729f,
 0.712734f, 7.117868f, -3.668278f,
 0.285595f, 6.687846f, -3.827598f,
 -0.300875f, 3.549145f, -0.325808f,
 0.371313f, 2.812288f, -1.495247f,
 -1.222490f, 0.231834f, 1.332238f,
 1.067560f, 0.231810f, -0.957843f,
 -0.157698f, 5.313342f, -0.385921f,
 0.601526f, 5.351123f, -2.478073f,
 0.154042f, 6.091805f, -0.999417f,
 0.379753f, 5.760946f, -2.228123f,
 0.838998f, 5.956977f, -1.500255f,
 0.531485f, 6.032075f, -1.264164f,
 0.699483f, 5.846059f, -1.918667f,
 0.452949f, 3.512986f, -0.196153f,
 0.987757f, 3.201055f, -0.615595f,
 1.486753f, 0.231820f, 1.332478f,
 0.132267f, 0.231583f, 1.960297f,
 0.814556f, 2.938509f, -1.137393f,
 1.695596f, 0.231516f, 0.396891f,
 0.762612f, 5.361875f, -0.378993f,
 1.637220f, 5.551725f, -1.137866f,
 1.504329f, 5.427121f, -1.885053f,
 2.093330f, 3.396287f, 0.223929f,
 1.731781f, 3.870775f, -0.982814f,
 1.740515f, 4.213232f, -0.705057f,
 2.086515f, 3.747845f, 0.454751f,
 1.086339f, 4.906089f, -1.478671f,
 0.950446f, 5.019329f, -1.101472f,
 2.088971f, 4.338881f, -0.583596f,
 2.574810f, 3.815373f, 0.855269f,
 0.883084f, 5.597709f, -1.049298f,
 2.295407f, 4.317818f, -0.883149f,
 3.016015f, 3.817288f, 0.360991f,
 1.800171f, 5.443643f, -1.223184f,
 2.290284f, 3.970202f, -1.151623f,
 3.022813f, 3.465684f, 0.129981f,
 1.772839f, 5.335811f, -1.662776f,
 2.074027f, 3.671274f, -1.106796f,
 2.588774f, 3.097409f, 0.384027f,
 1.179639f, 5.526155f, -1.868928f,
 -0.799216f, 3.361237f, -0.851997f,
 -1.850549f, 0.231494f, -0.022525f,
 -1.222759f, 0.231820f, -1.377033f,
 -0.708832f, 3.016027f, -1.538917f,
 -0.287189f, 0.231489f, -1.585893f,
 -0.184839f, 2.829136f, -1.674793f,
 -1.053321f, 5.551716f, -2.117192f,
 -0.947173f, 5.361802f, -1.001179f,
 -0.482873f, 5.439677f, -2.609766f,
 -0.307694f, 5.956260f, -1.699462f,
 -0.110936f, 6.030578f, -1.390615f,
 0.071711f, 5.850719f, -2.091094f,
 -2.020601f, 3.179762f, -1.801495f,
 -2.072132f, 3.411708f, -1.453620f,
 -1.352845f, 4.206536f, -2.168827f,
 -1.266781f, 4.004430f, -2.552738f,
 -0.550523f, 5.018603f, -1.648669f,
 -0.412070f, 4.905932f, -2.028554f,
 -2.659754f, 3.407298f, -1.212644f,
 -1.717260f, 4.330184f, -2.109614f,
 -0.531771f, 5.596253f, -1.562857f,
 -2.917193f, 3.672842f, -1.762224f,
 -1.814365f, 4.467256f, -2.431778f,
 -1.221664f, 5.528113f, -2.047125f,
 -2.865955f, 3.441542f, -2.109430f,
 -1.735613f, 4.255873f, -2.812137f,
 -1.049385f, 5.615829f, -2.456269f,
 -2.555128f, 2.934662f, -1.922128f,
 -1.559994f, 3.929173f, -2.837239f,
 -0.233100f, 5.526350f, -2.383241f,
 -0.382819f, 5.675723f, -1.643024f,
 -0.805756f, 6.538073f, -1.877613f,
 -0.617914f, 7.349273f, -2.310843f,
 -0.186193f, 6.899054f, -2.658057f,
 -0.359552f, 7.021177f, -3.251182f,
 -0.172213f, 7.119518f, -3.677321f,
 -1.576152f, 1.878705f, -0.069998f,
 -0.973048f, 2.106482f, 0.853193f,
 0.102760f, 2.283044f, 1.138231f,
 1.015544f, 2.034557f, 0.915243f,
 1.009455f, 1.679254f, 0.213481f,
 0.438718f, 1.446836f, -0.571392f,
 -0.511418f, 1.453218f, -1.000651f,
 -1.231365f, 1.654948f, -0.871274f,
 2.093330f, 3.396287f, 0.223929f,
 2.093330f, 3.396287f, 0.223929f,
 1.731781f, 3.870775f, -0.982814f,
 1.731781f, 3.870775f, -0.982814f,
 1.086339f, 4.906089f, -1.478671f,
 1.086339f, 4.906089f, -1.478671f,
 2.588774f, 3.097409f, 0.384027f,
 2.588774f, 3.097409f, 0.384027f,
 0.438718f, 1.446836f, -0.571392f,
 0.438718f, 1.446836f, -0.571392f,
 0.371313f, 2.812288f, -1.495247f,
 -0.973048f, 2.106482f, 0.853193f,
 -0.973048f, 2.106482f, 0.853193f,
 -0.300875f, 3.549145f, -0.325808f,
 -0.300875f, 3.549145f, -0.325808f,
 -0.157698f, 5.313342f, -0.385921f,
 -0.157698f, 5.313342f, -0.385921f,
 0.371313f, 2.812288f, -1.495247f,
 0.601526f, 5.351123f, -2.478073f,
 0.601526f, 5.351123f, -2.478073f,
 -0.157698f, 5.313342f, -0.385921f,
 0.154042f, 6.091805f, -0.999417f,
 0.154042f, 6.091805f, -0.999417f,
 0.601526f, 5.351123f, -2.478073f,
 0.601526f, 5.351123f, -2.478073f,
 0.379753f, 5.760946f, -2.228123f,
 -2.020601f, 3.179762f, -1.801495f,
 -2.020601f, 3.179762f, -1.801495f,
 -1.266781f, 4.004430f, -2.552738f,
 -0.412070f, 4.905932f, -2.028554f,
 -0.412070f, 4.905932f, -2.028554f,
 -1.266781f, 4.004430f, -2.552738f,
 -2.555128f, 2.934662f, -1.922128f,
 -2.555128f, 2.934662f, -1.922128f,
 0.221571f, 6.999997f, -0.896194f,
 0.131994f, 5.985529f, -0.856392f,
 0.131994f, 5.985529f, -0.856392f,
 0.257727f, 6.128239f, -2.963421f,
 0.353101f, 5.445415f, -2.025590f,
 0.353101f, 5.445415f, -2.025590f,
 0.246803f, 7.857937f, -1.626763f,
 0.221571f, 6.999997f, -0.896194f,
 0.221571f, 6.999997f, -0.896194f,
 0.257727f, 6.128239f, -2.963421f,
 0.257727f, 6.128239f, -2.963421f,
 0.267908f, 7.072379f, -3.220685f,
 0.267908f, 7.072379f, -3.220685f,
 0.246803f, 7.857937f, -1.626763f,
 0.258757f, 7.622636f, -3.113147f,
 0.258757f, 7.622636f, -3.113147f,
 0.253827f, 7.233607f, -2.500139f,
 0.279249f, 6.424933f, -3.375819f,
 0.255856f, 6.468012f, -2.752522f,
 0.255856f, 6.468012f, -2.752522f,
 0.269595f, 7.533552f, -3.640729f,
 0.258757f, 7.622636f, -3.113147f,
 0.258757f, 7.622636f, -3.113147f,
 0.285595f, 6.687846f, -3.827598f,
 0.279249f, 6.424933f, -3.375819f,
 0.279249f, 6.424933f, -3.375819f,
 0.285595f, 6.687846f, -3.827598f,
 0.269595f, 7.533552f, -3.640729f,
 -0.973048f, 2.106482f, 0.853193f,
 -1.222490f, 0.231834f, 1.332238f,
 -1.222490f, 0.231834f, 1.332238f,
 1.067560f, 0.231810f, -0.957843f,
 1.067560f, 0.231810f, -0.957843f,
 0.438718f, 1.446836f, -0.571392f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.932469f, 0.146846f, -0.330057f},
{ 0.932582f, 0.146877f, -0.329725f},
{ 0.932514f, 0.146859f, -0.329924f},
{ 0.932627f, 0.146890f, -0.329592f},
{ 0.011264f, 0.971999f, -0.234715f},
{ 0.036411f, 0.979128f, -0.199954f},
{ 0.037116f, 0.979302f, -0.198973f},
{ 0.066335f, 0.985213f, -0.157970f},
{ -0.025173f, 0.532672f, 0.845947f},
{ 0.682807f, 0.425426f, 0.593959f},
{ 0.273762f, 0.412493f, 0.868852f},
{ 0.971512f, -0.005287f, 0.236933f},
{ 0.930719f, 0.169549f, -0.324060f},
{ 0.795690f, -0.332162f, -0.506503f},
{ 0.456990f, -0.408423f, -0.790159f},
{ 0.630767f, 0.052239f, -0.774212f},
{ -0.571802f, 0.460444f, 0.678994f},
{ -0.464626f, 0.418359f, 0.780448f},
{ 0.917054f, 0.147440f, 0.370505f},
{ 0.409342f, 0.222532f, 0.884827f},
{ -0.351948f, 0.262689f, 0.898402f},
{ 0.337268f, -0.223284f, -0.914546f},
{ 0.791797f, -0.174154f, -0.585430f},
{ 0.409236f, 0.895797f, 0.173417f},
{ 0.480801f, 0.754909f, 0.446031f},
{ -0.146684f, 0.778612f, 0.610121f},
{ 0.157991f, 0.575065f, -0.802707f},
{ 0.408093f, 0.719624f, -0.561785f},
{ -0.763098f, 0.279339f, 0.582795f},
{ -0.828376f, -0.021409f, 0.559763f},
{ -0.730273f, -0.676643f, 0.094104f},
{ -0.812609f, -0.577509f, -0.078423f},
{ -0.478446f, -0.595159f, -0.645659f},
{ -0.633985f, -0.355518f, 0.686783f},
{ 0.120454f, 0.550518f, 0.826088f},
{ 0.110424f, 0.790053f, 0.603012f},
{ 0.072190f, 0.625787f, 0.776646f},
{ 0.754579f, 0.613989f, 0.231578f},
{ 0.879107f, 0.462101f, -0.116767f},
{ 0.501414f, 0.719178f, 0.481007f},
{ 0.806799f, -0.462948f, -0.367090f},
{ 0.715058f, -0.122457f, -0.688256f},
{ 0.533995f, 0.211494f, -0.818608f},
{ 0.152088f, -0.988050f, 0.025013f},
{ 0.020910f, -0.761493f, -0.647836f},
{ 0.254389f, 0.354562f, -0.899763f},
{ 0.011842f, 0.359363f, 0.933123f},
{ -0.076390f, 0.011205f, 0.997015f},
{ 0.995832f, -0.062798f, 0.066142f},
{ 0.908921f, -0.257763f, 0.327751f},
{ -0.021073f, -0.576531f, -0.816803f},
{ 0.108545f, -0.779214f, -0.617287f},
{ 0.002377f, 0.957859f, 0.287231f},
{ 0.794350f, 0.554322f, -0.248466f},
{ 0.010364f, 0.353090f, -0.935532f},
{ -0.002927f, 0.844334f, 0.535810f},
{ 0.933648f, 0.099656f, 0.344049f},
{ -0.002771f, 0.971615f, 0.236554f},
{ 0.998672f, 0.047647f, 0.019584f},
{ -0.016047f, -0.997113f, 0.074218f},
{ 0.005457f, -0.983999f, -0.178091f},
{ 0.009117f, 0.782277f, -0.622864f},
{ 0.744653f, 0.162589f, -0.647347f},
{ 0.009710f, -0.491712f, -0.870704f},
{ -0.784512f, -0.181033f, -0.593101f},
{ -0.719588f, 0.128714f, -0.682368f},
{ -0.948041f, 0.249743f, 0.197095f},
{ -0.940200f, 0.324999f, 0.101975f},
{ 0.019412f, -0.405413f, -0.913928f},
{ 0.176372f, 0.028440f, -0.983913f},
{ -0.904892f, 0.130534f, 0.405132f},
{ -0.941164f, 0.090994f, -0.325470f},
{ -0.239607f, -0.118378f, -0.963626f},
{ -0.461173f, 0.885836f, -0.051121f},
{ -0.548610f, 0.808964f, 0.211199f},
{ -0.027144f, 0.785023f, -0.618871f},
{ 0.761267f, -0.640299f, -0.102419f},
{ 0.510246f, -0.478153f, 0.714856f},
{ 0.626729f, -0.779233f, 0.002347f},
{ 0.546470f, -0.098828f, 0.831627f},
{ 0.746202f, -0.621730f, -0.237981f},
{ -0.074876f, -0.375195f, 0.923917f},
{ -0.300834f, 0.492057f, 0.816932f},
{ -0.354344f, 0.207928f, 0.911705f},
{ -0.362684f, 0.590623f, 0.720850f},
{ -0.758334f, 0.603406f, 0.246637f},
{ -0.776049f, 0.610756f, -0.157238f},
{ -0.700995f, 0.517099f, 0.491136f},
{ -0.666032f, -0.141696f, -0.732341f},
{ -0.435481f, 0.286338f, -0.853444f},
{ -0.107226f, 0.566554f, -0.817018f},
{ 0.192786f, -0.406089f, -0.893267f},
{ -0.199733f, -0.880992f, -0.428905f},
{ 0.428443f, 0.322639f, -0.844003f},
{ -0.995325f, -0.090915f, 0.032607f},
{ -0.889819f, -0.452475f, -0.059058f},
{ -0.785626f, 0.556016f, -0.271362f},
{ -0.999341f, 0.032921f, -0.015269f},
{ -0.942009f, 0.096804f, 0.321323f},
{ -0.725810f, 0.139307f, -0.673642f},
{ -0.986339f, 0.164536f, 0.007964f},
{ -0.621252f, 0.282327f, 0.730983f},
{ 0.003657f, 0.372011f, 0.928221f},
{ 0.650878f, 0.352764f, 0.672247f},
{ 0.926034f, 0.347440f, -0.147467f},
{ 0.639663f, 0.439023f, -0.630944f},
{ 0.188906f, 0.433946f, -0.880912f},
{ -0.633695f, 0.253507f, -0.730866f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieDeath1.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73