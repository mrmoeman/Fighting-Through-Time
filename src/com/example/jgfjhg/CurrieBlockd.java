package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class CurrieBlockd {

static String TextureName = "CurrieBlock4.mtl";

static int Vertices = 176;

static int VertTexts = 138;

static int Normals = 108;

static int Faces = 164;

static int FacesB = 0;

static int SmoothGroups = 11;

static float VertArray[] = new float[]{
 -1.293137f, 6.788560f, 1.694876f,
 0.765456f, 5.319782f, 3.329379f,
 -0.724402f, 6.208797f, 0.492113f,
 1.333847f, 4.743703f, 2.125932f,
 0.621593f, 4.451231f, 0.221738f,
 1.088950f, 5.352774f, -0.911614f,
 -1.189876f, 4.570084f, 0.003153f,
 -1.218388f, 5.302734f, -1.260297f,
 -0.267087f, 4.448918f, 0.169845f,
 0.570219f, 4.631655f, -0.444224f,
 -0.078677f, 4.921923f, -0.986561f,
 -0.174525f, 4.979695f, 0.928423f,
 0.876567f, 5.519348f, 0.000312f,
 -0.220219f, 6.236747f, -0.880316f,
 -0.133975f, 6.025134f, 1.293931f,
 0.704497f, 6.327754f, 0.468025f,
 -0.182251f, 6.948269f, -0.239230f,
 -0.173471f, 6.432630f, 0.301455f,
 0.255155f, 6.384898f, -0.084060f,
 -0.204588f, 6.239115f, -0.480479f,
 -0.173338f, 7.158671f, 0.304795f,
 0.432250f, 6.947146f, -0.308683f,
 -0.188288f, 6.717781f, -0.877659f,
 -0.177193f, 7.550196f, -0.069692f,
 0.252182f, 7.354721f, -0.451501f,
 -0.181953f, 7.233846f, -0.901555f,
 -0.080326f, 2.312485f, -0.663958f,
 0.348692f, 1.632969f, -1.402895f,
 -1.222494f, 0.000191f, 1.332230f,
 1.067560f, 0.000151f, -0.957835f,
 -0.396530f, 3.697066f, 0.296935f,
 0.212748f, 5.022963f, -1.375847f,
 -0.263201f, 4.626608f, 0.161598f,
 -0.084871f, 5.267763f, -0.920924f,
 0.436822f, 4.928043f, -0.290547f,
 0.100858f, 4.828453f, -0.038728f,
 0.288477f, 5.096542f, -0.658197f,
 0.535545f, 2.327088f, -0.428884f,
 0.843864f, 2.243646f, -0.491677f,
 1.486753f, 0.000164f, 1.332479f,
 0.132225f, 0.000002f, 1.960272f,
 0.784407f, 1.807805f, -1.037476f,
 1.695570f, -0.000112f, 0.396920f,
 0.494496f, 3.914568f, 0.391717f,
 1.266439f, 4.658630f, -0.085091f,
 1.142894f, 4.925320f, -0.743407f,
 -0.148354f, 5.356123f, 2.073203f,
 0.456763f, 4.923316f, 0.951481f,
 0.167356f, 5.094836f, 0.772936f,
 -0.478366f, 5.561867f, 1.912915f,
 0.837208f, 4.212000f, -0.745540f,
 0.702992f, 4.069151f, -0.387532f,
 0.144310f, 5.471974f, 0.727335f,
 -0.605791f, 6.119881f, 2.189016f,
 0.525892f, 4.494288f, -0.038569f,
 0.495412f, 5.579735f, 0.723121f,
 -0.016136f, 6.369377f, 2.019624f,
 1.006385f, 5.029909f, -0.346882f,
 0.800925f, 5.403375f, 0.910083f,
 0.313811f, 6.163633f, 2.179761f,
 1.402617f, 4.933868f, -0.165143f,
 0.790027f, 5.100675f, 1.124060f,
 0.068110f, 5.699479f, 2.515839f,
 0.780849f, 4.946192f, -0.736216f,
 -0.549210f, 2.218549f, -1.065232f,
 -1.850544f, -0.000152f, -0.022528f,
 -1.222759f, 0.000164f, -1.377033f,
 -0.465925f, 2.057190f, -1.364105f,
 -0.287189f, -0.000167f, -1.585892f,
 -0.159106f, 1.707023f, -1.565856f,
 -1.422833f, 4.659072f, -1.060189f,
 -1.211274f, 3.920790f, -0.234627f,
 -0.878275f, 4.944290f, -1.498737f,
 -0.786541f, 4.955055f, -0.492643f,
 -0.549353f, 4.834538f, -0.155325f,
 -0.415689f, 5.105834f, -0.850340f,
 0.365032f, 3.962288f, 1.309590f,
 0.565024f, 4.326947f, 1.236015f,
 -0.331015f, 4.299801f, 0.221403f,
 -0.524120f, 3.940734f, 0.302520f,
 -0.787211f, 4.083506f, -0.937699f,
 -0.662876f, 4.213050f, -1.305402f,
 0.678431f, 4.682681f, 1.750002f,
 -0.399661f, 4.611155f, 0.437053f,
 -0.889404f, 4.498453f, -0.556354f,
 0.032682f, 4.744342f, 1.883970f,
 -0.755970f, 4.569777f, 0.524214f,
 -1.261586f, 4.842214f, -0.622026f,
 -0.166045f, 4.381563f, 1.959959f,
 -0.943471f, 4.214046f, 0.618272f,
 -1.584538f, 4.540253f, -0.622842f,
 0.272328f, 3.941829f, 1.904443f,
 -0.794375f, 3.874482f, 0.610488f,
 -0.632806f, 4.947140f, -1.250992f,
 -0.860802f, 4.692201f, -0.713085f,
 -1.245528f, 5.522096f, 0.069268f,
 -1.036115f, 6.327816f, 0.535777f,
 -0.632190f, 6.384190f, -0.052156f,
 -0.826360f, 6.944212f, -0.267647f,
 -0.650886f, 7.356915f, -0.421710f,
 -1.571741f, 1.610486f, -0.331650f,
 -1.027180f, 1.934680f, 0.598267f,
 0.028628f, 2.149554f, 0.927181f,
 0.579435f, 1.951572f, 1.183461f,
 0.662952f, 1.333750f, 0.578021f,
 0.049597f, 1.010773f, -0.106579f,
 -0.720585f, 1.131044f, -0.583618f,
 -1.027381f, 1.580692f, -0.522988f,
 -0.148354f, 5.356123f, 2.073203f,
 -0.148354f, 5.356123f, 2.073203f,
 0.456763f, 4.923316f, 0.951481f,
 0.456763f, 4.923316f, 0.951481f,
 0.837208f, 4.212000f, -0.745540f,
 0.837208f, 4.212000f, -0.745540f,
 0.068110f, 5.699479f, 2.515839f,
 0.068110f, 5.699479f, 2.515839f,
 0.049597f, 1.010773f, -0.106579f,
 0.049597f, 1.010773f, -0.106579f,
 0.348692f, 1.632969f, -1.402895f,
 -1.027180f, 1.934680f, 0.598267f,
 -1.027180f, 1.934680f, 0.598267f,
 -0.080326f, 2.312485f, -0.663958f,
 -0.080326f, 2.312485f, -0.663958f,
 -0.396530f, 3.697066f, 0.296935f,
 -0.396530f, 3.697066f, 0.296935f,
 0.348692f, 1.632969f, -1.402895f,
 0.212748f, 5.022963f, -1.375847f,
 0.212748f, 5.022963f, -1.375847f,
 -0.396530f, 3.697066f, 0.296935f,
 -0.263201f, 4.626608f, 0.161598f,
 -0.263201f, 4.626608f, 0.161598f,
 0.212748f, 5.022963f, -1.375847f,
 0.212748f, 5.022963f, -1.375847f,
 -0.084871f, 5.267763f, -0.920924f,
 0.365032f, 3.962288f, 1.309590f,
 0.365032f, 3.962288f, 1.309590f,
 -0.524120f, 3.940734f, 0.302520f,
 -0.662876f, 4.213050f, -1.305402f,
 -0.662876f, 4.213050f, -1.305402f,
 -0.524120f, 3.940734f, 0.302520f,
 0.272328f, 3.941829f, 1.904443f,
 0.272328f, 3.941829f, 1.904443f,
 -0.174525f, 4.979695f, 0.928423f,
 -0.267087f, 4.448918f, 0.169845f,
 -0.267087f, 4.448918f, 0.169845f,
 -0.220219f, 6.236747f, -0.880316f,
 -0.078677f, 4.921923f, -0.986561f,
 -0.078677f, 4.921923f, -0.986561f,
 -0.133975f, 6.025134f, 1.293931f,
 -0.174525f, 4.979695f, 0.928423f,
 -0.174525f, 4.979695f, 0.928423f,
 -0.220219f, 6.236747f, -0.880316f,
 -0.220219f, 6.236747f, -0.880316f,
 -0.182251f, 6.948269f, -0.239230f,
 -0.182251f, 6.948269f, -0.239230f,
 -0.133975f, 6.025134f, 1.293931f,
 -0.173338f, 7.158671f, 0.304795f,
 -0.173338f, 7.158671f, 0.304795f,
 -0.173471f, 6.432630f, 0.301455f,
 -0.188288f, 6.717781f, -0.877659f,
 -0.204588f, 6.239115f, -0.480479f,
 -0.204588f, 6.239115f, -0.480479f,
 -0.177193f, 7.550196f, -0.069692f,
 -0.173338f, 7.158671f, 0.304795f,
 -0.173338f, 7.158671f, 0.304795f,
 -0.181953f, 7.233846f, -0.901555f,
 -0.188288f, 6.717781f, -0.877659f,
 -0.188288f, 6.717781f, -0.877659f,
 -0.181953f, 7.233846f, -0.901555f,
 -0.177193f, 7.550196f, -0.069692f,
 -1.027180f, 1.934680f, 0.598267f,
 -1.222494f, 0.000191f, 1.332230f,
 -1.222494f, 0.000191f, 1.332230f,
 1.067560f, 0.000151f, -0.957835f,
 1.067560f, 0.000151f, -0.957835f,
 0.049597f, 1.010773f, -0.106579f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.375318f, 0.765676f,
 0.726555f, 0.762717f,
 0.377036f, 0.969692f,
 0.728274f, 0.966733f,
 0.751372f, 0.748217f,
 0.983685f, 0.748217f,
 0.751372f, 0.980530f,
 0.983685f, 0.980530f,
 0.058710f, 0.738044f,
 0.188314f, 0.734887f,
 0.298759f, 0.731781f,
 0.012084f, 0.850170f,
 0.178645f, 0.832921f,
 0.349294f, 0.881601f,
 0.055351f, 0.984595f,
 0.176141f, 0.925991f,
 0.293720f, 0.997210f,
 0.872342f, 0.403154f,
 0.924498f, 0.397358f,
 0.984533f, 0.402409f,
 0.860112f, 0.467764f,
 0.930985f, 0.444975f,
 0.995345f, 0.462955f,
 0.884231f, 0.506639f,
 0.927176f, 0.482453f,
 0.975989f, 0.504915f,
 0.559083f, 0.419261f,
 0.854419f, 0.422899f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.542471f, 0.638121f,
 0.858956f, 0.685943f,
 0.609025f, 0.737908f,
 0.820745f, 0.740206f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.640628f, 0.408432f,
 0.731389f, 0.404769f,
 0.747247f, 0.006134f,
 0.590414f, 0.010997f,
 0.792625f, 0.411168f,
 0.845019f, 0.023161f,
 0.623727f, 0.626072f,
 0.715423f, 0.645094f,
 0.772830f, 0.657102f,
 0.060226f, 0.152330f,
 0.062324f, 0.359205f,
 0.128458f, 0.361265f,
 0.122794f, 0.145753f,
 0.057239f, 0.548531f,
 0.120907f, 0.563080f,
 0.184346f, 0.334298f,
 0.174400f, 0.059940f,
 0.194282f, 0.653636f,
 0.244613f, 0.345557f,
 0.234830f, 0.122695f,
 0.244885f, 0.547684f,
 0.315355f, 0.343710f,
 0.291114f, 0.133239f,
 0.302843f, 0.546952f,
 0.375118f, 0.328689f,
 0.347131f, 0.062291f,
 0.362179f, 0.641571f,
 0.640628f, 0.408432f,
 0.590414f, 0.010997f,
 0.747247f, 0.006134f,
 0.731389f, 0.404769f,
 0.845019f, 0.023161f,
 0.792625f, 0.411168f,
 0.715423f, 0.645094f,
 0.623727f, 0.626072f,
 0.772830f, 0.657102f,
 0.726012f, 0.731222f,
 0.663006f, 0.736147f,
 0.774517f, 0.737078f,
 0.060226f, 0.152330f,
 0.122794f, 0.145753f,
 0.128458f, 0.361265f,
 0.062324f, 0.359205f,
 0.120907f, 0.563080f,
 0.057239f, 0.548531f,
 0.174400f, 0.059940f,
 0.184346f, 0.334298f,
 0.194282f, 0.653636f,
 0.234830f, 0.122695f,
 0.244613f, 0.345557f,
 0.244885f, 0.547684f,
 0.291114f, 0.133239f,
 0.315355f, 0.343710f,
 0.302843f, 0.546952f,
 0.347131f, 0.062291f,
 0.375118f, 0.328689f,
 0.362179f, 0.641571f,
 0.188314f, 0.734887f,
 0.178645f, 0.832921f,
 0.176141f, 0.925991f,
 0.924498f, 0.397358f,
 0.930985f, 0.444975f,
 0.927176f, 0.482453f,
 0.615686f, 0.211026f,
 0.498717f, 0.234153f,
 0.615686f, 0.211026f,
 0.739266f, 0.206767f,
 0.818649f, 0.218445f,
 0.923414f, 0.247544f,
 0.818649f, 0.218445f,
 0.739266f, 0.206767f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.923414f, 0.247544f,
 0.923414f, 0.247544f,
 0.854419f, 0.422899f,
 0.498717f, 0.234153f,
 0.498717f, 0.234153f,
 0.559083f, 0.419261f,
 0.559083f, 0.419261f,
 0.542471f, 0.638121f,
 0.542471f, 0.638121f,
 0.854419f, 0.422899f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.542471f, 0.638121f,
 0.609025f, 0.737908f,
 0.609025f, 0.737908f,
 0.858956f, 0.685943f,
 0.858956f, 0.685943f,
 0.820745f, 0.740206f,
 0.422822f, 0.123268f,
 0.422822f, 0.123268f,
 0.430455f, 0.354593f,
 0.448956f, 0.557990f,
 0.448956f, 0.557990f,
 0.430455f, 0.354593f,
 0.033925f, 0.060990f,
 0.033925f, 0.060990f,
 0.012084f, 0.850170f,
 0.058710f, 0.738044f,
 0.058710f, 0.738044f,
 0.349294f, 0.881601f,
 0.298759f, 0.731781f,
 0.298759f, 0.731781f,
 0.055351f, 0.984595f,
 0.012084f, 0.850170f,
 0.012084f, 0.850170f,
 0.349294f, 0.881601f,
 0.349294f, 0.881601f,
 0.293720f, 0.997210f,
 0.293720f, 0.997210f,
 0.055351f, 0.984595f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.872342f, 0.403154f,
 0.995345f, 0.462955f,
 0.984533f, 0.402409f,
 0.984533f, 0.402409f,
 0.884231f, 0.506639f,
 0.860112f, 0.467764f,
 0.860112f, 0.467764f,
 0.975989f, 0.504915f,
 0.995345f, 0.462955f,
 0.995345f, 0.462955f,
 0.975989f, 0.504915f,
 0.884231f, 0.506639f,
 0.498717f, 0.234153f,
 0.437548f, 0.046585f,
 0.437548f, 0.046585f,
 0.993325f, 0.069860f,
 0.993325f, 0.069860f,
 0.923414f, 0.247544f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.621160f, 0.779386f, -0.081964f},
{ 0.620210f, 0.780222f, -0.081203f},
{ 0.620781f, 0.779719f, -0.081661f},
{ 0.619829f, 0.780556f, -0.080899f},
{ -0.022771f, 0.786947f, 0.616600f},
{ -0.057840f, 0.825159f, 0.561932f},
{ -0.072269f, 0.839614f, 0.538355f},
{ -0.094367f, 0.860290f, 0.500996f},
{ -0.139154f, 0.701450f, 0.699003f},
{ 0.477333f, 0.437819f, 0.761884f},
{ -0.078937f, 0.406076f, 0.910424f},
{ 0.978358f, -0.084559f, 0.188851f},
{ 0.874787f, 0.333305f, -0.351648f},
{ 0.812801f, -0.239683f, -0.530948f},
{ 0.472266f, -0.309619f, -0.825288f},
{ 0.641019f, 0.231416f, -0.731807f},
{ -0.596561f, 0.592875f, 0.540938f},
{ -0.506273f, 0.322735f, 0.799706f},
{ 0.917925f, 0.086925f, 0.387114f},
{ 0.372430f, -0.169881f, 0.912380f},
{ -0.352349f, -0.333262f, 0.874521f},
{ 0.345132f, 0.157760f, -0.925200f},
{ 0.754868f, 0.139079f, -0.640962f},
{ 0.156935f, 0.729788f, 0.665418f},
{ 0.315010f, 0.512064f, 0.799099f},
{ -0.272329f, 0.303872f, 0.912962f},
{ 0.037418f, 0.889992f, -0.454438f},
{ 0.249102f, 0.968458f, -0.006173f},
{ -0.920246f, -0.380796f, -0.090229f},
{ -0.825418f, -0.549785f, -0.128146f},
{ -0.131314f, -0.894621f, 0.427095f},
{ -0.133704f, -0.934299f, 0.330469f},
{ 0.990704f, -0.043365f, 0.128937f},
{ 0.925350f, 0.059681f, 0.374387f},
{ -0.820936f, 0.570874f, -0.012934f},
{ -0.677208f, 0.421446f, -0.603136f},
{ -0.724330f, 0.487270f, -0.487765f},
{ -0.111800f, 0.968962f, -0.220483f},
{ 0.186955f, 0.895467f, -0.403964f},
{ -0.195068f, 0.472427f, -0.859512f},
{ 0.841383f, 0.408336f, 0.354031f},
{ 0.816525f, 0.570495f, 0.088450f},
{ 0.027941f, -0.997004f, 0.072124f},
{ 0.451449f, -0.282909f, 0.846260f},
{ 0.732277f, -0.528275f, 0.429762f},
{ 0.977033f, -0.034351f, 0.210300f},
{ 0.040457f, -0.590540f, 0.805994f},
{ -0.116580f, -0.806563f, 0.579539f},
{ 0.995308f, -0.046971f, -0.084597f},
{ 0.945592f, -0.325348f, -0.001962f},
{ -0.072154f, 0.366099f, -0.927774f},
{ 0.044494f, 0.170933f, -0.984278f},
{ 0.043990f, 0.265486f, 0.963111f},
{ 0.800835f, 0.513965f, 0.307416f},
{ -0.003484f, 0.979356f, -0.202112f},
{ 0.035722f, -0.004604f, 0.999351f},
{ 0.945024f, -0.232783f, 0.229656f},
{ 0.027340f, 0.326813f, 0.944694f},
{ 0.999755f, 0.011585f, 0.018871f},
{ -0.045778f, -0.630782f, -0.774609f},
{ -0.020455f, -0.409564f, -0.912052f},
{ 0.013829f, 0.954311f, 0.298494f},
{ 0.724223f, 0.645760f, -0.241858f},
{ -0.023331f, 0.463887f, -0.885587f},
{ -0.776955f, -0.199644f, -0.597063f},
{ -0.365390f, 0.149640f, -0.918748f},
{ -0.940165f, 0.229971f, 0.251403f},
{ -0.887649f, 0.459094f, -0.036226f},
{ 0.020055f, -0.277845f, -0.960417f},
{ 0.401991f, 0.217983f, -0.889318f},
{ -0.889612f, -0.293157f, 0.350214f},
{ -0.924168f, 0.006459f, -0.381933f},
{ -0.192040f, 0.166440f, -0.967170f},
{ -0.636748f, 0.646524f, 0.420189f},
{ -0.612797f, 0.383968f, 0.690687f},
{ -0.206492f, 0.965494f, -0.158691f},
{ 0.437460f, -0.858324f, -0.268157f},
{ 0.874695f, -0.070206f, -0.479562f},
{ 0.450268f, -0.868230f, -0.208414f},
{ 0.873782f, 0.077522f, -0.480100f},
{ -0.995573f, 0.065203f, -0.067693f},
{ -0.236344f, 0.966755f, -0.097608f},
{ 0.330827f, 0.906480f, -0.262389f},
{ 0.641991f, 0.749079f, 0.163487f},
{ 0.563207f, 0.807621f, -0.174775f},
{ -0.171019f, 0.909208f, 0.379597f},
{ -0.515618f, 0.790076f, 0.331540f},
{ -0.260553f, 0.960687f, -0.095882f},
{ -0.704916f, -0.161091f, 0.690756f},
{ -0.876810f, 0.062204f, 0.476796f},
{ -0.181084f, -0.850807f, -0.493290f},
{ -0.466293f, -0.884552f, 0.011746f},
{ -0.034167f, -0.800984f, 0.597709f},
{ -0.779248f, -0.516678f, -0.354707f},
{ -0.994407f, -0.083036f, -0.065270f},
{ -0.921309f, -0.065840f, -0.383217f},
{ -0.769170f, 0.525768f, 0.363243f},
{ -0.998206f, 0.016211f, 0.057632f},
{ -0.923541f, -0.231239f, 0.305942f},
{ -0.725424f, 0.649258f, -0.228526f},
{ -0.982316f, 0.179958f, 0.051674f},
{ -0.600188f, 0.345197f, 0.721536f},
{ 0.011985f, 0.433614f, 0.901019f},
{ 0.650628f, 0.452171f, 0.610102f},
{ 0.815847f, 0.559475f, -0.146229f},
{ 0.499954f, 0.700772f, -0.508886f},
{ 0.149717f, 0.648874f, -0.746021f},
{ -0.570502f, 0.344414f, -0.745592f}};

static int[] FaceArray = new int[]{
0, 1, 2,
2, 1, 3,
4, 5, 6,
6, 5, 7,
102, 103, 37,
37, 103, 38,
103, 104, 38,
38, 104, 41,
27, 41, 105,
105, 41, 104,
102, 37, 101,
101, 37, 26,
44, 43, 38,
38, 43, 37,
43, 30, 37,
37, 30, 26,
27, 31, 41,
41, 31, 45,
41, 45, 38,
38, 45, 44,
44, 34, 43,
43, 34, 35,
35, 32, 43,
43, 32, 30,
33, 36, 31,
31, 36, 45,
36, 34, 45,
45, 34, 44,
49, 48, 46,
46, 48, 47,
47, 48, 50,
50, 48, 51,
53, 52, 49,
49, 52, 48,
48, 52, 51,
51, 52, 54,
53, 56, 52,
52, 56, 55,
55, 57, 52,
52, 57, 54,
56, 59, 55,
55, 59, 58,
58, 60, 55,
55, 60, 57,
62, 61, 59,
59, 61, 58,
58, 61, 60,
60, 61, 63,
62, 108, 61,
61, 109, 110,
111, 112, 61,
61, 113, 63,
63, 54, 60,
60, 54, 57,
59, 56, 62,
62, 56, 53,
53, 49, 114,
115, 49, 46,
11, 8, 12,
12, 8, 9,
13, 12, 10,
10, 12, 9,
14, 11, 15,
15, 11, 12,
12, 13, 15,
15, 13, 16,
16, 14, 15,
17, 18, 20,
20, 18, 21,
18, 19, 21,
21, 19, 22,
23, 20, 24,
24, 20, 21,
21, 22, 24,
24, 22, 25,
25, 23, 24,
67, 107, 64,
64, 107, 100,
69, 106, 67,
67, 106, 107,
106, 69, 116,
117, 69, 118,
100, 119, 64,
64, 120, 121,
64, 71, 67,
67, 71, 70,
122, 123, 64,
64, 124, 71,
125, 69, 126,
127, 69, 72,
69, 67, 72,
72, 67, 70,
70, 71, 73,
73, 71, 74,
128, 129, 71,
71, 130, 74,
72, 75, 131,
132, 75, 133,
70, 73, 72,
72, 73, 75,
79, 78, 76,
76, 78, 77,
79, 81, 78,
78, 81, 80,
78, 83, 77,
77, 83, 82,
78, 80, 83,
83, 80, 84,
82, 83, 85,
85, 83, 86,
84, 87, 83,
83, 87, 86,
85, 86, 88,
88, 86, 89,
87, 90, 86,
86, 90, 89,
89, 92, 88,
88, 92, 91,
89, 90, 92,
92, 90, 93,
91, 92, 134,
135, 92, 136,
93, 137, 92,
92, 138, 139,
93, 90, 84,
84, 90, 87,
88, 91, 85,
85, 91, 82,
76, 77, 140,
141, 77, 82,
142, 95, 143,
144, 95, 94,
145, 146, 95,
95, 147, 94,
148, 96, 149,
150, 96, 95,
95, 96, 151,
152, 96, 153,
154, 96, 155,
98, 97, 156,
157, 97, 158,
159, 160, 98,
98, 161, 97,
162, 99, 163,
164, 99, 98,
165, 166, 99,
99, 167, 98,
168, 99, 169,
65, 28, 100,
100, 28, 170,
40, 102, 171,
172, 102, 101,
103, 102, 39,
39, 102, 40,
104, 103, 42,
42, 103, 39,
105, 104, 29,
29, 104, 42,
68, 106, 173,
174, 106, 175,
106, 68, 107,
107, 68, 66,
107, 66, 100,
100, 66, 65, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 176  Texture Co-ords: 138  Normals: 108  Texture: CurrieBlock4.mtl Faces: 164 Smooth Groups: 11 sucess: 117 Doubles: 47 Redos needed: 68 Correct: 73