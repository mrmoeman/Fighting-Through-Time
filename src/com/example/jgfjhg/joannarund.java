package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannarund {

static String TextureName = "joannarun4.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.306419f, 0.594440f, 0.489390f,
 0.887630f, 0.572343f, 0.409150f,
 0.987968f, 0.770724f, 0.991292f,
 0.406066f, 0.783500f, 1.078404f,
 0.285189f, 0.064910f, 0.343812f,
 0.864276f, 0.059379f, 0.248414f,
 1.228514f, 0.068800f, 2.341117f,
 0.648252f, 0.068905f, 2.440031f,
 0.108238f, 3.771301f, -0.082057f,
 0.877082f, 3.795261f, -0.043355f,
 1.008872f, 4.011203f, 0.791572f,
 0.258443f, 4.019429f, 0.876407f,
 0.504724f, 2.685450f, 1.166932f,
 1.013955f, 2.674927f, 1.098681f,
 0.918604f, 2.592006f, 0.494414f,
 0.400553f, 2.607701f, 0.530821f,
 1.183839f, 8.476277f, 1.217025f,
 0.666516f, 6.676987f, 1.066880f,
 0.219501f, 7.687292f, 0.545378f,
 0.541353f, 8.416731f, 0.815851f,
 0.502746f, 8.133902f, 2.265727f,
 1.231868f, 7.259408f, 0.604014f,
 0.967782f, 7.655677f, -0.034045f,
 0.079931f, 5.883666f, -0.120548f,
 0.652097f, 5.748451f, 0.312258f,
 0.526078f, 5.417710f, 0.792766f,
 -0.204621f, 5.170827f, 0.739078f,
 0.510025f, 9.426234f, 2.389314f,
 1.154638f, 9.192794f, 2.046705f,
 1.157435f, 8.338659f, 1.959998f,
 0.925705f, 7.940594f, 1.455642f,
 1.885545f, 7.207411f, 0.578478f,
 0.560545f, 9.540815f, 0.968355f,
 1.181557f, 9.253080f, 1.289196f,
 0.831106f, 8.136487f, 0.963644f,
 1.869028f, 7.236024f, 0.159974f,
 1.817999f, 7.946969f, 0.697222f,
 1.741789f, 8.069158f, 0.245592f,
 1.808966f, 6.261754f, 0.281628f,
 2.192068f, 6.309534f, 0.247005f,
 2.218980f, 6.128128f, -0.056746f,
 1.857141f, 6.058000f, -0.057954f,
 0.363931f, 7.724557f, 1.720493f,
 0.565503f, 8.037849f, 0.831104f,
 2.026509f, 6.099144f, 2.119576f,
 2.580644f, 6.248563f, 1.686207f,
 2.676451f, 5.781504f, 1.486237f,
 2.223915f, 5.413013f, 1.712732f,
 0.344710f, 3.099533f, -1.080243f,
 1.392480f, 3.830425f, 0.965049f,
 1.451664f, 3.483847f, -0.196765f,
 -0.162043f, 3.582314f, 0.897278f,
 -0.017534f, 7.914616f, 1.815844f,
 0.449745f, 7.381271f, 1.976334f,
 -0.247148f, 7.782407f, 2.191712f,
 0.281266f, 7.269672f, 2.344094f,
 -0.109038f, 9.192220f, 2.002012f,
 -0.082395f, 9.252299f, 1.245253f,
 -0.825639f, 5.412948f, 0.352809f,
 -0.636503f, 5.747955f, -0.113978f,
 -0.113703f, 6.954587f, 1.408800f,
 -0.584080f, 7.198120f, 1.541739f,
 -0.115051f, 8.001477f, 1.201425f,
 0.017331f, 7.826976f, 1.625435f,
 -0.106035f, 8.338285f, 1.915106f,
 -0.079832f, 8.475569f, 1.173069f,
 2.338876f, 6.919292f, 0.996001f,
 2.634607f, 6.463279f, 1.613012f,
 2.290994f, 7.303399f, 1.604098f,
 2.506944f, 6.984044f, 1.951896f,
 1.017134f, 6.574325f, 2.261782f,
 1.008281f, 6.356027f, 2.632454f,
 1.166619f, 6.634355f, 2.815650f,
 1.184752f, 6.840496f, 2.494835f,
 -1.295673f, 4.130891f, 0.698281f,
 -1.248031f, 3.522201f, -0.706876f,
 -0.292261f, 1.794316f, -0.728954f,
 -0.867792f, 1.844850f, -0.849677f,
 -0.993427f, 1.568889f, -0.305244f,
 -0.415949f, 1.543772f, -0.193954f,
 -0.246488f, 1.274038f, -1.085454f,
 -0.825829f, 1.275822f, -1.191846f,
 -1.164011f, 0.491558f, 0.753078f,
 -0.583785f, 0.492518f, 0.853066f,
 -0.115448f, 3.652630f, -0.266849f,
 -0.875089f, 3.770262f, -0.283178f,
 -0.993714f, 4.233274f, 0.447419f,
 -0.249240f, 4.181354f, 0.564151f,
 -0.665435f, 2.920647f, 1.193625f,
 -1.170694f, 2.945840f, 1.103850f,
 -1.074751f, 2.994000f, 0.623278f,
 -0.560498f, 2.971939f, 0.680825f,
 2.191225f, 11.972795f, 2.231869f,
 1.706714f, 11.615005f, 3.214673f,
 2.552517f, 4.843362f, 0.629912f,
 2.038256f, 4.615408f, 1.539540f,
 0.400553f, 2.607701f, 0.530821f,
 0.400553f, 2.607701f, 0.530821f,
 0.108238f, 3.771301f, -0.082057f,
 0.306419f, 0.594440f, 0.489390f,
 0.285189f, 0.064910f, 0.343812f,
 0.285189f, 0.064910f, 0.343812f,
 0.306419f, 0.594440f, 0.489390f,
 0.285189f, 0.064910f, 0.343812f,
 0.406066f, 0.783500f, 1.078404f,
 0.406066f, 0.783500f, 1.078404f,
 0.285189f, 0.064910f, 0.343812f,
 0.648252f, 0.068905f, 2.440031f,
 0.406066f, 0.783500f, 1.078404f,
 0.648252f, 0.068905f, 2.440031f,
 0.648252f, 0.068905f, 2.440031f,
 0.987968f, 0.770724f, 0.991292f,
 0.987968f, 0.770724f, 0.991292f,
 0.987968f, 0.770724f, 0.991292f,
 0.987968f, 0.770724f, 0.991292f,
 0.887630f, 0.572343f, 0.409150f,
 0.887630f, 0.572343f, 0.409150f,
 0.400553f, 2.607701f, 0.530821f,
 0.400553f, 2.607701f, 0.530821f,
 0.887630f, 0.572343f, 0.409150f,
 0.306419f, 0.594440f, 0.489390f,
 0.925705f, 7.940594f, 1.455642f,
 0.925705f, 7.940594f, 1.455642f,
 1.231868f, 7.259408f, 0.604014f,
 1.231868f, 7.259408f, 0.604014f,
 0.925705f, 7.940594f, 1.455642f,
 0.925705f, 7.940594f, 1.455642f,
 0.831106f, 8.136487f, 0.963644f,
 0.831106f, 8.136487f, 0.963644f,
 0.831106f, 8.136487f, 0.963644f,
 0.925705f, 7.940594f, 1.455642f,
 0.925705f, 7.940594f, 1.455642f,
 1.231868f, 7.259408f, 0.604014f,
 0.967782f, 7.655677f, -0.034045f,
 1.808966f, 6.261754f, 0.281628f,
 1.808966f, 6.261754f, 0.281628f,
 0.967782f, 7.655677f, -0.034045f,
 0.967782f, 7.655677f, -0.034045f,
 1.231868f, 7.259408f, 0.604014f,
 2.026509f, 6.099144f, 2.119576f,
 2.026509f, 6.099144f, 2.119576f,
 1.808966f, 6.261754f, 0.281628f,
 2.223915f, 5.413013f, 1.712732f,
 2.223915f, 5.413013f, 1.712732f,
 1.808966f, 6.261754f, 0.281628f,
 0.967782f, 7.655677f, -0.034045f,
 0.967782f, 7.655677f, -0.034045f,
 0.831106f, 8.136487f, 0.963644f,
 0.831106f, 8.136487f, 0.963644f,
 2.223915f, 5.413013f, 1.712732f,
 0.344710f, 3.099533f, -1.080243f,
 1.451664f, 3.483847f, -0.196765f,
 -0.162043f, 3.582314f, 0.897278f,
 -0.162043f, 3.582314f, 0.897278f,
 1.451664f, 3.483847f, -0.196765f,
 1.392480f, 3.830425f, 0.965049f,
 0.510025f, 9.426234f, 2.389314f,
 0.560545f, 9.540815f, 0.968355f,
 0.560545f, 9.540815f, 0.968355f,
 0.666516f, 6.676987f, 1.066880f,
 0.017331f, 7.826976f, 1.625435f,
 0.666516f, 6.676987f, 1.066880f,
 0.363931f, 7.724557f, 1.720493f,
 0.017331f, 7.826976f, 1.625435f,
 -0.113703f, 6.954587f, 1.408800f,
 -0.113703f, 6.954587f, 1.408800f,
 0.363931f, 7.724557f, 1.720493f,
 0.502746f, 8.133902f, 2.265727f,
 0.017331f, 7.826976f, 1.625435f,
 0.502746f, 8.133902f, 2.265727f,
 0.017331f, 7.826976f, 1.625435f,
 0.565503f, 8.037849f, 0.831104f,
 -0.115051f, 8.001477f, 1.201425f,
 0.541353f, 8.416731f, 0.815851f,
 -0.115051f, 8.001477f, 1.201425f,
 0.541353f, 8.416731f, 0.815851f,
 -0.115051f, 8.001477f, 1.201425f,
 0.017331f, 7.826976f, 1.625435f,
 0.017331f, 7.826976f, 1.625435f,
 -0.204621f, 5.170827f, 0.739078f,
 0.666516f, 6.676987f, 1.066880f,
 0.666516f, 6.676987f, 1.066880f,
 -0.113703f, 6.954587f, 1.408800f,
 1.017134f, 6.574325f, 2.261782f,
 -0.584080f, 7.198120f, 1.541739f,
 1.017134f, 6.574325f, 2.261782f,
 -0.584080f, 7.198120f, 1.541739f,
 -0.584080f, 7.198120f, 1.541739f,
 -0.113703f, 6.954587f, 1.408800f,
 2.338876f, 6.919292f, 0.996001f,
 2.338876f, 6.919292f, 0.996001f,
 2.634607f, 6.463279f, 1.613012f,
 1.017134f, 6.574325f, 2.261782f,
 2.634607f, 6.463279f, 1.613012f,
 1.017134f, 6.574325f, 2.261782f,
 -0.584080f, 7.198120f, 1.541739f,
 -0.584080f, 7.198120f, 1.541739f,
 -0.115051f, 8.001477f, 1.201425f,
 0.219501f, 7.687292f, 0.545378f,
 -0.115051f, 8.001477f, 1.201425f,
 0.565503f, 8.037849f, 0.831104f,
 0.219501f, 7.687292f, 0.545378f,
 2.634607f, 6.463279f, 1.613012f,
 0.541353f, 8.416731f, 0.815851f,
 0.560545f, 9.540815f, 0.968355f,
 0.541353f, 8.416731f, 0.815851f,
 0.510025f, 9.426234f, 2.389314f,
 0.502746f, 8.133902f, 2.265727f,
 0.502746f, 8.133902f, 2.265727f,
 0.079931f, 5.883666f, -0.120548f,
 0.219501f, 7.687292f, 0.545378f,
 0.079931f, 5.883666f, -0.120548f,
 0.344710f, 3.099533f, -1.080243f,
 0.079931f, 5.883666f, -0.120548f,
 0.079931f, 5.883666f, -0.120548f,
 -0.162043f, 3.582314f, 0.897278f,
 -0.204621f, 5.170827f, 0.739078f,
 -0.204621f, 5.170827f, 0.739078f,
 0.344710f, 3.099533f, -1.080243f,
 -0.162043f, 3.582314f, 0.897278f,
 -1.248031f, 3.522201f, -0.706876f,
 -0.162043f, 3.582314f, 0.897278f,
 -1.295673f, 4.130891f, 0.698281f,
 -1.248031f, 3.522201f, -0.706876f,
 -0.560498f, 2.971939f, 0.680825f,
 -0.115448f, 3.652630f, -0.266849f,
 -0.560498f, 2.971939f, 0.680825f,
 -0.292261f, 1.794316f, -0.728954f,
 -0.246488f, 1.274038f, -1.085454f,
 -0.246488f, 1.274038f, -1.085454f,
 -0.292261f, 1.794316f, -0.728954f,
 -0.415949f, 1.543772f, -0.193954f,
 -0.246488f, 1.274038f, -1.085454f,
 -0.415949f, 1.543772f, -0.193954f,
 -0.583785f, 0.492518f, 0.853066f,
 -0.246488f, 1.274038f, -1.085454f,
 -0.415949f, 1.543772f, -0.193954f,
 -0.583785f, 0.492518f, 0.853066f,
 -0.583785f, 0.492518f, 0.853066f,
 -0.993427f, 1.568889f, -0.305244f,
 -0.993427f, 1.568889f, -0.305244f,
 -0.993427f, 1.568889f, -0.305244f,
 -0.867792f, 1.844850f, -0.849677f,
 -0.993427f, 1.568889f, -0.305244f,
 -0.560498f, 2.971939f, 0.680825f,
 -0.867792f, 1.844850f, -0.849677f,
 -0.560498f, 2.971939f, 0.680825f,
 -0.292261f, 1.794316f, -0.728954f,
 -0.867792f, 1.844850f, -0.849677f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.603460f, -0.790066f, -0.107853f},
{ 0.514420f, -0.803997f, -0.298263f},
{ -0.503299f, -0.577291f, 0.642981f},
{ 0.686094f, -0.580578f, 0.438411f},
{ -0.681861f, 0.029609f, 0.730882f},
{ -0.595983f, 0.027189f, 0.802536f},
{ 0.820656f, 0.134669f, 0.555327f},
{ 0.823619f, 0.028997f, 0.566402f},
{ -0.784785f, -0.431483f, -0.444899f},
{ -0.870672f, -0.151714f, -0.467881f},
{ 0.738139f, -0.088779f, -0.668782f},
{ 0.685053f, -0.302826f, -0.662570f},
{ -0.766753f, 0.077759f, -0.637216f},
{ 0.542376f, 0.061971f, -0.837847f},
{ 0.946689f, 0.206715f, 0.247080f},
{ -0.817190f, 0.205641f, 0.538435f},
{ 0.742232f, 0.209526f, 0.636545f},
{ 0.542517f, -0.096839f, 0.834444f},
{ 0.260322f, 0.759486f, -0.596166f},
{ 0.544166f, 0.220948f, -0.809361f},
{ -0.024891f, 0.641799f, 0.766469f},
{ 0.730568f, 0.454838f, 0.509306f},
{ 0.029119f, 0.738864f, -0.673225f},
{ 0.798058f, 0.430126f, -0.422013f},
{ 0.376324f, 0.050321f, 0.925121f},
{ 0.878058f, 0.099792f, -0.468034f},
{ 0.629328f, -0.654898f, 0.418396f},
{ -0.154612f, 0.325749f, -0.932729f},
{ 0.146259f, 0.902505f, -0.405083f},
{ 0.724715f, -0.394954f, 0.564624f},
{ 0.425468f, -0.387259f, 0.817929f},
{ 0.163774f, -0.619062f, 0.768076f},
{ 0.026813f, -0.388674f, 0.920985f},
{ 0.803855f, -0.318411f, 0.502425f},
{ -0.246563f, 0.402786f, -0.881459f},
{ -0.028496f, 0.079187f, -0.996452f},
{ 0.899337f, -0.095607f, -0.426675f},
{ -0.233788f, 0.109888f, 0.966058f},
{ -0.828573f, 0.270976f, 0.489939f},
{ -0.502539f, -0.860765f, 0.080862f},
{ 0.412323f, 0.877167f, 0.246106f},
{ 0.844966f, -0.493037f, -0.207237f},
{ -0.913191f, -0.168139f, 0.371230f},
{ -0.340219f, -0.633656f, -0.694789f},
{ 0.531986f, -0.467027f, -0.706312f},
{ 0.748908f, 0.652957f, 0.113067f},
{ -0.681350f, 0.397118f, -0.614865f},
{ 0.766360f, -0.187809f, 0.614346f},
{ 0.845805f, -0.271827f, -0.459046f},
{ 0.041744f, 0.366481f, -0.929489f},
{ 0.175627f, -0.350951f, -0.919777f},
{ -0.139745f, -0.655727f, 0.741952f},
{ 0.591379f, 0.799561f, -0.104749f},
{ -0.723040f, 0.255583f, 0.641787f},
{ 0.715005f, 0.472370f, -0.515398f},
{ -0.482694f, -0.023071f, 0.875485f},
{ -0.765095f, 0.458777f, 0.451833f},
{ -0.769757f, 0.437842f, -0.464509f},
{ -0.783700f, 0.277891f, 0.555509f},
{ 0.040621f, -0.731964f, 0.680131f},
{ -0.568684f, 0.511323f, -0.644319f},
{ -0.993391f, -0.003100f, -0.114739f},
{ -0.847875f, 0.359916f, -0.389318f},
{ -0.269983f, -0.518770f, 0.811164f},
{ -0.868396f, -0.184596f, 0.460232f},
{ -0.860502f, 0.004320f, -0.509428f},
{ -0.309598f, -0.252194f, -0.916814f},
{ -0.150495f, 0.966348f, -0.208619f},
{ 0.304372f, -0.946030f, -0.111288f},
{ 0.627836f, 0.143183f, 0.765062f},
{ -0.170743f, -0.550809f, -0.816980f},
{ -0.195689f, -0.903616f, 0.381030f},
{ 0.227231f, -0.104944f, 0.968170f},
{ 0.070436f, 0.986667f, 0.146723f},
{ -0.898932f, -0.094788f, 0.427711f},
{ -0.640548f, -0.243180f, -0.728397f},
{ 0.583727f, -0.670936f, -0.457283f},
{ 0.450038f, -0.824079f, 0.344035f},
{ -0.414404f, -0.657752f, -0.628992f},
{ -0.549710f, -0.817187f, 0.173278f},
{ 0.578252f, 0.178653f, 0.796058f},
{ -0.735799f, 0.389018f, 0.554315f},
{ 0.289932f, -0.232823f, 0.928296f},
{ -0.638198f, -0.209723f, 0.740756f},
{ 0.652290f, -0.726657f, -0.215609f},
{ 0.970373f, -0.056871f, -0.234822f},
{ -0.831509f, 0.155194f, -0.533393f},
{ -0.669758f, -0.510414f, -0.539353f},
{ 0.752454f, 0.534743f, -0.384530f},
{ -0.483503f, 0.596491f, -0.640643f},
{ -0.972652f, -0.040431f, 0.228723f},
{ 0.801069f, -0.054516f, 0.596084f},
{ 0.902921f, -0.050159f, 0.426869f},
{ 0.900829f, -0.052016f, 0.431048f},
{ 0.878999f, -0.070230f, 0.471623f},
{ 0.875903f, -0.072663f, 0.476984f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannarun4.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117