package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnar {

static String TextureName = "Ragnar.mtl";

static int Vertices = 234;

static int VertTexts = 166;

static int Normals = 119;

static int Faces = 166;

static int FacesB = 0;

static int SmoothGroups = 15;

static float VertArray[] = new float[]{
 -1.527782f, 13.731676f, 3.225036f,
 -1.528221f, 12.538260f, 3.802204f,
 -1.193741f, 10.367982f, 3.299063f,
 -0.000000f, 8.695337f, 3.371111f,
 -0.000000f, 12.389188f, 4.370791f,
 -0.000000f, 14.573501f, 3.436530f,
 -1.898490f, 12.542546f, 2.169059f,
 -1.845192f, 13.634741f, 1.100511f,
 -0.000000f, 14.487634f, 0.814800f,
 0.000000f, 7.578063f, 0.578906f,
 -1.370756f, 9.649290f, 1.587768f,
 -2.198011f, 5.821984f, 1.615667f,
 -2.091303f, 6.444940f, -1.221656f,
 -3.610614f, 12.198889f, 2.746441f,
 -4.639845f, 11.174901f, -1.815191f,
 -0.000000f, 12.996850f, 3.461546f,
 0.000000f, 12.305614f, -2.575680f,
 0.000000f, 4.913814f, -1.788548f,
 0.000000f, 4.459158f, 2.552160f,
 -5.016546f, 13.433216f, 0.302846f,
 0.000000f, 15.230102f, 0.325574f,
 -1.645508f, 7.995466f, 0.991992f,
 0.000000f, 7.837374f, 1.434661f,
 0.000000f, 8.260743f, -1.582486f,
 -1.623636f, 8.242557f, -1.011043f,
 -2.098356f, 8.273331f, 0.074852f,
 -2.807282f, 5.391334f, 0.147079f,
 0.000000f, 3.597899f, -0.245763f,
 -6.006288f, 11.592669f, 0.597844f,
 -6.006288f, 9.379856f, 0.597844f,
 -6.006288f, 9.379856f, -1.254187f,
 -6.006288f, 11.057482f, -1.615665f,
 -8.961815f, 9.293842f, 0.439129f,
 -8.629532f, 7.988975f, 0.439129f,
 -8.629532f, 7.988975f, -0.770257f,
 -8.961815f, 9.293842f, -0.770257f,
 -3.099597f, 12.428524f, -0.759146f,
 -3.099597f, 13.106553f, 1.454361f,
 -2.797040f, 10.891320f, -0.397668f,
 -2.863395f, 10.891320f, 1.454361f,
 -1.061065f, 3.435034f, -0.035356f,
 -1.061065f, 3.435034f, 1.939873f,
 -2.172918f, 3.435034f, 0.316890f,
 -2.172918f, 3.435034f, 1.820749f,
 -1.030362f, 0.942506f, -1.176618f,
 -0.889386f, 0.942506f, 3.105631f,
 -2.384410f, 0.942506f, -1.014587f,
 -2.384410f, 0.942506f, 3.050836f,
 -0.431270f, 6.031835f, -0.313923f,
 -1.445672f, 6.237138f, -0.243330f,
 -1.538913f, 6.256075f, 0.901873f,
 -0.431085f, 6.031902f, 0.916541f,
 -2.164400f, 2.133514f, 0.688738f,
 -2.197294f, 1.772103f, -0.555665f,
 -1.104517f, 1.772103f, -0.794620f,
 -1.071623f, 2.133514f, 0.769548f,
 1.527782f, 13.731676f, 3.225036f,
 1.528221f, 12.538260f, 3.802204f,
 1.193741f, 10.367982f, 3.299063f,
 1.898490f, 12.542546f, 2.169059f,
 1.845192f, 13.634741f, 1.100511f,
 1.370756f, 9.649290f, 1.587768f,
 2.198011f, 5.821984f, 1.615667f,
 2.091303f, 6.444940f, -1.221656f,
 3.610614f, 12.198889f, 2.746441f,
 4.639845f, 11.174901f, -1.815191f,
 5.016546f, 13.433216f, 0.302846f,
 1.645508f, 7.995466f, 0.991992f,
 1.623636f, 8.242557f, -1.011043f,
 2.098356f, 8.273331f, 0.074852f,
 2.807282f, 5.391334f, 0.147079f,
 6.006288f, 11.592669f, 0.597844f,
 6.006288f, 9.379856f, 0.597844f,
 6.006288f, 9.379856f, -1.254187f,
 6.006288f, 11.057482f, -1.615665f,
 8.961815f, 9.293842f, 0.439129f,
 8.629532f, 7.988975f, 0.439129f,
 8.629532f, 7.988975f, -0.770257f,
 8.961815f, 9.293842f, -0.770257f,
 3.099597f, 12.428524f, -0.759146f,
 3.099597f, 13.106553f, 1.454361f,
 2.797040f, 10.891320f, -0.397668f,
 2.863395f, 10.891320f, 1.454361f,
 1.061065f, 3.435034f, -0.035356f,
 1.061065f, 3.435034f, 1.939873f,
 2.172918f, 3.435034f, 0.316890f,
 2.172918f, 3.435034f, 1.820749f,
 1.030362f, 0.942506f, -1.176618f,
 0.889386f, 0.942506f, 3.105631f,
 2.384410f, 0.942506f, -1.014587f,
 2.384410f, 0.942506f, 3.050836f,
 0.422600f, 6.037137f, -0.313923f,
 1.461048f, 6.232715f, -0.243330f,
 1.556507f, 6.250756f, 0.901873f,
 0.422423f, 6.037215f, 0.916541f,
 2.164400f, 2.133514f, 0.688738f,
 2.197294f, 1.772103f, -0.555665f,
 1.104517f, 1.772103f, -0.794620f,
 1.071623f, 2.133514f, 0.769548f,
 2.729439f, 12.729066f, 2.712888f,
 3.848652f, 16.165028f, 2.670985f,
 -2.771659f, 12.729066f, 2.712888f,
 -3.890872f, 16.165028f, 2.670985f,
 7.149706f, 9.786416f, -5.944674f,
 10.678848f, 7.088961f, -6.115575f,
 7.362930f, 9.694729f, 3.855385f,
 10.892073f, 6.997274f, 3.684481f,
 -6.436428f, 11.339140f, 3.526101f,
 -11.401723f, 7.963795f, 3.526101f,
 -11.401723f, 7.963795f, -3.038356f,
 -6.436428f, 11.339140f, -3.038356f,
 -5.016546f, 13.433216f, 0.302846f,
 0.000000f, 15.230102f, 0.325574f,
 0.000000f, 15.230102f, 0.325574f,
 -2.098356f, 8.273331f, 0.074852f,
 -2.098356f, 8.273331f, 0.074852f,
 -5.016546f, 13.433216f, 0.302846f,
 -2.807282f, 5.391334f, 0.147079f,
 -2.098356f, 8.273331f, 0.074852f,
 -2.098356f, 8.273331f, 0.074852f,
 -2.807282f, 5.391334f, 0.147079f,
 0.000000f, 3.597899f, -0.245763f,
 -8.629532f, 7.988975f, -0.770257f,
 -8.961815f, 9.293842f, -0.770257f,
 -8.961815f, 9.293842f, -0.770257f,
 -8.629532f, 7.988975f, -0.770257f,
 -8.629532f, 7.988975f, -0.770257f,
 -6.006288f, 9.379856f, -1.254187f,
 -8.961815f, 9.293842f, -0.770257f,
 -8.961815f, 9.293842f, -0.770257f,
 -6.006288f, 9.379856f, -1.254187f,
 -2.797040f, 10.891320f, -0.397668f,
 -2.797040f, 10.891320f, -0.397668f,
 -1.061065f, 3.435034f, -0.035356f,
 -1.061065f, 3.435034f, -0.035356f,
 -1.104517f, 1.772103f, -0.794620f,
 -0.431270f, 6.031835f, -0.313923f,
 -1.061065f, 3.435034f, -0.035356f,
 -1.061065f, 3.435034f, -0.035356f,
 -2.197294f, 1.772103f, -0.555665f,
 -2.164400f, 2.133514f, 0.688738f,
 -2.164400f, 2.133514f, 0.688738f,
 -1.030362f, 0.942506f, -1.176618f,
 -1.104517f, 1.772103f, -0.794620f,
 -1.104517f, 1.772103f, -0.794620f,
 -2.197294f, 1.772103f, -0.555665f,
 -0.889386f, 0.942506f, 3.105631f,
 -1.030362f, 0.942506f, -1.176618f,
 -1.071623f, 2.133514f, 0.769548f,
 -1.071623f, 2.133514f, 0.769548f,
 -1.030362f, 0.942506f, -1.176618f,
 -1.104517f, 1.772103f, -0.794620f,
 -2.164400f, 2.133514f, 0.688738f,
 -1.071623f, 2.133514f, 0.769548f,
 -1.071623f, 2.133514f, 0.769548f,
 -0.889386f, 0.942506f, 3.105631f,
 -0.000000f, 8.695337f, 3.371111f,
 -0.000000f, 12.389188f, 4.370791f,
 -0.000000f, 12.389188f, 4.370791f,
 -0.000000f, 12.389188f, 4.370791f,
 -0.000000f, 12.389188f, 4.370791f,
 -0.000000f, 14.573501f, 3.436530f,
 -0.000000f, 14.487634f, 0.814800f,
 -0.000000f, 14.487634f, 0.814800f,
 -0.000000f, 14.573501f, 3.436530f,
 -0.000000f, 8.695337f, 3.371111f,
 -0.000000f, 8.695337f, 3.371111f,
 0.000000f, 7.578063f, 0.578906f,
 0.000000f, 15.230102f, 0.325574f,
 0.000000f, 12.305614f, -2.575680f,
 0.000000f, 12.305614f, -2.575680f,
 5.016546f, 13.433216f, 0.302846f,
 0.000000f, 15.230102f, 0.325574f,
 0.000000f, 15.230102f, 0.325574f,
 -0.000000f, 12.996850f, 3.461546f,
 0.000000f, 8.260743f, -1.582486f,
 0.000000f, 12.305614f, -2.575680f,
 0.000000f, 12.305614f, -2.575680f,
 0.000000f, 7.837374f, 1.434661f,
 0.000000f, 7.837374f, 1.434661f,
 0.000000f, 4.459158f, 2.552160f,
 5.016546f, 13.433216f, 0.302846f,
 2.098356f, 8.273331f, 0.074852f,
 2.098356f, 8.273331f, 0.074852f,
 0.000000f, 8.260743f, -1.582486f,
 0.000000f, 8.260743f, -1.582486f,
 0.000000f, 4.913814f, -1.788548f,
 -0.000000f, 12.996850f, 3.461546f,
 0.000000f, 7.837374f, 1.434661f,
 0.000000f, 7.837374f, 1.434661f,
 2.807282f, 5.391334f, 0.147079f,
 2.098356f, 8.273331f, 0.074852f,
 2.098356f, 8.273331f, 0.074852f,
 0.000000f, 4.459158f, 2.552160f,
 0.000000f, 3.597899f, -0.245763f,
 0.000000f, 3.597899f, -0.245763f,
 2.807282f, 5.391334f, 0.147079f,
 0.000000f, 3.597899f, -0.245763f,
 0.000000f, 4.913814f, -1.788548f,
 0.000000f, 4.913814f, -1.788548f,
 8.961815f, 9.293842f, -0.770257f,
 8.961815f, 9.293842f, -0.770257f,
 8.629532f, 7.988975f, -0.770257f,
 8.629532f, 7.988975f, -0.770257f,
 8.629532f, 7.988975f, -0.770257f,
 6.006288f, 9.379856f, -1.254187f,
 8.961815f, 9.293842f, -0.770257f,
 8.961815f, 9.293842f, -0.770257f,
 2.797040f, 10.891320f, -0.397668f,
 2.797040f, 10.891320f, -0.397668f,
 6.006288f, 9.379856f, -1.254187f,
 1.104517f, 1.772103f, -0.794620f,
 1.061065f, 3.435034f, -0.035356f,
 1.061065f, 3.435034f, -0.035356f,
 1.061065f, 3.435034f, -0.035356f,
 1.061065f, 3.435034f, -0.035356f,
 0.422600f, 6.037137f, -0.313923f,
 2.164400f, 2.133514f, 0.688738f,
 2.164400f, 2.133514f, 0.688738f,
 2.197294f, 1.772103f, -0.555665f,
 2.197294f, 1.772103f, -0.555665f,
 1.104517f, 1.772103f, -0.794620f,
 1.104517f, 1.772103f, -0.794620f,
 1.030362f, 0.942506f, -1.176618f,
 1.104517f, 1.772103f, -0.794620f,
 1.030362f, 0.942506f, -1.176618f,
 1.071623f, 2.133514f, 0.769548f,
 1.071623f, 2.133514f, 0.769548f,
 1.030362f, 0.942506f, -1.176618f,
 0.889386f, 0.942506f, 3.105631f,
 2.164400f, 2.133514f, 0.688738f,
 1.071623f, 2.133514f, 0.769548f,
 1.071623f, 2.133514f, 0.769548f,
 0.889386f, 0.942506f, 3.105631f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.052358f, 0.071475f,
 0.260421f, 0.003702f,
 0.052358f, 0.404592f,
 0.260421f, 0.472366f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ 0.000000f, -0.756037f, 0.654529f},
{ 0.000000f, -0.002159f, 0.999998f},
{ -0.739382f, -0.320775f, 0.591961f},
{ -0.724370f, -0.039218f, 0.688295f},
{ -0.636011f, 0.664688f, 0.392020f},
{ 0.000000f, 0.894425f, 0.447219f},
{ -0.980730f, -0.048200f, 0.189331f},
{ -0.596974f, 0.800530f, 0.052664f},
{ 0.000000f, 0.999999f, -0.001344f},
{ -0.835174f, -0.490730f, 0.248331f},
{ 0.000000f, -0.928432f, 0.371503f},
{ 0.000000f, 0.975667f, -0.219257f},
{ -0.000000f, 0.342239f, -0.939613f},
{ -0.824024f, 0.561579f, -0.074924f},
{ -0.710667f, -0.078719f, -0.699111f},
{ -0.576835f, 0.049397f, 0.815366f},
{ 0.000000f, 0.210890f, 0.977510f},
{ -0.000000f, -0.097185f, -0.995266f},
{ -0.344701f, -0.300738f, -0.889234f},
{ -0.910407f, -0.392290f, 0.131406f},
{ 0.000000f, -0.537735f, 0.843114f},
{ -0.000000f, -0.180012f, 0.983665f},
{ -0.636457f, -0.195249f, 0.746190f},
{ -0.539639f, -0.260996f, 0.800419f},
{ -0.601950f, -0.057830f, -0.796437f},
{ -0.874474f, -0.482452f, -0.050349f},
{ -0.000000f, -0.436465f, -0.899721f},
{ -0.000000f, -0.986045f, -0.166478f},
{ -0.573739f, 0.389160f, 0.720679f},
{ -0.658942f, 0.467881f, -0.588968f},
{ -0.002921f, -0.748997f, 0.662567f},
{ 0.013570f, -0.816528f, -0.577146f},
{ 0.319496f, -0.701206f, -0.637364f},
{ -0.262285f, 0.572059f, -0.777146f},
{ -0.505430f, 0.696149f, 0.509822f},
{ -0.173947f, 0.729003f, -0.662040f},
{ -0.508874f, 0.674244f, 0.535204f},
{ 0.213239f, -0.639637f, 0.738508f},
{ 0.485082f, -0.709712f, -0.510886f},
{ 0.013138f, -0.531281f, 0.847094f},
{ -0.876263f, 0.170767f, -0.450558f},
{ -0.708428f, 0.087062f, -0.700393f},
{ 0.758825f, -0.074417f, -0.647029f},
{ 0.694499f, -0.241153f, -0.677877f},
{ -0.756402f, 0.392891f, 0.522966f},
{ -0.752740f, 0.061620f, 0.655427f},
{ 0.704271f, -0.138101f, 0.696369f},
{ 0.860568f, -0.008036f, 0.509273f},
{ 0.946798f, 0.210077f, 0.243807f},
{ 0.586633f, 0.370453f, -0.720157f},
{ -0.641700f, 0.408691f, -0.648994f},
{ -0.931250f, 0.252575f, 0.262640f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ -0.872962f, 0.339260f, -0.350485f},
{ -0.375474f, 0.839126f, 0.393556f},
{ 0.851479f, 0.271126f, -0.448860f},
{ 0.364897f, 0.840678f, 0.400138f},
{ 0.739382f, -0.320775f, 0.591961f},
{ 0.724370f, -0.039218f, 0.688295f},
{ 0.636011f, 0.664688f, 0.392020f},
{ 0.596974f, 0.800530f, 0.052664f},
{ 0.980730f, -0.048200f, 0.189331f},
{ 0.835174f, -0.490730f, 0.248331f},
{ 0.824024f, 0.561578f, -0.074924f},
{ 0.710667f, -0.078719f, -0.699111f},
{ 0.576835f, 0.049397f, 0.815366f},
{ 0.344701f, -0.300738f, -0.889234f},
{ 0.910407f, -0.392290f, 0.131406f},
{ 0.539639f, -0.260996f, 0.800419f},
{ 0.636457f, -0.195249f, 0.746190f},
{ 0.874474f, -0.482452f, -0.050349f},
{ 0.601950f, -0.057830f, -0.796437f},
{ 0.573739f, 0.389160f, 0.720679f},
{ 0.002921f, -0.748997f, 0.662567f},
{ 0.658942f, 0.467881f, -0.588968f},
{ -0.013570f, -0.816528f, -0.577146f},
{ 0.262285f, 0.572059f, -0.777146f},
{ -0.319496f, -0.701206f, -0.637364f},
{ 0.508874f, 0.674244f, 0.535204f},
{ 0.505430f, 0.696149f, 0.509822f},
{ 0.173947f, 0.729003f, -0.662040f},
{ -0.213239f, -0.639637f, 0.738508f},
{ -0.485082f, -0.709712f, -0.510886f},
{ -0.013138f, -0.531281f, 0.847094f},
{ -0.691508f, -0.242517f, -0.680443f},
{ 0.700493f, 0.080970f, -0.709051f},
{ -0.758547f, -0.076905f, -0.647065f},
{ 0.876375f, 0.167428f, -0.451592f},
{ 0.752081f, 0.390563f, 0.530882f},
{ 0.751917f, 0.058605f, 0.656648f},
{ -0.857393f, -0.008013f, 0.514600f},
{ -0.703837f, -0.138710f, 0.696687f},
{ -0.586634f, 0.370453f, -0.720157f},
{ -0.946798f, 0.210077f, 0.243807f},
{ 0.641700f, 0.408691f, -0.648994f},
{ 0.931250f, 0.252575f, 0.262640f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.000000f, -1.000000f, 0.000000f},
{ 0.375474f, 0.839126f, 0.393556f},
{ 0.872962f, 0.339260f, -0.350485f},
{ -0.851479f, 0.271126f, -0.448860f},
{ -0.364897f, 0.840678f, 0.400138f},
{ 0.000000f, 0.012195f, 0.999926f},
{ 0.000000f, 0.012195f, 0.999926f},
{ 0.000000f, 0.012195f, 0.999926f},
{ 0.000000f, 0.012195f, 0.999926f},
{ -0.607079f, -0.794621f, 0.005774f},
{ -0.607079f, -0.794621f, 0.005774f},
{ -0.607079f, -0.794621f, 0.005774f},
{ -0.607079f, -0.794621f, 0.005774f},
{ -0.562190f, 0.827008f, 0.000000f},
{ -0.562190f, 0.827008f, 0.000000f},
{ -0.562190f, 0.827008f, 0.000000f},
{ -0.562190f, 0.827008f, 0.000000f}};

static int[] FaceArray = new int[]{
3, 4, 2,
2, 4, 1,
1, 4, 0,
0, 4, 5,
1, 0, 6,
6, 0, 7,
5, 8, 0,
0, 8, 7,
2, 10, 3,
3, 10, 9,
1, 6, 2,
2, 6, 10,
20, 16, 19,
19, 16, 14,
111, 13, 112,
113, 13, 15,
23, 24, 16,
16, 24, 14,
19, 14, 25,
25, 14, 24,
18, 22, 11,
11, 22, 21,
21, 13, 114,
115, 13, 116,
24, 12, 25,
25, 12, 26,
17, 12, 23,
23, 12, 24,
15, 13, 22,
22, 13, 21,
117, 11, 118,
119, 11, 21,
120, 27, 11,
11, 27, 18,
12, 17, 26,
26, 17, 121,
32, 35, 33,
33, 35, 34,
122, 123, 30,
30, 124, 31,
31, 28, 36,
36, 28, 37,
33, 29, 32,
32, 29, 28,
33, 125, 29,
29, 126, 127,
31, 128, 28,
28, 129, 32,
30, 31, 38,
38, 31, 36,
29, 39, 28,
28, 39, 37,
130, 131, 29,
29, 132, 39,
42, 49, 40,
40, 49, 48,
49, 42, 50,
50, 42, 43,
43, 41, 50,
50, 41, 51,
41, 55, 133,
134, 55, 135,
54, 53, 40,
40, 53, 42,
52, 55, 43,
43, 55, 41,
43, 42, 52,
52, 42, 53,
44, 45, 46,
46, 45, 47,
136, 51, 137,
138, 51, 41,
139, 46, 140,
141, 46, 47,
142, 46, 143,
144, 46, 145,
146, 147, 148,
149, 150, 151,
152, 47, 153,
154, 47, 155,
156, 58, 157,
158, 58, 57,
57, 56, 159,
160, 56, 161,
60, 56, 59,
59, 56, 57,
60, 162, 56,
56, 163, 164,
58, 165, 61,
61, 166, 167,
61, 59, 58,
58, 59, 57,
168, 66, 169,
170, 66, 65,
171, 172, 64,
64, 173, 174,
175, 176, 68,
68, 177, 65,
68, 65, 69,
69, 65, 66,
67, 178, 62,
62, 179, 180,
181, 64, 182,
183, 64, 67,
70, 63, 69,
69, 63, 68,
68, 63, 184,
185, 63, 186,
187, 188, 64,
64, 189, 67,
190, 191, 62,
62, 192, 67,
193, 194, 62,
62, 195, 196,
197, 198, 70,
70, 199, 63,
75, 76, 78,
78, 76, 77,
74, 200, 73,
73, 201, 202,
80, 71, 79,
79, 71, 74,
71, 72, 75,
75, 72, 76,
76, 72, 203,
204, 72, 205,
74, 71, 206,
207, 71, 75,
79, 74, 81,
81, 74, 73,
80, 82, 71,
71, 82, 72,
82, 208, 72,
72, 209, 210,
91, 92, 83,
83, 92, 85,
92, 93, 85,
85, 93, 86,
94, 84, 93,
93, 84, 86,
211, 98, 212,
213, 98, 84,
85, 96, 83,
83, 96, 97,
84, 98, 86,
86, 98, 95,
86, 95, 85,
85, 95, 96,
90, 88, 89,
89, 88, 87,
84, 94, 214,
215, 94, 216,
90, 89, 217,
218, 89, 219,
220, 89, 221,
222, 89, 223,
224, 225, 226,
227, 228, 229,
230, 231, 90,
90, 232, 233,
100, 102, 99,
99, 102, 101,
104, 106, 103,
103, 106, 105,
107, 110, 108,
108, 110, 109, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 234  Texture Co-ords: 166  Normals: 119  Texture: Ragnar.mtl Faces: 166 Smooth Groups: 15 sucess: 90 Doubles: 76 Redos needed: 123 Correct: 105