package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaattackf {

static String TextureName = "joannaattack6.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.224447f, 0.671772f, -1.587814f,
 0.712235f, 0.785901f, -1.932737f,
 1.062269f, 0.682744f, -1.427684f,
 0.572136f, 0.583391f, -1.117799f,
 0.125011f, 0.063868f, -1.606428f,
 0.541500f, 0.061373f, -2.026764f,
 2.040206f, 0.061372f, -0.521425f,
 1.621617f, 0.061364f, -0.106566f,
 -0.036862f, 3.508801f, -0.765376f,
 0.670851f, 3.649425f, -1.041479f,
 1.131535f, 3.687586f, -0.300663f,
 0.487453f, 3.555701f, 0.070804f,
 0.899469f, 2.222741f, -0.136354f,
 1.333132f, 2.306706f, -0.407882f,
 0.999068f, 2.432600f, -0.883130f,
 0.543599f, 2.361586f, -0.604957f,
 0.869813f, 8.204969f, 0.848854f,
 0.385237f, 6.370632f, 1.002365f,
 -0.235693f, 7.291501f, 0.357595f,
 0.216827f, 8.138187f, 0.464674f,
 0.234317f, 7.873921f, 1.918281f,
 0.612130f, 6.737210f, 0.086750f,
 0.453946f, 7.232837f, -0.456565f,
 -0.277086f, 5.500293f, -0.242828f,
 0.436682f, 5.468945f, -0.393576f,
 0.759139f, 5.146146f, -0.007721f,
 0.273852f, 4.795931f, 0.484633f,
 0.222525f, 9.170408f, 2.023306f,
 0.859094f, 8.932174f, 1.669509f,
 0.859778f, 8.076921f, 1.594019f,
 0.623982f, 7.634104f, 1.036578f,
 1.325824f, 6.864935f, 0.245635f,
 0.241795f, 9.266785f, 0.599712f,
 0.869292f, 8.982738f, 0.910896f,
 0.461290f, 7.809780f, 0.567604f,
 1.502733f, 7.060513f, -0.082314f,
 1.002443f, 7.495574f, 0.467569f,
 1.077006f, 7.727776f, -0.004067f,
 1.710827f, 6.120300f, -0.260927f,
 2.033856f, 6.232708f, -0.072753f,
 2.249945f, 6.186722f, -0.350152f,
 1.969648f, 6.071646f, -0.560724f,
 0.304168f, 7.433672f, 1.434955f,
 0.243425f, 7.762037f, 0.482508f,
 1.124263f, 5.303379f, 1.301021f,
 1.737014f, 5.684335f, 1.282297f,
 2.055293f, 5.347356f, 1.050941f,
 1.680886f, 4.863785f, 0.919889f,
 -0.477904f, 2.764071f, -1.310071f,
 1.561048f, 3.532465f, -0.346246f,
 1.012319f, 3.414275f, -1.521819f,
 0.460003f, 3.196541f, 0.553797f,
 -0.141200f, 7.732409f, 1.658587f,
 0.410453f, 7.265314f, 1.758613f,
 -0.217528f, 7.687434f, 2.109839f,
 0.384248f, 7.240399f, 2.175827f,
 -0.404462f, 8.931848f, 1.653167f,
 -0.394493f, 8.982183f, 0.895375f,
 -0.450759f, 4.928533f, 0.710633f,
 -0.720914f, 5.264398f, 0.286582f,
 -0.262868f, 6.700747f, 1.526355f,
 -0.685146f, 6.956296f, 1.759102f,
 -0.358228f, 7.712163f, 1.038208f,
 -0.155670f, 7.566915f, 1.424049f,
 -0.403879f, 8.076724f, 1.577295f,
 -0.393823f, 8.204489f, 0.833310f,
 1.903947f, 6.634122f, 0.305026f,
 2.434484f, 6.346791f, 0.863664f,
 2.019036f, 7.150865f, 0.794254f,
 2.370964f, 6.929752f, 1.105446f,
 1.120864f, 6.565740f, 1.993340f,
 1.258896f, 6.442012f, 2.381724f,
 1.438056f, 6.760200f, 2.434220f,
 1.326550f, 6.884273f, 2.090744f,
 -1.083866f, 3.742389f, 1.082942f,
 -1.432574f, 2.999407f, 0.009590f,
 -0.349655f, 0.605726f, 0.679586f,
 -0.938177f, 0.623904f, 0.686634f,
 -0.948713f, 0.746765f, 1.297468f,
 -0.360301f, 0.732103f, 1.302019f,
 -0.358470f, 0.062039f, 0.539082f,
 -0.946553f, 0.061379f, 0.548878f,
 -0.941863f, 0.061376f, 2.673057f,
 -0.352910f, 0.061375f, 2.669501f,
 -0.100252f, 3.186096f, -0.013281f,
 -0.850467f, 3.298454f, 0.112120f,
 -0.843273f, 3.831591f, 0.802487f,
 -0.089271f, 3.792686f, 0.786306f,
 -0.356196f, 2.650007f, 1.609734f,
 -0.870721f, 2.669623f, 1.621026f,
 -0.867548f, 2.509274f, 1.057603f,
 -0.350201f, 2.481319f, 0.979621f,
 3.359198f, 11.226693f, 1.791386f,
 2.969040f, 10.756765f, 2.925901f,
 1.317060f, 4.477509f, 0.026893f,
 1.202104f, 4.210975f, 1.080499f,
 0.543599f, 2.361586f, -0.604957f,
 0.543599f, 2.361586f, -0.604957f,
 -0.036862f, 3.508801f, -0.765376f,
 0.224447f, 0.671772f, -1.587814f,
 0.125011f, 0.063868f, -1.606428f,
 0.125011f, 0.063868f, -1.606428f,
 0.224447f, 0.671772f, -1.587814f,
 0.125011f, 0.063868f, -1.606428f,
 0.572136f, 0.583391f, -1.117799f,
 0.572136f, 0.583391f, -1.117799f,
 0.125011f, 0.063868f, -1.606428f,
 1.621617f, 0.061364f, -0.106566f,
 0.572136f, 0.583391f, -1.117799f,
 1.621617f, 0.061364f, -0.106566f,
 1.621617f, 0.061364f, -0.106566f,
 1.062269f, 0.682744f, -1.427684f,
 1.062269f, 0.682744f, -1.427684f,
 1.062269f, 0.682744f, -1.427684f,
 1.062269f, 0.682744f, -1.427684f,
 0.712235f, 0.785901f, -1.932737f,
 0.712235f, 0.785901f, -1.932737f,
 0.543599f, 2.361586f, -0.604957f,
 0.543599f, 2.361586f, -0.604957f,
 0.712235f, 0.785901f, -1.932737f,
 0.224447f, 0.671772f, -1.587814f,
 0.623982f, 7.634104f, 1.036578f,
 0.623982f, 7.634104f, 1.036578f,
 0.612130f, 6.737210f, 0.086750f,
 0.612130f, 6.737210f, 0.086750f,
 0.623982f, 7.634104f, 1.036578f,
 0.623982f, 7.634104f, 1.036578f,
 0.461290f, 7.809780f, 0.567604f,
 0.461290f, 7.809780f, 0.567604f,
 0.461290f, 7.809780f, 0.567604f,
 0.623982f, 7.634104f, 1.036578f,
 0.623982f, 7.634104f, 1.036578f,
 0.612130f, 6.737210f, 0.086750f,
 0.453946f, 7.232837f, -0.456565f,
 1.710827f, 6.120300f, -0.260927f,
 1.710827f, 6.120300f, -0.260927f,
 0.453946f, 7.232837f, -0.456565f,
 0.453946f, 7.232837f, -0.456565f,
 0.612130f, 6.737210f, 0.086750f,
 1.124263f, 5.303379f, 1.301021f,
 1.124263f, 5.303379f, 1.301021f,
 1.710827f, 6.120300f, -0.260927f,
 1.680886f, 4.863785f, 0.919889f,
 1.680886f, 4.863785f, 0.919889f,
 1.710827f, 6.120300f, -0.260927f,
 0.453946f, 7.232837f, -0.456565f,
 0.453946f, 7.232837f, -0.456565f,
 0.461290f, 7.809780f, 0.567604f,
 0.461290f, 7.809780f, 0.567604f,
 1.680886f, 4.863785f, 0.919889f,
 -0.477904f, 2.764071f, -1.310071f,
 1.012319f, 3.414275f, -1.521819f,
 0.460003f, 3.196541f, 0.553797f,
 0.460003f, 3.196541f, 0.553797f,
 1.012319f, 3.414275f, -1.521819f,
 1.561048f, 3.532465f, -0.346246f,
 0.222525f, 9.170408f, 2.023306f,
 0.241795f, 9.266785f, 0.599712f,
 0.241795f, 9.266785f, 0.599712f,
 0.385237f, 6.370632f, 1.002365f,
 -0.155670f, 7.566915f, 1.424049f,
 0.385237f, 6.370632f, 1.002365f,
 0.304168f, 7.433672f, 1.434955f,
 -0.155670f, 7.566915f, 1.424049f,
 -0.262868f, 6.700747f, 1.526355f,
 -0.262868f, 6.700747f, 1.526355f,
 0.304168f, 7.433672f, 1.434955f,
 0.234317f, 7.873921f, 1.918281f,
 -0.155670f, 7.566915f, 1.424049f,
 0.234317f, 7.873921f, 1.918281f,
 -0.155670f, 7.566915f, 1.424049f,
 0.243425f, 7.762037f, 0.482508f,
 -0.358228f, 7.712163f, 1.038208f,
 0.216827f, 8.138187f, 0.464674f,
 -0.358228f, 7.712163f, 1.038208f,
 0.216827f, 8.138187f, 0.464674f,
 -0.358228f, 7.712163f, 1.038208f,
 -0.155670f, 7.566915f, 1.424049f,
 -0.155670f, 7.566915f, 1.424049f,
 0.273852f, 4.795931f, 0.484633f,
 0.385237f, 6.370632f, 1.002365f,
 0.385237f, 6.370632f, 1.002365f,
 -0.262868f, 6.700747f, 1.526355f,
 1.120864f, 6.565740f, 1.993340f,
 -0.685146f, 6.956296f, 1.759102f,
 1.120864f, 6.565740f, 1.993340f,
 -0.685146f, 6.956296f, 1.759102f,
 -0.685146f, 6.956296f, 1.759102f,
 -0.262868f, 6.700747f, 1.526355f,
 1.903947f, 6.634122f, 0.305026f,
 1.903947f, 6.634122f, 0.305026f,
 2.434484f, 6.346791f, 0.863664f,
 1.120864f, 6.565740f, 1.993340f,
 2.434484f, 6.346791f, 0.863664f,
 1.120864f, 6.565740f, 1.993340f,
 -0.685146f, 6.956296f, 1.759102f,
 -0.685146f, 6.956296f, 1.759102f,
 -0.358228f, 7.712163f, 1.038208f,
 -0.235693f, 7.291501f, 0.357595f,
 -0.358228f, 7.712163f, 1.038208f,
 0.243425f, 7.762037f, 0.482508f,
 -0.235693f, 7.291501f, 0.357595f,
 2.434484f, 6.346791f, 0.863664f,
 0.216827f, 8.138187f, 0.464674f,
 0.241795f, 9.266785f, 0.599712f,
 0.216827f, 8.138187f, 0.464674f,
 0.222525f, 9.170408f, 2.023306f,
 0.234317f, 7.873921f, 1.918281f,
 0.234317f, 7.873921f, 1.918281f,
 -0.277086f, 5.500293f, -0.242828f,
 -0.235693f, 7.291501f, 0.357595f,
 -0.277086f, 5.500293f, -0.242828f,
 -0.477904f, 2.764071f, -1.310071f,
 -0.277086f, 5.500293f, -0.242828f,
 -0.277086f, 5.500293f, -0.242828f,
 0.460003f, 3.196541f, 0.553797f,
 0.273852f, 4.795931f, 0.484633f,
 0.273852f, 4.795931f, 0.484633f,
 -0.477904f, 2.764071f, -1.310071f,
 0.460003f, 3.196541f, 0.553797f,
 -1.432574f, 2.999407f, 0.009590f,
 0.460003f, 3.196541f, 0.553797f,
 -1.083866f, 3.742389f, 1.082942f,
 -1.432574f, 2.999407f, 0.009590f,
 -0.350201f, 2.481319f, 0.979621f,
 -0.100252f, 3.186096f, -0.013281f,
 -0.350201f, 2.481319f, 0.979621f,
 -0.349655f, 0.605726f, 0.679586f,
 -0.358470f, 0.062039f, 0.539082f,
 -0.358470f, 0.062039f, 0.539082f,
 -0.349655f, 0.605726f, 0.679586f,
 -0.360301f, 0.732103f, 1.302019f,
 -0.358470f, 0.062039f, 0.539082f,
 -0.360301f, 0.732103f, 1.302019f,
 -0.352910f, 0.061375f, 2.669501f,
 -0.358470f, 0.062039f, 0.539082f,
 -0.360301f, 0.732103f, 1.302019f,
 -0.352910f, 0.061375f, 2.669501f,
 -0.352910f, 0.061375f, 2.669501f,
 -0.948713f, 0.746765f, 1.297468f,
 -0.948713f, 0.746765f, 1.297468f,
 -0.948713f, 0.746765f, 1.297468f,
 -0.938177f, 0.623904f, 0.686634f,
 -0.948713f, 0.746765f, 1.297468f,
 -0.350201f, 2.481319f, 0.979621f,
 -0.938177f, 0.623904f, 0.686634f,
 -0.350201f, 2.481319f, 0.979621f,
 -0.349655f, 0.605726f, 0.679586f,
 -0.938177f, 0.623904f, 0.686634f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.521063f, -0.845608f, 0.115930f},
{ 0.167882f, -0.790972f, -0.588370f},
{ 0.067848f, -0.703752f, 0.707199f},
{ 0.749398f, -0.662064f, -0.008577f},
{ -0.270215f, -0.231047f, 0.934666f},
{ -0.099634f, -0.356792f, 0.928856f},
{ 0.964403f, 0.127297f, 0.231780f},
{ 0.971887f, -0.103780f, 0.211343f},
{ -0.856836f, -0.464753f, -0.223240f},
{ -0.993751f, -0.107572f, -0.029792f},
{ 0.396468f, 0.283403f, -0.873210f},
{ 0.341880f, -0.071594f, -0.937013f},
{ -0.940253f, 0.262930f, -0.216316f},
{ 0.123472f, 0.391564f, -0.911829f},
{ 0.937110f, 0.209059f, -0.279499f},
{ -0.479837f, -0.041164f, 0.876392f},
{ 0.722259f, -0.010418f, 0.691544f},
{ 0.229258f, -0.259749f, 0.938068f},
{ 0.285962f, 0.803256f, -0.522500f},
{ 0.583953f, 0.614645f, -0.530293f},
{ -0.012288f, 0.651315f, 0.758708f},
{ 0.742615f, 0.464381f, 0.482569f},
{ 0.014840f, 0.728572f, -0.684809f},
{ 0.788545f, 0.423038f, -0.446359f},
{ 0.940602f, 0.161776f, 0.298489f},
{ 0.322002f, 0.337816f, -0.884418f},
{ 0.902883f, -0.425198f, 0.063317f},
{ -0.339440f, 0.322259f, -0.883702f},
{ 0.101356f, 0.805708f, -0.583577f},
{ 0.902960f, -0.321859f, 0.284728f},
{ 0.761720f, -0.223952f, 0.607971f},
{ 0.438366f, -0.423754f, 0.792633f},
{ 0.048626f, -0.344821f, 0.937408f},
{ 0.819061f, -0.320287f, 0.475978f},
{ -0.437206f, 0.266480f, -0.858976f},
{ -0.078646f, 0.035084f, -0.996285f},
{ 0.890558f, -0.095104f, -0.444816f},
{ 0.510063f, -0.016577f, 0.859977f},
{ -0.998403f, -0.049693f, 0.026861f},
{ -0.185728f, -0.892783f, -0.410420f},
{ -0.044866f, 0.770383f, 0.636001f},
{ 0.953900f, -0.263462f, 0.143748f},
{ -0.850805f, -0.494082f, -0.178922f},
{ 0.215080f, -0.310802f, -0.925820f},
{ 0.908897f, -0.080795f, -0.409120f},
{ 0.363815f, 0.666263f, 0.650947f},
{ -0.858491f, 0.278636f, -0.430529f},
{ 0.986493f, -0.157669f, 0.044400f},
{ 0.347982f, -0.104181f, -0.931695f},
{ -0.628336f, 0.299545f, -0.717960f},
{ -0.432897f, -0.388501f, -0.813429f},
{ 0.411642f, -0.640926f, 0.647892f},
{ 0.532187f, 0.708957f, -0.462770f},
{ -0.548942f, 0.412428f, 0.727025f},
{ 0.448517f, 0.355648f, -0.819967f},
{ -0.160102f, 0.171846f, 0.972027f},
{ -0.754208f, 0.461206f, 0.467396f},
{ -0.779981f, 0.431707f, -0.453056f},
{ -0.156167f, -0.002567f, 0.987727f},
{ 0.275154f, -0.636586f, 0.720450f},
{ -0.935686f, 0.304495f, -0.178255f},
{ -0.978300f, -0.038376f, 0.203608f},
{ -0.934074f, 0.283654f, -0.216903f},
{ 0.087907f, -0.501142f, 0.860889f},
{ -0.866914f, -0.205828f, 0.453976f},
{ -0.853976f, -0.109095f, -0.508747f},
{ -0.566576f, -0.472106f, -0.675357f},
{ -0.314041f, 0.884164f, -0.345879f},
{ 0.350234f, -0.936654f, -0.003967f},
{ 0.826431f, 0.338677f, 0.449788f},
{ -0.371775f, -0.734111f, -0.568211f},
{ 0.039986f, -0.791802f, 0.609467f},
{ 0.545253f, 0.135439f, 0.827258f},
{ 0.008226f, 0.994737f, -0.102130f},
{ -0.536145f, -0.166582f, 0.827526f},
{ -0.886543f, -0.418296f, -0.197659f},
{ 0.541608f, -0.808903f, -0.228775f},
{ 0.575775f, -0.606181f, 0.548661f},
{ -0.551931f, -0.803358f, -0.223580f},
{ -0.580141f, -0.600160f, 0.550677f},
{ 0.750788f, 0.246540f, 0.612809f},
{ -0.673141f, 0.436469f, 0.596973f},
{ 0.643138f, 0.093616f, 0.760006f},
{ -0.635405f, 0.143101f, 0.758803f},
{ 0.675220f, -0.671006f, -0.306314f},
{ 0.845545f, -0.238447f, -0.477700f},
{ -0.894915f, -0.060605f, -0.442102f},
{ -0.785737f, -0.479468f, -0.390805f},
{ 0.673015f, 0.129451f, -0.728212f},
{ -0.658325f, 0.156500f, -0.736285f},
{ -0.897374f, 0.184139f, 0.401015f},
{ 0.892517f, 0.174053f, 0.416076f},
{ 0.926759f, -0.328197f, 0.182769f},
{ 0.930236f, -0.324148f, 0.172017f},
{ 0.958948f, -0.278041f, 0.055788f},
{ 0.962147f, -0.270052f, 0.036661f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaattack6.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117