package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnardeathd {

static String TextureName = "RagDeath4.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -4.206539f, 3.906070f, -11.106969f,
 -3.149249f, 5.170162f, -12.295436f,
 -5.993787f, 6.916183f, -14.909699f,
 -6.595747f, 4.196638f, -12.729305f,
 -1.012461f, 3.891997f, -12.771347f,
 -2.593155f, 5.168231f, -12.582177f,
 -3.050715f, 6.885321f, -16.427895f,
 -0.983730f, 4.043986f, -15.676999f,
 -4.327296f, 5.024403f, -11.932533f,
 -3.727020f, 5.149739f, -10.754052f,
 -2.586324f, 3.922242f, -9.250525f,
 -0.800577f, 4.134419f, -8.631248f,
 -2.212274f, 5.630201f, -11.145033f,
 -3.291325f, 5.516726f, -13.261982f,
 -4.396278f, 3.832348f, -11.313918f,
 -4.919489f, 2.814363f, -12.326469f,
 -3.753905f, 2.567346f, -13.998523f,
 -0.308009f, 2.021532f, -8.029799f,
 -2.507343f, 3.120893f, -9.097241f,
 -1.413036f, 3.025043f, -5.875143f,
 -1.490542f, 0.137685f, -6.145647f,
 -4.611245f, 3.768970f, -9.370429f,
 -6.494395f, -0.242335f, -9.268597f,
 -2.943735f, 5.140972f, -12.593327f,
 -2.758198f, -0.909012f, -12.258493f,
 0.475736f, -0.325825f, -5.460411f,
 0.433737f, 4.044731f, -5.382556f,
 -7.007280f, 2.423927f, -9.467530f,
 -4.135903f, 2.114388f, -14.659507f,
 -1.929586f, 2.451931f, -7.553462f,
 -0.418376f, 2.888039f, -8.220960f,
 -0.688495f, -0.109230f, -8.703831f,
 -2.046776f, 0.451277f, -7.860984f,
 -2.482426f, 1.548151f, -7.602704f,
 -2.007063f, 1.617905f, -5.267072f,
 0.147555f, 1.531068f, -4.131373f,
 -6.129242f, 1.261789f, -8.270796f,
 -4.507102f, -0.199157f, -8.021026f,
 -5.742481f, -1.495419f, -7.595572f,
 -7.222064f, -0.624056f, -7.792380f,
 -4.358961f, 0.429403f, -5.159329f,
 -3.412375f, -0.505520f, -5.289834f,
 -4.215505f, -1.364497f, -5.005856f,
 -5.162308f, -0.417832f, -4.860808f,
 -5.445374f, 0.902382f, -10.728277f,
 -5.691315f, 3.150798f, -11.168796f,
 -4.407146f, 1.194286f, -9.535633f,
 -4.416453f, 3.032667f, -9.432441f,
 -0.824575f, 1.876280f, -3.421323f,
 -0.771446f, 3.795172f, -3.551508f,
 -1.903926f, 2.211954f, -3.632554f,
 -1.864186f, 3.691130f, -3.752777f,
 -1.032963f, 0.416460f, -1.729879f,
 -0.889364f, 4.267790f, 0.123249f,
 -2.386652f, 0.562315f, -1.663754f,
 -2.384346f, 4.218659f, 0.099086f,
 0.081769f, 1.061317f, -6.446868f,
 -0.864624f, 1.125939f, -6.146259f,
 -0.876464f, 2.249010f, -6.211027f,
 0.132596f, 2.290681f, -6.378395f,
 -2.135911f, 2.609096f, -2.224557f,
 -2.197474f, 1.332022f, -2.215231f,
 -1.105211f, 1.116696f, -2.313683f,
 -1.050568f, 2.679760f, -2.113171f,
 -1.610802f, 5.013531f, -13.333806f,
 -1.005885f, 5.147727f, -12.146770f,
 -0.459222f, 3.922242f, -10.334713f,
 -1.108010f, 3.832318f, -13.212450f,
 -1.723589f, 2.813104f, -14.172112f,
 -0.133051f, 3.120836f, -10.467845f,
 2.501590f, 2.921393f, -7.379338f,
 2.181985f, 0.140374f, -7.987114f,
 0.460278f, 2.620537f, -15.016166f,
 1.923811f, 0.718383f, -12.555817f,
 1.083489f, 0.575366f, -14.545908f,
 0.920317f, 2.452516f, -9.197856f,
 0.763601f, 0.457770f, -9.476233f,
 1.151955f, 1.549505f, -9.700638f,
 3.078252f, 1.489988f, -7.057051f,
 2.762299f, 0.459196f, -14.028072f,
 3.861544f, 2.354846f, -14.196924f,
 4.065392f, 2.409624f, -12.361444f,
 3.262308f, 0.971742f, -11.869915f,
 6.461111f, 0.960885f, -14.292843f,
 6.826324f, 2.234377f, -14.354111f,
 6.959917f, 2.269683f, -13.168953f,
 6.594658f, 0.978139f, -13.089725f,
 -0.076407f, 0.902189f, -13.827206f,
 -0.368812f, 3.037859f, -14.345322f,
 0.437469f, 1.194286f, -12.332672f,
 0.535753f, 3.040678f, -12.311975f,
 1.109571f, 1.522838f, -4.767998f,
 1.239970f, 3.358423f, -5.232784f,
 2.249879f, 1.784352f, -4.796352f,
 2.337440f, 3.218411f, -5.091100f,
 1.292918f, 0.420507f, -2.616818f,
 2.107158f, 4.267788f, -0.942216f,
 2.503049f, 0.565512f, -3.225718f,
 3.389735f, 4.218580f, -1.710530f,
 0.798507f, 1.062520f, -6.982260f,
 1.640044f, 1.136723f, -7.650439f,
 1.786036f, 2.271979f, -7.691719f,
 0.818676f, 2.286735f, -7.015260f,
 2.179746f, 2.538459f, -3.497791f,
 2.070623f, 1.332174f, -3.617766f,
 1.071527f, 1.117813f, -3.161485f,
 1.167494f, 2.632694f, -3.273584f,
 5.365287f, 1.608711f, -7.773622f,
 9.736241f, 1.957234f, -8.269144f,
 4.507196f, 1.313718f, -17.512234f,
 8.917614f, 1.940209f, -17.742617f,
 -3.976810f, 3.273780f, -8.595787f,
 -1.279433f, 2.397290f, -3.362124f,
 -5.594042f, -2.285178f, -1.852927f,
 -8.374869f, -1.312362f, -7.173295f,
 -7.007280f, 2.423927f, -9.467530f,
 -4.135903f, 2.114388f, -14.659507f,
 -4.135903f, 2.114388f, -14.659507f,
 -2.482426f, 1.548151f, -7.602704f,
 -2.482426f, 1.548151f, -7.602704f,
 -7.007280f, 2.423927f, -9.467530f,
 -2.007063f, 1.617905f, -5.267072f,
 -2.482426f, 1.548151f, -7.602704f,
 -2.482426f, 1.548151f, -7.602704f,
 -2.007063f, 1.617905f, -5.267072f,
 0.147555f, 1.531068f, -4.131373f,
 -4.215505f, -1.364497f, -5.005856f,
 -5.162308f, -0.417832f, -4.860808f,
 -5.162308f, -0.417832f, -4.860808f,
 -4.215505f, -1.364497f, -5.005856f,
 -4.215505f, -1.364497f, -5.005856f,
 -5.742481f, -1.495419f, -7.595572f,
 -5.162308f, -0.417832f, -4.860808f,
 -5.162308f, -0.417832f, -4.860808f,
 -5.742481f, -1.495419f, -7.595572f,
 -4.407146f, 1.194286f, -9.535633f,
 -4.407146f, 1.194286f, -9.535633f,
 -0.824575f, 1.876280f, -3.421323f,
 -0.824575f, 1.876280f, -3.421323f,
 -1.105211f, 1.116696f, -2.313683f,
 0.081769f, 1.061317f, -6.446868f,
 -0.824575f, 1.876280f, -3.421323f,
 -0.824575f, 1.876280f, -3.421323f,
 -2.197474f, 1.332022f, -2.215231f,
 -2.135911f, 2.609096f, -2.224557f,
 -2.135911f, 2.609096f, -2.224557f,
 -1.032963f, 0.416460f, -1.729879f,
 -1.105211f, 1.116696f, -2.313683f,
 -1.105211f, 1.116696f, -2.313683f,
 -2.197474f, 1.332022f, -2.215231f,
 -0.889364f, 4.267790f, 0.123249f,
 -1.032963f, 0.416460f, -1.729879f,
 -1.050568f, 2.679760f, -2.113171f,
 -1.050568f, 2.679760f, -2.113171f,
 -1.032963f, 0.416460f, -1.729879f,
 -1.105211f, 1.116696f, -2.313683f,
 -2.135911f, 2.609096f, -2.224557f,
 -1.050568f, 2.679760f, -2.113171f,
 -1.050568f, 2.679760f, -2.113171f,
 -0.889364f, 4.267790f, 0.123249f,
 -0.800577f, 4.134419f, -8.631248f,
 -2.212274f, 5.630201f, -11.145033f,
 -2.212274f, 5.630201f, -11.145033f,
 -2.212274f, 5.630201f, -11.145033f,
 -2.212274f, 5.630201f, -11.145033f,
 -3.291325f, 5.516726f, -13.261982f,
 -3.753905f, 2.567346f, -13.998523f,
 -3.753905f, 2.567346f, -13.998523f,
 -3.291325f, 5.516726f, -13.261982f,
 -0.800577f, 4.134419f, -8.631248f,
 -0.800577f, 4.134419f, -8.631248f,
 -0.308009f, 2.021532f, -8.029799f,
 -4.135903f, 2.114388f, -14.659507f,
 -2.758198f, -0.909012f, -12.258493f,
 -2.758198f, -0.909012f, -12.258493f,
 1.083489f, 0.575366f, -14.545908f,
 -4.135903f, 2.114388f, -14.659507f,
 -4.135903f, 2.114388f, -14.659507f,
 -2.943735f, 5.140972f, -12.593327f,
 -0.688495f, -0.109230f, -8.703831f,
 -2.758198f, -0.909012f, -12.258493f,
 -2.758198f, -0.909012f, -12.258493f,
 -0.418376f, 2.888039f, -8.220960f,
 -0.418376f, 2.888039f, -8.220960f,
 0.433737f, 4.044731f, -5.382556f,
 1.083489f, 0.575366f, -14.545908f,
 1.151955f, 1.549505f, -9.700638f,
 1.151955f, 1.549505f, -9.700638f,
 -0.688495f, -0.109230f, -8.703831f,
 -0.688495f, -0.109230f, -8.703831f,
 0.475736f, -0.325825f, -5.460411f,
 -2.943735f, 5.140972f, -12.593327f,
 -0.418376f, 2.888039f, -8.220960f,
 -0.418376f, 2.888039f, -8.220960f,
 3.078252f, 1.489988f, -7.057051f,
 1.151955f, 1.549505f, -9.700638f,
 1.151955f, 1.549505f, -9.700638f,
 0.433737f, 4.044731f, -5.382556f,
 0.147555f, 1.531068f, -4.131373f,
 0.147555f, 1.531068f, -4.131373f,
 3.078252f, 1.489988f, -7.057051f,
 0.147555f, 1.531068f, -4.131373f,
 0.475736f, -0.325825f, -5.460411f,
 0.475736f, -0.325825f, -5.460411f,
 6.594658f, 0.978139f, -13.089725f,
 6.594658f, 0.978139f, -13.089725f,
 6.959917f, 2.269683f, -13.168953f,
 6.959917f, 2.269683f, -13.168953f,
 6.959917f, 2.269683f, -13.168953f,
 4.065392f, 2.409624f, -12.361444f,
 6.594658f, 0.978139f, -13.089725f,
 6.594658f, 0.978139f, -13.089725f,
 0.437469f, 1.194286f, -12.332672f,
 0.437469f, 1.194286f, -12.332672f,
 4.065392f, 2.409624f, -12.361444f,
 1.071527f, 1.117813f, -3.161485f,
 1.109571f, 1.522838f, -4.767998f,
 1.109571f, 1.522838f, -4.767998f,
 1.109571f, 1.522838f, -4.767998f,
 1.109571f, 1.522838f, -4.767998f,
 0.798507f, 1.062520f, -6.982260f,
 2.179746f, 2.538459f, -3.497791f,
 2.179746f, 2.538459f, -3.497791f,
 2.070623f, 1.332174f, -3.617766f,
 2.070623f, 1.332174f, -3.617766f,
 1.071527f, 1.117813f, -3.161485f,
 1.071527f, 1.117813f, -3.161485f,
 1.292918f, 0.420507f, -2.616818f,
 1.071527f, 1.117813f, -3.161485f,
 1.292918f, 0.420507f, -2.616818f,
 1.167494f, 2.632694f, -3.273584f,
 1.167494f, 2.632694f, -3.273584f,
 1.292918f, 0.420507f, -2.616818f,
 2.107158f, 4.267788f, -0.942216f,
 2.179746f, 2.538459f, -3.497791f,
 1.167494f, 2.632694f, -3.273584f,
 1.167494f, 2.632694f, -3.273584f,
 2.107158f, 4.267788f, -0.942216f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.289409f, 0.772928f, 0.564646f},
{ -0.278333f, 0.685551f, 0.672718f},
{ -0.275257f, 0.665103f, 0.694169f},
{ -0.270940f, 0.637924f, 0.720864f},
{ 0.630889f, 0.774464f, 0.046749f},
{ 0.749940f, 0.642722f, 0.156518f},
{ 0.732518f, 0.666439f, 0.138842f},
{ 0.772159f, 0.609344f, 0.180198f},
{ 0.363258f, 0.625794f, 0.690236f},
{ 0.137375f, 0.948876f, 0.284188f},
{ -0.460953f, 0.493186f, 0.737760f},
{ -0.517938f, 0.626997f, 0.581906f},
{ -0.783694f, 0.584663f, -0.209746f},
{ -0.328027f, 0.681989f, -0.653673f},
{ -0.862929f, 0.169855f, 0.475923f},
{ -0.817466f, 0.306022f, -0.487955f},
{ -0.459945f, 0.325192f, -0.826257f},
{ -0.478792f, 0.137855f, 0.867038f},
{ 0.510015f, 0.343392f, 0.788648f},
{ -0.626982f, -0.113491f, -0.770723f},
{ -0.264527f, -0.909718f, -0.320061f},
{ -0.982931f, 0.183697f, 0.010081f},
{ -0.645715f, -0.742426f, 0.178481f},
{ -0.367487f, 0.885068f, 0.285670f},
{ 0.033091f, 0.984880f, -0.170050f},
{ 0.046579f, -0.997796f, 0.047254f},
{ -0.185705f, -0.894387f, 0.406922f},
{ -0.553532f, 0.018468f, 0.832623f},
{ 0.287482f, 0.852697f, 0.436190f},
{ 0.253048f, 0.966074f, 0.051653f},
{ -0.596171f, 0.740836f, 0.309422f},
{ -0.345298f, 0.802001f, 0.487405f},
{ -0.514690f, -0.805055f, 0.294927f},
{ -0.759831f, -0.047550f, 0.648379f},
{ 0.257581f, -0.837341f, 0.482195f},
{ 0.258754f, -0.080341f, 0.962597f},
{ 0.236487f, 0.916546f, 0.322516f},
{ -0.698707f, 0.057409f, 0.713101f},
{ 0.998222f, -0.022696f, -0.055115f},
{ 0.220488f, -0.946239f, 0.236680f},
{ -0.087605f, -0.939649f, -0.330734f},
{ -0.986613f, -0.155097f, -0.050402f},
{ -0.575585f, 0.735565f, 0.357277f},
{ -0.698937f, -0.591124f, -0.402566f},
{ -0.908126f, 0.400057f, 0.123539f},
{ 0.979045f, 0.049502f, -0.197538f},
{ 0.714875f, -0.639551f, -0.282715f},
{ -0.206593f, 0.733176f, 0.647898f},
{ -0.875674f, -0.405172f, -0.262737f},
{ -0.538387f, -0.842102f, 0.031688f},
{ 0.814010f, -0.526361f, 0.245625f},
{ 0.799998f, -0.474348f, 0.367421f},
{ -0.660866f, 0.514577f, -0.546322f},
{ -0.679137f, 0.686560f, -0.259632f},
{ 0.748801f, 0.646293f, 0.146978f},
{ 0.941619f, 0.318203f, 0.110000f},
{ 0.904545f, 0.419633f, -0.075546f},
{ 0.624116f, -0.586069f, -0.516722f},
{ -0.687389f, -0.437616f, -0.579645f},
{ -0.883680f, 0.422439f, -0.201630f},
{ -0.002689f, -0.433502f, 0.901149f},
{ -0.000774f, -0.434131f, 0.900849f},
{ -0.002176f, -0.433671f, 0.901069f},
{ -0.000287f, -0.434291f, 0.900773f},
{ -0.906997f, -0.126381f, -0.401727f},
{ -0.433706f, 0.714646f, -0.548798f},
{ 0.884570f, -0.267043f, -0.382393f},
{ 0.408297f, 0.730144f, -0.547889f},
{ 0.827035f, 0.561986f, 0.013605f},
{ 0.786129f, 0.612499f, -0.082740f},
{ 0.263090f, 0.596950f, -0.757914f},
{ -0.038407f, 0.357469f, -0.933135f},
{ 0.862305f, 0.217287f, -0.457402f},
{ 0.940247f, 0.339111f, 0.030654f},
{ 0.517094f, -0.557712f, -0.649286f},
{ 0.599326f, -0.797341f, -0.071099f},
{ 0.542275f, 0.608314f, -0.579561f},
{ 0.442042f, -0.894172f, -0.071096f},
{ 0.969646f, 0.146273f, -0.195939f},
{ 0.466586f, 0.867727f, -0.171312f},
{ 0.708465f, 0.705423f, 0.021332f},
{ 0.960349f, -0.065070f, 0.271100f},
{ 0.582422f, -0.793656f, -0.175770f},
{ 0.219947f, -0.641936f, -0.734535f},
{ 0.306432f, 0.630083f, -0.713509f},
{ 0.396104f, -0.723258f, 0.565685f},
{ 0.459061f, 0.726618f, 0.511164f},
{ 0.032631f, -0.630048f, 0.775870f},
{ -0.002700f, 0.843735f, 0.536753f},
{ 0.517463f, 0.547407f, -0.657707f},
{ -0.141678f, -0.722733f, -0.676450f},
{ -0.154973f, -0.713455f, -0.683349f},
{ -0.241355f, 0.657612f, -0.713648f},
{ 0.164418f, -0.363205f, 0.917087f},
{ 0.743758f, 0.658710f, 0.113688f},
{ -0.538737f, -0.806561f, 0.243357f},
{ 0.828420f, -0.557778f, -0.051029f},
{ -0.812105f, -0.577698f, 0.082157f},
{ 0.850622f, -0.524024f, -0.042910f},
{ 0.890810f, 0.279866f, -0.357957f},
{ 0.807250f, 0.582669f, -0.094038f},
{ -0.875107f, 0.471480f, -0.109061f},
{ -0.640699f, 0.767729f, -0.009876f},
{ -0.882335f, -0.440510f, -0.165636f},
{ -0.917051f, 0.378777f, 0.124678f},
{ 0.499667f, -0.673857f, -0.544288f},
{ 0.748454f, 0.438795f, -0.497268f},
{ 0.450893f, -0.433145f, 0.780436f},
{ 0.449858f, -0.433502f, 0.780835f},
{ 0.446879f, -0.434525f, 0.781977f},
{ 0.445787f, -0.434898f, 0.782392f},
{ 0.052564f, 0.758850f, -0.649141f},
{ 0.564592f, -0.190762f, -0.803023f},
{ -0.981557f, -0.157950f, 0.107691f},
{ -0.657955f, 0.715026f, -0.236290f},
{ -0.078916f, 0.996869f, 0.005028f},
{ -0.125281f, 0.992053f, -0.011654f},
{ -0.097009f, 0.995282f, -0.001472f},
{ -0.141511f, 0.989782f, -0.017513f},
{ -0.587102f, 0.692869f, 0.418622f},
{ -0.588240f, 0.687259f, 0.426202f},
{ -0.588133f, 0.687803f, 0.425472f},
{ -0.589181f, 0.682363f, 0.432719f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagDeath4.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105