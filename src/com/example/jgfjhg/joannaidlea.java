package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaidlea {

static String TextureName = "joannaidile1.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.253161f, 0.671077f, -1.164938f,
 0.765429f, 0.829779f, -1.414823f,
 1.051514f, 0.688580f, -0.879438f,
 0.529381f, 0.544639f, -0.648296f,
 0.283361f, 0.064334f, -1.383530f,
 0.863753f, 0.061373f, -1.495291f,
 1.227995f, 0.061372f, 0.597434f,
 0.647723f, 0.061363f, 0.697606f,
 -0.184718f, 3.488340f, 0.076158f,
 0.545464f, 3.653429f, -0.100977f,
 0.926483f, 3.523874f, 0.674212f,
 0.245488f, 3.340371f, 0.944007f,
 0.662094f, 2.079077f, 0.519551f,
 1.121549f, 2.199949f, 0.312759f,
 0.840558f, 2.401809f, -0.177367f,
 0.365232f, 2.299660f, 0.049956f,
 1.063336f, 8.143909f, 1.825056f,
 0.467433f, 6.316660f, 1.856307f,
 -0.117877f, 7.269608f, 1.492707f,
 0.418581f, 8.071479f, 1.439492f,
 0.427304f, 7.835944f, 2.881674f,
 0.572799f, 6.825851f, 1.080333f,
 -0.062229f, 7.111840f, 0.694770f,
 -0.187694f, 5.513296f, 0.816291f,
 0.455842f, 5.378072f, 0.499352f,
 0.825573f, 5.045701f, 0.838700f,
 0.452404f, 4.800064f, 1.457449f,
 0.400124f, 9.131078f, 2.971571f,
 1.041622f, 8.886250f, 2.631282f,
 1.042627f, 8.029740f, 2.572134f,
 0.804519f, 7.602548f, 1.954168f,
 1.082140f, 6.779378f, 0.662758f,
 0.440869f, 9.201063f, 1.546932f,
 1.062630f, 8.922668f, 1.872334f,
 0.590175f, 7.763199f, 1.551708f,
 0.812760f, 6.740995f, 0.344916f,
 1.018199f, 7.527641f, 0.714309f,
 0.672969f, 7.575277f, 0.393014f,
 0.943494f, 5.797793f, 0.592673f,
 1.220664f, 5.844818f, 0.325813f,
 1.078850f, 5.617756f, 0.092943f,
 0.799368f, 5.543264f, 0.321389f,
 0.603341f, 7.404773f, 2.320532f,
 0.442435f, 7.694395f, 1.457965f,
 2.239094f, 5.932978f, 1.917425f,
 2.400696f, 6.019241f, 1.221981f,
 2.406778f, 5.527690f, 1.061819f,
 2.224833f, 5.193655f, 1.559002f,
 -0.871631f, 2.772496f, 0.001564f,
 1.359008f, 3.372084f, 0.644440f,
 0.757821f, 3.379663f, -0.554637f,
 0.355584f, 3.149232f, 1.668389f,
 0.242150f, 7.648082f, 2.715506f,
 0.770747f, 7.154168f, 2.618209f,
 0.300904f, 7.574203f, 3.165581f,
 0.867586f, 7.099957f, 3.022298f,
 -0.221310f, 8.885761f, 2.597081f,
 -0.200020f, 8.922091f, 1.838977f,
 -0.171142f, 5.042604f, 1.838335f,
 -0.503515f, 5.377711f, 1.460400f,
 0.025222f, 6.634242f, 2.568502f,
 -0.292090f, 6.889528f, 2.930956f,
 -0.068055f, 7.669549f, 2.079690f,
 0.131129f, 7.519071f, 2.399512f,
 -0.220463f, 8.029426f, 2.537110f,
 -0.199127f, 8.143406f, 1.791356f,
 1.721459f, 6.568056f, 0.750649f,
 2.376110f, 6.220299f, 1.106464f,
 2.007843f, 7.043378f, 1.210719f,
 2.422582f, 6.786537f, 1.388510f,
 1.474404f, 6.410539f, 2.589767f,
 1.714059f, 6.253945f, 2.910975f,
 1.919446f, 6.560084f, 2.924869f,
 1.718449f, 6.712746f, 2.638444f,
 -1.216759f, 3.712312f, 2.222974f,
 -1.459369f, 3.131801f, 1.334828f,
 -0.300811f, 0.631587f, 1.719178f,
 -0.879344f, 0.639478f, 1.637130f,
 -0.992988f, 0.717970f, 2.244784f,
 -0.412985f, 0.717936f, 2.344589f,
 -0.284392f, 0.062477f, 1.592507f,
 -0.863752f, 0.061382f, 1.504707f,
 -1.227994f, 0.061379f, 3.597429f,
 -0.647716f, 0.061377f, 3.695951f,
 -0.042421f, 3.303402f, 1.268833f,
 -0.802138f, 3.386817f, 1.287318f,
 -0.928819f, 3.847188f, 2.016701f,
 -0.181082f, 3.829479f, 2.121343f,
 -0.531785f, 2.603736f, 2.772134f,
 -1.039814f, 2.610871f, 2.704422f,
 -0.940961f, 2.497833f, 2.131005f,
 -0.427489f, 2.482693f, 2.117574f,
 1.800943f, 11.751297f, 1.214070f,
 2.047580f, 11.547803f, 2.321514f,
 1.895070f, 4.463522f, 0.577605f,
 2.060077f, 4.376126f, 1.630689f,
 0.365232f, 2.299660f, 0.049956f,
 0.365232f, 2.299660f, 0.049956f,
 -0.184718f, 3.488340f, 0.076158f,
 0.253161f, 0.671077f, -1.164938f,
 0.283361f, 0.064334f, -1.383530f,
 0.283361f, 0.064334f, -1.383530f,
 0.253161f, 0.671077f, -1.164938f,
 0.283361f, 0.064334f, -1.383530f,
 0.529381f, 0.544639f, -0.648296f,
 0.529381f, 0.544639f, -0.648296f,
 0.283361f, 0.064334f, -1.383530f,
 0.647723f, 0.061363f, 0.697606f,
 0.529381f, 0.544639f, -0.648296f,
 0.647723f, 0.061363f, 0.697606f,
 0.647723f, 0.061363f, 0.697606f,
 1.051514f, 0.688580f, -0.879438f,
 1.051514f, 0.688580f, -0.879438f,
 1.051514f, 0.688580f, -0.879438f,
 1.051514f, 0.688580f, -0.879438f,
 0.765429f, 0.829779f, -1.414823f,
 0.765429f, 0.829779f, -1.414823f,
 0.365232f, 2.299660f, 0.049956f,
 0.365232f, 2.299660f, 0.049956f,
 0.765429f, 0.829779f, -1.414823f,
 0.253161f, 0.671077f, -1.164938f,
 0.804519f, 7.602548f, 1.954168f,
 0.804519f, 7.602548f, 1.954168f,
 0.572799f, 6.825851f, 1.080333f,
 0.572799f, 6.825851f, 1.080333f,
 0.804519f, 7.602548f, 1.954168f,
 0.804519f, 7.602548f, 1.954168f,
 0.590175f, 7.763199f, 1.551708f,
 0.590175f, 7.763199f, 1.551708f,
 0.590175f, 7.763199f, 1.551708f,
 0.804519f, 7.602548f, 1.954168f,
 0.804519f, 7.602548f, 1.954168f,
 0.572799f, 6.825851f, 1.080333f,
 -0.062229f, 7.111840f, 0.694770f,
 0.943494f, 5.797793f, 0.592673f,
 0.943494f, 5.797793f, 0.592673f,
 -0.062229f, 7.111840f, 0.694770f,
 -0.062229f, 7.111840f, 0.694770f,
 0.572799f, 6.825851f, 1.080333f,
 2.239094f, 5.932978f, 1.917425f,
 2.239094f, 5.932978f, 1.917425f,
 0.943494f, 5.797793f, 0.592673f,
 2.224833f, 5.193655f, 1.559002f,
 2.224833f, 5.193655f, 1.559002f,
 0.943494f, 5.797793f, 0.592673f,
 -0.062229f, 7.111840f, 0.694770f,
 -0.062229f, 7.111840f, 0.694770f,
 0.590175f, 7.763199f, 1.551708f,
 0.590175f, 7.763199f, 1.551708f,
 2.224833f, 5.193655f, 1.559002f,
 -0.871631f, 2.772496f, 0.001564f,
 0.757821f, 3.379663f, -0.554637f,
 0.355584f, 3.149232f, 1.668389f,
 0.355584f, 3.149232f, 1.668389f,
 0.757821f, 3.379663f, -0.554637f,
 1.359008f, 3.372084f, 0.644440f,
 0.400124f, 9.131078f, 2.971571f,
 0.440869f, 9.201063f, 1.546932f,
 0.440869f, 9.201063f, 1.546932f,
 0.467433f, 6.316660f, 1.856307f,
 0.131129f, 7.519071f, 2.399512f,
 0.467433f, 6.316660f, 1.856307f,
 0.603341f, 7.404773f, 2.320532f,
 0.131129f, 7.519071f, 2.399512f,
 0.025222f, 6.634242f, 2.568502f,
 0.025222f, 6.634242f, 2.568502f,
 0.603341f, 7.404773f, 2.320532f,
 0.427304f, 7.835944f, 2.881674f,
 0.131129f, 7.519071f, 2.399512f,
 0.427304f, 7.835944f, 2.881674f,
 0.131129f, 7.519071f, 2.399512f,
 0.442435f, 7.694395f, 1.457965f,
 -0.068055f, 7.669549f, 2.079690f,
 0.418581f, 8.071479f, 1.439492f,
 -0.068055f, 7.669549f, 2.079690f,
 0.418581f, 8.071479f, 1.439492f,
 -0.068055f, 7.669549f, 2.079690f,
 0.131129f, 7.519071f, 2.399512f,
 0.131129f, 7.519071f, 2.399512f,
 0.452404f, 4.800064f, 1.457449f,
 0.467433f, 6.316660f, 1.856307f,
 0.467433f, 6.316660f, 1.856307f,
 0.025222f, 6.634242f, 2.568502f,
 1.474404f, 6.410539f, 2.589767f,
 -0.292090f, 6.889528f, 2.930956f,
 1.474404f, 6.410539f, 2.589767f,
 -0.292090f, 6.889528f, 2.930956f,
 -0.292090f, 6.889528f, 2.930956f,
 0.025222f, 6.634242f, 2.568502f,
 1.721459f, 6.568056f, 0.750649f,
 1.721459f, 6.568056f, 0.750649f,
 2.376110f, 6.220299f, 1.106464f,
 1.474404f, 6.410539f, 2.589767f,
 2.376110f, 6.220299f, 1.106464f,
 1.474404f, 6.410539f, 2.589767f,
 -0.292090f, 6.889528f, 2.930956f,
 -0.292090f, 6.889528f, 2.930956f,
 -0.068055f, 7.669549f, 2.079690f,
 -0.117877f, 7.269608f, 1.492707f,
 -0.068055f, 7.669549f, 2.079690f,
 0.442435f, 7.694395f, 1.457965f,
 -0.117877f, 7.269608f, 1.492707f,
 2.376110f, 6.220299f, 1.106464f,
 0.418581f, 8.071479f, 1.439492f,
 0.440869f, 9.201063f, 1.546932f,
 0.418581f, 8.071479f, 1.439492f,
 0.400124f, 9.131078f, 2.971571f,
 0.427304f, 7.835944f, 2.881674f,
 0.427304f, 7.835944f, 2.881674f,
 -0.187694f, 5.513296f, 0.816291f,
 -0.117877f, 7.269608f, 1.492707f,
 -0.187694f, 5.513296f, 0.816291f,
 -0.871631f, 2.772496f, 0.001564f,
 -0.187694f, 5.513296f, 0.816291f,
 -0.187694f, 5.513296f, 0.816291f,
 0.355584f, 3.149232f, 1.668389f,
 0.452404f, 4.800064f, 1.457449f,
 0.452404f, 4.800064f, 1.457449f,
 -0.871631f, 2.772496f, 0.001564f,
 0.355584f, 3.149232f, 1.668389f,
 -1.459369f, 3.131801f, 1.334828f,
 0.355584f, 3.149232f, 1.668389f,
 -1.216759f, 3.712312f, 2.222974f,
 -1.459369f, 3.131801f, 1.334828f,
 -0.427489f, 2.482693f, 2.117574f,
 -0.042421f, 3.303402f, 1.268833f,
 -0.427489f, 2.482693f, 2.117574f,
 -0.300811f, 0.631587f, 1.719178f,
 -0.284392f, 0.062477f, 1.592507f,
 -0.284392f, 0.062477f, 1.592507f,
 -0.300811f, 0.631587f, 1.719178f,
 -0.412985f, 0.717936f, 2.344589f,
 -0.284392f, 0.062477f, 1.592507f,
 -0.412985f, 0.717936f, 2.344589f,
 -0.647716f, 0.061377f, 3.695951f,
 -0.284392f, 0.062477f, 1.592507f,
 -0.412985f, 0.717936f, 2.344589f,
 -0.647716f, 0.061377f, 3.695951f,
 -0.647716f, 0.061377f, 3.695951f,
 -0.992988f, 0.717970f, 2.244784f,
 -0.992988f, 0.717970f, 2.244784f,
 -0.992988f, 0.717970f, 2.244784f,
 -0.879344f, 0.639478f, 1.637130f,
 -0.992988f, 0.717970f, 2.244784f,
 -0.427489f, 2.482693f, 2.117574f,
 -0.879344f, 0.639478f, 1.637130f,
 -0.427489f, 2.482693f, 2.117574f,
 -0.300811f, 0.631587f, 1.719178f,
 -0.879344f, 0.639478f, 1.637130f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.494129f, -0.841810f, -0.217239f},
{ 0.483873f, -0.785134f, -0.386565f},
{ -0.341096f, -0.687339f, 0.641264f},
{ 0.623000f, -0.608335f, 0.491732f},
{ -0.379787f, -0.406051f, 0.831195f},
{ -0.219695f, -0.488010f, 0.844737f},
{ 0.940594f, 0.053350f, 0.335315f},
{ 0.951885f, -0.115969f, 0.283664f},
{ -0.835839f, -0.377929f, -0.398175f},
{ -0.977871f, -0.095769f, -0.186003f},
{ 0.457561f, 0.411100f, -0.788438f},
{ 0.434491f, 0.110909f, -0.893822f},
{ -0.926322f, 0.226663f, -0.300919f},
{ 0.216536f, 0.501923f, -0.837368f},
{ 0.998496f, 0.054832f, -0.000158f},
{ -0.763817f, 0.074221f, 0.641152f},
{ 0.976553f, 0.214843f, -0.013698f},
{ 0.942560f, 0.044676f, 0.331035f},
{ -0.290064f, 0.687580f, -0.665655f},
{ -0.082695f, 0.095833f, -0.991956f},
{ -0.026011f, 0.664195f, 0.747107f},
{ 0.736255f, 0.474393f, 0.482576f},
{ 0.024527f, 0.714696f, -0.699005f},
{ 0.795517f, 0.413276f, -0.443120f},
{ 0.982018f, 0.175237f, 0.070239f},
{ 0.271062f, 0.347590f, -0.897612f},
{ 0.970417f, -0.206430f, 0.125213f},
{ -0.760607f, 0.303741f, -0.573775f},
{ 0.137199f, 0.898226f, -0.417572f},
{ 0.931278f, -0.349249f, 0.103670f},
{ 0.886999f, -0.164594f, 0.431441f},
{ 0.583152f, -0.416111f, 0.697701f},
{ 0.030596f, -0.356432f, 0.933820f},
{ 0.807591f, -0.337984f, 0.483285f},
{ -0.588415f, 0.168499f, -0.790807f},
{ -0.082929f, -0.021631f, -0.996321f},
{ 0.894487f, -0.114202f, -0.432262f},
{ 0.634756f, 0.001180f, 0.772712f},
{ -0.390275f, 0.333886f, 0.858025f},
{ -0.255830f, -0.843869f, 0.471632f},
{ 0.379385f, 0.910857f, -0.162501f},
{ 0.597387f, -0.507847f, -0.620661f},
{ -0.480708f, -0.119122f, 0.868752f},
{ -0.618672f, -0.740958f, -0.261203f},
{ 0.046756f, -0.566205f, -0.822937f},
{ 0.590140f, 0.673052f, -0.445798f},
{ -0.958996f, 0.247007f, -0.138974f},
{ 0.954040f, -0.299613f, 0.006272f},
{ 0.194612f, -0.141933f, -0.970557f},
{ -0.737653f, 0.291391f, -0.609065f},
{ -0.567034f, -0.384419f, -0.728488f},
{ 0.440133f, -0.625495f, 0.644236f},
{ 0.489562f, 0.628864f, -0.604036f},
{ -0.347204f, 0.433173f, 0.831752f},
{ 0.204794f, 0.394493f, -0.895787f},
{ 0.146858f, 0.108441f, 0.983196f},
{ -0.760080f, 0.467004f, 0.451869f},
{ -0.772672f, 0.422432f, -0.473846f},
{ 0.081856f, -0.035865f, 0.995999f},
{ 0.486356f, -0.676224f, 0.553334f},
{ -0.928492f, 0.370280f, -0.028197f},
{ -0.927206f, -0.015138f, 0.374246f},
{ -0.947466f, 0.313026f, -0.065751f},
{ 0.330819f, -0.653185f, 0.681108f},
{ -0.866578f, -0.246122f, 0.434128f},
{ -0.834263f, -0.191777f, -0.516939f},
{ -0.769313f, -0.399275f, -0.498736f},
{ -0.349265f, 0.918595f, -0.184927f},
{ 0.276359f, -0.947318f, -0.161905f},
{ 0.941659f, 0.271965f, 0.198273f},
{ -0.567093f, -0.676056f, -0.470483f},
{ 0.172168f, -0.834027f, 0.524173f},
{ 0.773892f, 0.053541f, 0.631051f},
{ 0.037349f, 0.998337f, -0.043902f},
{ -0.530171f, -0.047875f, 0.846538f},
{ -0.943864f, -0.318623f, -0.087182f},
{ 0.569688f, -0.809860f, -0.139936f},
{ 0.459834f, -0.623918f, 0.631885f},
{ -0.486792f, -0.812722f, -0.320182f},
{ -0.643965f, -0.624351f, 0.442147f},
{ 0.639627f, 0.189302f, 0.745011f},
{ -0.779907f, 0.355893f, 0.514864f},
{ 0.536686f, 0.040482f, 0.842810f},
{ -0.760689f, 0.062788f, 0.646072f},
{ 0.751785f, -0.610488f, -0.249244f},
{ 0.913875f, -0.176312f, -0.365713f},
{ -0.820709f, -0.045382f, -0.569542f},
{ -0.700904f, -0.439653f, -0.561640f},
{ 0.782634f, 0.173418f, -0.597837f},
{ -0.539489f, 0.173403f, -0.823943f},
{ -0.956848f, 0.161314f, 0.241700f},
{ 0.820085f, 0.159787f, 0.549481f},
{ 0.976812f, 0.031116f, -0.211827f},
{ 0.977871f, 0.029919f, -0.207060f},
{ 0.986981f, 0.018094f, -0.159817f},
{ 0.988020f, 0.016502f, -0.153443f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaidile1.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117