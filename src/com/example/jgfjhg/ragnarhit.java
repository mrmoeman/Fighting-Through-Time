package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarhit {

static String TextureName = "RagHurt.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -1.614820f, 11.276247f, -0.190197f,
 -0.493830f, 12.412786f, 1.033686f,
 -1.637645f, 16.426748f, 0.276624f,
 -2.556086f, 13.657016f, -1.556504f,
 1.776094f, 11.270616f, 0.964337f,
 0.095048f, 12.412539f, 1.240917f,
 1.483557f, 16.425503f, 1.361021f,
 3.439421f, 13.637350f, 0.332650f,
 -1.551221f, 12.522617f, 0.419429f,
 -1.827656f, 11.449703f, 1.140548f,
 -1.478090f, 9.225170f, 1.146844f,
 0.222451f, 7.592457f, 1.972479f,
 -0.591818f, 11.403846f, 2.202957f,
 -0.146137f, 13.388141f, 0.973423f,
 -1.011516f, 11.343044f, 0.621290f,
 -1.166724f, 12.226127f, -0.617581f,
 0.593075f, 12.835571f, -1.480981f,
 0.173231f, 6.020074f, -0.399009f,
 -0.796071f, 8.355627f, 0.490132f,
 -2.027241f, 4.940706f, 1.272170f,
 -2.223294f, 4.551315f, -1.478896f,
 -2.433483f, 10.707176f, 1.658870f,
 -4.716654f, 9.674595f, -2.379451f,
 1.141396f, 11.826224f, 1.324304f,
 -0.346300f, 10.124840f, -4.301805f,
 -0.384320f, 2.924972f, -1.654038f,
 1.050551f, 3.044962f, 1.973122f,
 -4.531636f, 11.797559f, -0.188839f,
 0.512383f, 13.480244f, -2.087507f,
 -1.295699f, 6.658756f, 0.298848f,
 0.398106f, 6.420541f, 0.368203f,
 -0.325973f, 6.317806f, -2.584120f,
 -1.753285f, 6.541815f, -1.668593f,
 -1.945343f, 6.818191f, -0.523013f,
 -2.788078f, 4.051824f, 0.195308f,
 0.192206f, 2.058078f, 0.153277f,
 -5.018446f, 9.748148f, 0.070280f,
 -4.576132f, 7.602406f, -0.193074f,
 -5.585999f, 7.580643f, -1.741671f,
 -6.090820f, 9.225462f, -1.859809f,
 -7.038629f, 6.859218f, 1.252014f,
 -6.516363f, 5.661005f, 0.934536f,
 -7.177334f, 5.642393f, -0.079578f,
 -7.703202f, 6.839151f, 0.244373f,
 -2.902787f, 10.847156f, -1.869936f,
 -2.324325f, 11.865252f, 0.117823f,
 -2.601093f, 9.372249f, -1.305021f,
 -2.206077f, 9.691556f, 0.471454f,
 -1.056718f, 2.202244f, 1.046135f,
 -1.059816f, 3.376290f, 2.550849f,
 -2.171993f, 2.382111f, 1.311510f,
 -2.172884f, 3.272913f, 2.487842f,
 -1.030471f, -0.013456f, 0.885500f,
 -0.889358f, -0.006611f, 5.156850f,
 -2.384405f, -0.011854f, 1.047743f,
 -2.384308f, -0.006186f, 5.101930f,
 -0.532429f, 4.385812f, -0.824522f,
 -1.485269f, 4.681366f, -0.597180f,
 -1.416250f, 5.047096f, 0.452224f,
 -0.256107f, 4.649309f, 0.376972f,
 -2.163908f, 1.388451f, 2.581308f,
 -2.197283f, 0.821021f, 1.497000f,
 -1.104507f, 0.816300f, 1.259760f,
 -1.067387f, 1.416213f, 2.635925f,
 1.327597f, 12.519732f, 1.417996f,
 1.050699f, 11.449328f, 2.162383f,
 0.770327f, 9.224579f, 1.946732f,
 2.662511f, 10.976290f, -0.263973f,
 2.404173f, 11.869985f, -1.476523f,
 1.856569f, 8.091109f, -0.147318f,
 2.836615f, 4.050185f, 0.097862f,
 1.388020f, 4.681092f, -2.239470f,
 4.442674f, 10.572929f, -0.045445f,
 4.259792f, 8.689734f, -4.445001f,
 5.266098f, 11.230768f, -2.932675f,
 1.889256f, 6.340386f, -0.466245f,
 1.369927f, 6.248307f, -2.392350f,
 2.115082f, 6.413097f, -1.499789f,
 2.642331f, 3.803691f, -1.487130f,
 6.199693f, 9.379625f, -2.540988f,
 6.083954f, 7.209849f, -2.122403f,
 5.626631f, 6.893443f, -3.888971f,
 5.625117f, 8.476686f, -4.551115f,
 8.900093f, 6.812887f, -2.946731f,
 8.510320f, 5.565495f, -2.622410f,
 8.211685f, 5.358881f, -3.775988f,
 8.601459f, 6.606272f, -4.100308f,
 3.095755f, 10.248181f, -3.315654f,
 3.675321f, 11.293378f, -1.319825f,
 2.811853f, 8.831857f, -2.609519f,
 3.332966f, 9.142174f, -0.856565f,
 1.351363f, 1.882349f, -1.418966f,
 2.599093f, 0.996118f, -0.143310f,
 2.446677f, 2.044472f, -1.793453f,
 3.380697f, 1.417831f, -0.829888f,
 0.506076f, 0.002185f, -3.175651f,
 2.527917f, -0.006621f, 0.604034f,
 1.758270f, 0.005434f, -3.715887f,
 3.795302f, -0.006847f, -0.190959f,
 0.292791f, 4.288256f, -1.009906f,
 1.285207f, 4.425732f, -1.217839f,
 1.841310f, 4.473091f, -0.215062f,
 0.724639f, 4.367573f, 0.203377f,
 2.461574f, 1.045759f, -2.184092f,
 1.829132f, 0.825937f, -3.220476f,
 0.763331f, 0.827350f, -2.877359f,
 1.614508f, 0.863169f, -1.520930f,
 5.596066f, 6.380307f, -8.706555f,
 8.827648f, 3.365198f, -9.182278f,
 8.217525f, 7.944072f, 0.608895f,
 11.449108f, 4.928964f, 0.133169f,
 -3.694148f, 9.464404f, 2.702373f,
 -7.109274f, 5.092290f, 4.991473f,
 -10.667804f, 4.981142f, -0.528549f,
 -7.249840f, 9.409283f, -2.804975f,
 -4.531636f, 11.797559f, -0.188839f,
 0.512383f, 13.480244f, -2.087507f,
 0.512383f, 13.480244f, -2.087507f,
 -1.945343f, 6.818191f, -0.523013f,
 -1.945343f, 6.818191f, -0.523013f,
 -4.531636f, 11.797559f, -0.188839f,
 -2.788078f, 4.051824f, 0.195308f,
 -1.945343f, 6.818191f, -0.523013f,
 -1.945343f, 6.818191f, -0.523013f,
 -2.788078f, 4.051824f, 0.195308f,
 0.192206f, 2.058078f, 0.153277f,
 -7.177334f, 5.642393f, -0.079578f,
 -7.703202f, 6.839151f, 0.244373f,
 -7.703202f, 6.839151f, 0.244373f,
 -7.177334f, 5.642393f, -0.079578f,
 -7.177334f, 5.642393f, -0.079578f,
 -5.585999f, 7.580643f, -1.741671f,
 -7.703202f, 6.839151f, 0.244373f,
 -7.703202f, 6.839151f, 0.244373f,
 -5.585999f, 7.580643f, -1.741671f,
 -2.601093f, 9.372249f, -1.305021f,
 -2.601093f, 9.372249f, -1.305021f,
 -1.056718f, 2.202244f, 1.046135f,
 -1.056718f, 2.202244f, 1.046135f,
 -1.104507f, 0.816300f, 1.259760f,
 -0.532429f, 4.385812f, -0.824522f,
 -1.056718f, 2.202244f, 1.046135f,
 -1.056718f, 2.202244f, 1.046135f,
 -2.197283f, 0.821021f, 1.497000f,
 -2.163908f, 1.388451f, 2.581308f,
 -2.163908f, 1.388451f, 2.581308f,
 -1.030471f, -0.013456f, 0.885500f,
 -1.104507f, 0.816300f, 1.259760f,
 -1.104507f, 0.816300f, 1.259760f,
 -2.197283f, 0.821021f, 1.497000f,
 -0.889358f, -0.006611f, 5.156850f,
 -1.030471f, -0.013456f, 0.885500f,
 -1.067387f, 1.416213f, 2.635925f,
 -1.067387f, 1.416213f, 2.635925f,
 -1.030471f, -0.013456f, 0.885500f,
 -1.104507f, 0.816300f, 1.259760f,
 -2.163908f, 1.388451f, 2.581308f,
 -1.067387f, 1.416213f, 2.635925f,
 -1.067387f, 1.416213f, 2.635925f,
 -0.889358f, -0.006611f, 5.156850f,
 0.222451f, 7.592457f, 1.972479f,
 -0.591818f, 11.403846f, 2.202957f,
 -0.591818f, 11.403846f, 2.202957f,
 -0.591818f, 11.403846f, 2.202957f,
 -0.591818f, 11.403846f, 2.202957f,
 -0.146137f, 13.388141f, 0.973423f,
 0.593075f, 12.835571f, -1.480981f,
 0.593075f, 12.835571f, -1.480981f,
 -0.146137f, 13.388141f, 0.973423f,
 0.222451f, 7.592457f, 1.972479f,
 0.222451f, 7.592457f, 1.972479f,
 0.173231f, 6.020074f, -0.399009f,
 0.512383f, 13.480244f, -2.087507f,
 -0.346300f, 10.124840f, -4.301805f,
 -0.346300f, 10.124840f, -4.301805f,
 5.266098f, 11.230768f, -2.932675f,
 0.512383f, 13.480244f, -2.087507f,
 0.512383f, 13.480244f, -2.087507f,
 1.141396f, 11.826224f, 1.324304f,
 -0.325973f, 6.317806f, -2.584120f,
 -0.346300f, 10.124840f, -4.301805f,
 -0.346300f, 10.124840f, -4.301805f,
 0.398106f, 6.420541f, 0.368203f,
 0.398106f, 6.420541f, 0.368203f,
 1.050551f, 3.044962f, 1.973122f,
 5.266098f, 11.230768f, -2.932675f,
 2.115082f, 6.413097f, -1.499789f,
 2.115082f, 6.413097f, -1.499789f,
 -0.325973f, 6.317806f, -2.584120f,
 -0.325973f, 6.317806f, -2.584120f,
 -0.384320f, 2.924972f, -1.654038f,
 1.141396f, 11.826224f, 1.324304f,
 0.398106f, 6.420541f, 0.368203f,
 0.398106f, 6.420541f, 0.368203f,
 2.642331f, 3.803691f, -1.487130f,
 2.115082f, 6.413097f, -1.499789f,
 2.115082f, 6.413097f, -1.499789f,
 1.050551f, 3.044962f, 1.973122f,
 0.192206f, 2.058078f, 0.153277f,
 0.192206f, 2.058078f, 0.153277f,
 2.642331f, 3.803691f, -1.487130f,
 0.192206f, 2.058078f, 0.153277f,
 -0.384320f, 2.924972f, -1.654038f,
 -0.384320f, 2.924972f, -1.654038f,
 8.601459f, 6.606272f, -4.100308f,
 8.601459f, 6.606272f, -4.100308f,
 8.211685f, 5.358881f, -3.775988f,
 8.211685f, 5.358881f, -3.775988f,
 8.211685f, 5.358881f, -3.775988f,
 5.626631f, 6.893443f, -3.888971f,
 8.601459f, 6.606272f, -4.100308f,
 8.601459f, 6.606272f, -4.100308f,
 2.811853f, 8.831857f, -2.609519f,
 2.811853f, 8.831857f, -2.609519f,
 5.626631f, 6.893443f, -3.888971f,
 0.763331f, 0.827350f, -2.877359f,
 1.351363f, 1.882349f, -1.418966f,
 1.351363f, 1.882349f, -1.418966f,
 1.351363f, 1.882349f, -1.418966f,
 1.351363f, 1.882349f, -1.418966f,
 0.292791f, 4.288256f, -1.009906f,
 2.461574f, 1.045759f, -2.184092f,
 2.461574f, 1.045759f, -2.184092f,
 1.829132f, 0.825937f, -3.220476f,
 1.829132f, 0.825937f, -3.220476f,
 0.763331f, 0.827350f, -2.877359f,
 0.763331f, 0.827350f, -2.877359f,
 0.506076f, 0.002185f, -3.175651f,
 0.763331f, 0.827350f, -2.877359f,
 0.506076f, 0.002185f, -3.175651f,
 1.614508f, 0.863169f, -1.520930f,
 1.614508f, 0.863169f, -1.520930f,
 0.506076f, 0.002185f, -3.175651f,
 2.527917f, -0.006621f, 0.604034f,
 2.461574f, 1.045759f, -2.184092f,
 1.614508f, 0.863169f, -1.520930f,
 1.614508f, 0.863169f, -1.520930f,
 2.527917f, -0.006621f, 0.604034f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.765211f, 0.065035f, 0.640486f},
{ -0.793957f, -0.055596f, 0.605426f},
{ -0.798983f, -0.084964f, 0.595321f},
{ -0.803851f, -0.119149f, 0.582775f},
{ 0.226797f, 0.099204f, 0.968877f},
{ 0.291788f, -0.090638f, 0.952179f},
{ 0.281030f, -0.056939f, 0.958009f},
{ 0.305062f, -0.133773f, 0.942890f},
{ 0.046017f, -0.598706f, 0.799646f},
{ -0.355172f, 0.154032f, 0.922023f},
{ -0.868581f, -0.242461f, 0.432179f},
{ -0.932069f, 0.101442f, 0.347789f},
{ -0.745511f, 0.662108f, 0.076335f},
{ -0.080846f, 0.959527f, 0.269761f},
{ -0.660489f, -0.212599f, -0.720108f},
{ -0.698669f, 0.576385f, -0.423841f},
{ 0.285990f, 0.951710f, -0.111614f},
{ -0.848679f, -0.515567f, 0.118047f},
{ 0.233683f, -0.812595f, 0.533930f},
{ -0.058166f, 0.920231f, -0.387029f},
{ -0.236556f, 0.190948f, -0.952670f},
{ -0.777009f, 0.617280f, 0.123376f},
{ -0.840621f, -0.068665f, -0.537254f},
{ -0.286105f, 0.207450f, 0.935472f},
{ 0.224591f, 0.404683f, 0.886448f},
{ -0.235576f, -0.316542f, -0.918861f},
{ -0.577205f, -0.413043f, -0.704436f},
{ -0.876378f, -0.318304f, 0.361448f},
{ 0.227579f, -0.239149f, 0.943936f},
{ 0.250069f, 0.013175f, 0.968139f},
{ -0.401175f, 0.082050f, 0.912319f},
{ -0.334305f, -0.080836f, 0.938992f},
{ -0.695672f, -0.236064f, -0.678465f},
{ -0.865278f, -0.448655f, 0.223613f},
{ -0.211676f, -0.707737f, -0.674019f},
{ -0.107323f, -0.986236f, 0.125780f},
{ -0.144713f, 0.258966f, 0.954984f},
{ -0.950747f, 0.296885f, -0.089101f},
{ 0.507655f, -0.719852f, 0.473391f},
{ -0.146110f, -0.801577f, -0.579764f},
{ 0.074684f, -0.523335f, -0.848848f},
{ -0.621704f, 0.565717f, -0.541709f},
{ -0.448202f, 0.628568f, 0.635623f},
{ -0.461651f, 0.633670f, -0.620757f},
{ -0.555484f, 0.696687f, 0.453944f},
{ 0.637120f, -0.631836f, 0.441431f},
{ 0.477258f, -0.608068f, -0.634412f},
{ 0.136160f, -0.255429f, 0.957192f},
{ -0.867351f, -0.100843f, -0.487374f},
{ -0.779074f, -0.262205f, -0.569467f},
{ 0.747569f, -0.441767f, -0.495967f},
{ 0.350709f, -0.656416f, -0.667923f},
{ -0.662641f, 0.685266f, 0.302189f},
{ -0.776470f, 0.409981f, 0.478550f},
{ 0.686128f, 0.269227f, 0.675829f},
{ 0.964724f, 0.076684f, 0.251846f},
{ 0.895006f, 0.321374f, 0.309326f},
{ 0.664908f, 0.116372f, -0.737804f},
{ -0.740563f, 0.169075f, -0.650370f},
{ -0.872247f, 0.365555f, 0.324892f},
{ -0.000987f, -0.999998f, 0.001635f},
{ -0.000468f, -0.999999f, 0.001446f},
{ -0.000848f, -0.999998f, 0.001585f},
{ -0.000335f, -0.999999f, 0.001398f},
{ -0.913794f, 0.287510f, -0.286912f},
{ -0.419667f, 0.805786f, 0.417838f},
{ 0.904970f, 0.214197f, -0.367625f},
{ 0.421633f, 0.802094f, 0.422930f},
{ 0.623809f, -0.164963f, 0.763970f},
{ 0.570213f, 0.043497f, 0.820345f},
{ 0.580972f, 0.684081f, 0.441027f},
{ 0.628440f, 0.775568f, 0.059644f},
{ 0.884756f, 0.089055f, 0.457466f},
{ 0.785890f, -0.369274f, 0.495998f},
{ 0.809425f, 0.457747f, -0.367831f},
{ 0.510400f, -0.268098f, -0.817077f},
{ 0.760064f, 0.132439f, 0.636209f},
{ 0.086124f, -0.517413f, -0.851391f},
{ 0.887055f, -0.460937f, -0.025886f},
{ 0.700375f, -0.149039f, 0.698041f},
{ 0.871244f, -0.085990f, 0.483259f},
{ 0.734017f, -0.495881f, -0.464028f},
{ 0.207593f, -0.232840f, -0.950100f},
{ 0.753474f, 0.449291f, 0.480015f},
{ 0.127259f, -0.621518f, 0.772995f},
{ 0.516643f, 0.294506f, -0.803957f},
{ -0.198353f, -0.897938f, -0.392892f},
{ 0.091812f, 0.402827f, -0.910660f},
{ -0.503211f, -0.765594f, -0.400805f},
{ 0.660640f, 0.702432f, 0.264847f},
{ 0.651518f, 0.720986f, 0.236013f},
{ 0.044110f, 0.587073f, -0.808332f},
{ -0.057329f, -0.480536f, 0.875099f},
{ -0.632564f, -0.736478f, -0.239714f},
{ 0.169766f, -0.376307f, 0.910809f},
{ -0.904653f, -0.358996f, -0.229619f},
{ 0.307936f, 0.336847f, -0.889781f},
{ -0.978980f, -0.202583f, -0.023642f},
{ 0.456446f, 0.517404f, -0.723844f},
{ 0.762854f, 0.359100f, 0.537681f},
{ 0.979481f, 0.039346f, 0.197660f},
{ -0.454101f, -0.306047f, 0.836736f},
{ -0.026923f, -0.506606f, 0.861757f},
{ -0.747919f, 0.612332f, -0.256255f},
{ -0.732459f, 0.212040f, 0.646948f},
{ 0.133976f, 0.676934f, -0.723748f},
{ 0.898104f, 0.240235f, -0.368369f},
{ -0.001735f, -0.999996f, -0.002482f},
{ -0.001122f, -0.999996f, -0.002591f},
{ 0.000646f, -0.999996f, -0.002906f},
{ 0.001292f, -0.999995f, -0.003021f},
{ 0.422018f, 0.895171f, 0.143424f},
{ 0.533679f, 0.344201f, -0.772472f},
{ -0.921579f, 0.379626f, -0.081096f},
{ -0.037782f, 0.919014f, 0.392411f},
{ -0.627558f, -0.719536f, 0.297388f},
{ -0.627558f, -0.719536f, 0.297388f},
{ -0.627558f, -0.719536f, 0.297388f},
{ -0.627558f, -0.719536f, 0.297388f},
{ -0.615221f, 0.684932f, 0.390348f},
{ -0.619121f, 0.682225f, 0.388919f},
{ -0.618719f, 0.682505f, 0.389067f},
{ -0.622557f, 0.679818f, 0.387648f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagHurt.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105