package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaattackb {

static String TextureName = "joannaattack2.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.370983f, 0.543272f, -0.166138f,
 0.285658f, 0.855615f, -0.697098f,
 0.898099f, 0.840037f, -0.810885f,
 0.972601f, 0.520941f, -0.322013f,
 0.225844f, 0.079665f, -0.107972f,
 0.059295f, 0.140321f, -0.681868f,
 2.079297f, -0.053152f, -1.309815f,
 2.245475f, -0.115224f, -0.747020f,
 0.438915f, 2.577066f, 1.353219f,
 0.486739f, 3.052220f, 0.733251f,
 1.272875f, 3.412558f, 0.850392f,
 1.341508f, 2.987636f, 1.469975f,
 1.850089f, 2.064730f, 0.521835f,
 1.802418f, 2.338481f, 0.078666f,
 1.238165f, 2.298729f, 0.158073f,
 1.232892f, 2.042725f, 0.671150f,
 -0.143449f, 7.683666f, 1.489590f,
 -0.211728f, 5.948854f, 1.927244f,
 -1.226612f, 6.604589f, 1.002090f,
 -0.819416f, 7.663966f, 1.126883f,
 -0.708065f, 7.186675f, 2.525326f,
 -0.132179f, 6.436915f, 1.099226f,
 -0.282378f, 6.509684f, 0.545230f,
 -0.472707f, 4.600193f, 1.036381f,
 0.244596f, 4.680052f, 0.925235f,
 0.587555f, 4.606874f, 1.427756f,
 0.130421f, 4.348289f, 1.987597f,
 -0.715183f, 8.441709f, 2.842537f,
 -0.102078f, 8.266096f, 2.417498f,
 -0.111411f, 7.435067f, 2.203142f,
 -0.324681f, 7.020772f, 1.604554f,
 0.081060f, 7.460375f, 1.039571f,
 -0.778549f, 8.769218f, 1.451994f,
 -0.135259f, 8.440454f, 1.677972f,
 -0.515087f, 7.103715f, 1.129150f,
 0.323369f, 7.430893f, 0.711617f,
 -0.514594f, 7.278089f, 0.700209f,
 -0.298321f, 7.170027f, 0.298048f,
 1.014572f, 7.570141f, 1.403754f,
 0.969131f, 7.934811f, 1.272531f,
 1.296284f, 7.963378f, 1.145764f,
 1.379791f, 7.622246f, 1.258656f,
 -0.560721f, 6.893446f, 2.018679f,
 -0.792873f, 7.306727f, 1.092844f,
 -0.056621f, 7.996868f, 2.861042f,
 0.063285f, 8.470653f, 2.329919f,
 0.541914f, 8.630614f, 2.447010f,
 0.692990f, 8.279481f, 2.942048f,
 -0.013633f, 1.714051f, 1.077331f,
 1.486358f, 3.517867f, 0.459155f,
 0.752530f, 2.831013f, 0.260457f,
 0.783906f, 2.969744f, 2.482494f,
 -1.565994f, 7.205335f, 2.377199f,
 -0.977824f, 7.567655f, 2.560619f,
 -1.621730f, 7.146902f, 2.830288f,
 -1.009958f, 7.560506f, 2.968747f,
 -1.364045f, 8.265811f, 2.475183f,
 -1.397463f, 8.440165f, 1.736497f,
 -0.626717f, 4.385896f, 2.129936f,
 -0.912502f, 4.476924f, 1.604995f,
 -0.869385f, 6.490229f, 2.443129f,
 -1.346186f, 6.565812f, 2.656694f,
 -1.275363f, 7.079138f, 1.663573f,
 -1.043919f, 6.997695f, 2.053312f,
 -1.373679f, 7.434947f, 2.260104f,
 -1.405626f, 7.683518f, 1.547793f,
 -0.205831f, 8.156535f, 1.086911f,
 0.339056f, 8.664845f, 1.434998f,
 -0.561927f, 8.603919f, 1.525853f,
 -0.181595f, 8.911786f, 1.699608f,
 -0.125699f, 7.971958f, 2.938041f,
 0.027322f, 8.100834f, 3.259078f,
 -0.202248f, 8.389502f, 3.259135f,
 -0.346029f, 8.291035f, 2.972410f,
 -0.931653f, 3.672905f, 2.783125f,
 -1.243934f, 2.341872f, 2.289802f,
 -0.336160f, 0.874441f, 3.741020f,
 -0.929615f, 0.899937f, 3.731006f,
 -0.958610f, 1.217835f, 4.266196f,
 -0.371030f, 1.199963f, 4.298599f,
 -0.355457f, 0.309523f, 3.822101f,
 -0.946553f, 0.311482f, 3.838743f,
 -0.941862f, 1.114843f, 5.805146f,
 -0.352544f, 1.113374f, 5.800813f,
 -0.017013f, 2.572322f, 2.315055f,
 -0.776955f, 2.750670f, 2.319523f,
 -0.761142f, 3.594649f, 2.537033f,
 -0.009814f, 3.541514f, 2.573912f,
 -0.319905f, 3.119395f, 3.913448f,
 -0.842380f, 3.149712f, 3.905308f,
 -0.819228f, 2.767553f, 3.513426f,
 -0.264509f, 2.696640f, 3.440271f,
 -2.147521f, 9.708267f, -2.882842f,
 -2.967242f, 10.061041f, -1.937755f,
 1.378584f, 7.510774f, 3.076228f,
 0.654514f, 8.013581f, 3.722451f,
 1.232892f, 2.042725f, 0.671150f,
 1.232892f, 2.042725f, 0.671150f,
 0.438915f, 2.577066f, 1.353219f,
 0.370983f, 0.543272f, -0.166138f,
 0.225844f, 0.079665f, -0.107972f,
 0.225844f, 0.079665f, -0.107972f,
 0.370983f, 0.543272f, -0.166138f,
 0.225844f, 0.079665f, -0.107972f,
 0.972601f, 0.520941f, -0.322013f,
 0.972601f, 0.520941f, -0.322013f,
 0.225844f, 0.079665f, -0.107972f,
 2.245475f, -0.115224f, -0.747020f,
 0.972601f, 0.520941f, -0.322013f,
 2.245475f, -0.115224f, -0.747020f,
 2.245475f, -0.115224f, -0.747020f,
 0.898099f, 0.840037f, -0.810885f,
 0.898099f, 0.840037f, -0.810885f,
 0.898099f, 0.840037f, -0.810885f,
 0.898099f, 0.840037f, -0.810885f,
 0.285658f, 0.855615f, -0.697098f,
 0.285658f, 0.855615f, -0.697098f,
 1.232892f, 2.042725f, 0.671150f,
 1.232892f, 2.042725f, 0.671150f,
 0.285658f, 0.855615f, -0.697098f,
 0.370983f, 0.543272f, -0.166138f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.132179f, 6.436915f, 1.099226f,
 -0.132179f, 6.436915f, 1.099226f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.515087f, 7.103715f, 1.129150f,
 -0.515087f, 7.103715f, 1.129150f,
 -0.515087f, 7.103715f, 1.129150f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.324681f, 7.020772f, 1.604554f,
 -0.132179f, 6.436915f, 1.099226f,
 -0.282378f, 6.509684f, 0.545230f,
 1.014572f, 7.570141f, 1.403754f,
 1.014572f, 7.570141f, 1.403754f,
 -0.282378f, 6.509684f, 0.545230f,
 -0.282378f, 6.509684f, 0.545230f,
 -0.132179f, 6.436915f, 1.099226f,
 -0.056621f, 7.996868f, 2.861042f,
 -0.056621f, 7.996868f, 2.861042f,
 1.014572f, 7.570141f, 1.403754f,
 0.692990f, 8.279481f, 2.942048f,
 0.692990f, 8.279481f, 2.942048f,
 1.014572f, 7.570141f, 1.403754f,
 -0.282378f, 6.509684f, 0.545230f,
 -0.282378f, 6.509684f, 0.545230f,
 -0.515087f, 7.103715f, 1.129150f,
 -0.515087f, 7.103715f, 1.129150f,
 0.692990f, 8.279481f, 2.942048f,
 -0.013633f, 1.714051f, 1.077331f,
 0.752530f, 2.831013f, 0.260457f,
 0.783906f, 2.969744f, 2.482494f,
 0.783906f, 2.969744f, 2.482494f,
 0.752530f, 2.831013f, 0.260457f,
 1.486358f, 3.517867f, 0.459155f,
 -0.715183f, 8.441709f, 2.842537f,
 -0.778549f, 8.769218f, 1.451994f,
 -0.778549f, 8.769218f, 1.451994f,
 -0.211728f, 5.948854f, 1.927244f,
 -1.043919f, 6.997695f, 2.053312f,
 -0.211728f, 5.948854f, 1.927244f,
 -0.560721f, 6.893446f, 2.018679f,
 -1.043919f, 6.997695f, 2.053312f,
 -0.869385f, 6.490229f, 2.443129f,
 -0.869385f, 6.490229f, 2.443129f,
 -0.560721f, 6.893446f, 2.018679f,
 -0.708065f, 7.186675f, 2.525326f,
 -1.043919f, 6.997695f, 2.053312f,
 -0.708065f, 7.186675f, 2.525326f,
 -1.043919f, 6.997695f, 2.053312f,
 -0.792873f, 7.306727f, 1.092844f,
 -1.275363f, 7.079138f, 1.663573f,
 -0.819416f, 7.663966f, 1.126883f,
 -1.275363f, 7.079138f, 1.663573f,
 -0.819416f, 7.663966f, 1.126883f,
 -1.275363f, 7.079138f, 1.663573f,
 -1.043919f, 6.997695f, 2.053312f,
 -1.043919f, 6.997695f, 2.053312f,
 0.130421f, 4.348289f, 1.987597f,
 -0.211728f, 5.948854f, 1.927244f,
 -0.211728f, 5.948854f, 1.927244f,
 -0.869385f, 6.490229f, 2.443129f,
 -0.125699f, 7.971958f, 2.938041f,
 -1.346186f, 6.565812f, 2.656694f,
 -0.125699f, 7.971958f, 2.938041f,
 -1.346186f, 6.565812f, 2.656694f,
 -1.346186f, 6.565812f, 2.656694f,
 -0.869385f, 6.490229f, 2.443129f,
 -0.205831f, 8.156535f, 1.086911f,
 -0.205831f, 8.156535f, 1.086911f,
 0.339056f, 8.664845f, 1.434998f,
 -0.125699f, 7.971958f, 2.938041f,
 0.339056f, 8.664845f, 1.434998f,
 -0.125699f, 7.971958f, 2.938041f,
 -1.346186f, 6.565812f, 2.656694f,
 -1.346186f, 6.565812f, 2.656694f,
 -1.275363f, 7.079138f, 1.663573f,
 -1.226612f, 6.604589f, 1.002090f,
 -1.275363f, 7.079138f, 1.663573f,
 -0.792873f, 7.306727f, 1.092844f,
 -1.226612f, 6.604589f, 1.002090f,
 0.339056f, 8.664845f, 1.434998f,
 -0.819416f, 7.663966f, 1.126883f,
 -0.778549f, 8.769218f, 1.451994f,
 -0.819416f, 7.663966f, 1.126883f,
 -0.715183f, 8.441709f, 2.842537f,
 -0.708065f, 7.186675f, 2.525326f,
 -0.708065f, 7.186675f, 2.525326f,
 -0.472707f, 4.600193f, 1.036381f,
 -1.226612f, 6.604589f, 1.002090f,
 -0.472707f, 4.600193f, 1.036381f,
 -0.013633f, 1.714051f, 1.077331f,
 -0.472707f, 4.600193f, 1.036381f,
 -0.472707f, 4.600193f, 1.036381f,
 0.783906f, 2.969744f, 2.482494f,
 0.130421f, 4.348289f, 1.987597f,
 0.130421f, 4.348289f, 1.987597f,
 -0.013633f, 1.714051f, 1.077331f,
 0.783906f, 2.969744f, 2.482494f,
 -1.243934f, 2.341872f, 2.289802f,
 0.783906f, 2.969744f, 2.482494f,
 -0.931653f, 3.672905f, 2.783125f,
 -1.243934f, 2.341872f, 2.289802f,
 -0.264509f, 2.696640f, 3.440271f,
 -0.017013f, 2.572322f, 2.315055f,
 -0.264509f, 2.696640f, 3.440271f,
 -0.336160f, 0.874441f, 3.741020f,
 -0.355457f, 0.309523f, 3.822101f,
 -0.355457f, 0.309523f, 3.822101f,
 -0.336160f, 0.874441f, 3.741020f,
 -0.371030f, 1.199963f, 4.298599f,
 -0.355457f, 0.309523f, 3.822101f,
 -0.371030f, 1.199963f, 4.298599f,
 -0.352544f, 1.113374f, 5.800813f,
 -0.355457f, 0.309523f, 3.822101f,
 -0.371030f, 1.199963f, 4.298599f,
 -0.352544f, 1.113374f, 5.800813f,
 -0.352544f, 1.113374f, 5.800813f,
 -0.958610f, 1.217835f, 4.266196f,
 -0.958610f, 1.217835f, 4.266196f,
 -0.958610f, 1.217835f, 4.266196f,
 -0.929615f, 0.899937f, 3.731006f,
 -0.958610f, 1.217835f, 4.266196f,
 -0.264509f, 2.696640f, 3.440271f,
 -0.929615f, 0.899937f, 3.731006f,
 -0.264509f, 2.696640f, 3.440271f,
 -0.336160f, 0.874441f, 3.741020f,
 -0.929615f, 0.899937f, 3.731006f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.227621f, -0.880481f, 0.415864f},
{ -0.525483f, -0.626593f, -0.575542f},
{ 0.631752f, -0.740453f, 0.229389f},
{ 0.262849f, -0.496356f, -0.827370f},
{ 0.761807f, -0.209072f, 0.613139f},
{ 0.859549f, -0.354283f, 0.368319f},
{ 0.599135f, 0.637471f, -0.484426f},
{ 0.705968f, 0.302316f, -0.640480f},
{ -0.373438f, -0.889782f, 0.262359f},
{ -0.365099f, -0.590852f, 0.719442f},
{ -0.585092f, 0.496101f, -0.641522f},
{ -0.562977f, 0.006232f, -0.826449f},
{ -0.578270f, 0.003546f, 0.815838f},
{ -0.761611f, 0.507662f, -0.402775f},
{ 0.185739f, 0.377353f, -0.907252f},
{ 0.640449f, -0.139940f, 0.755144f},
{ -0.302511f, 0.809716f, 0.502838f},
{ -0.493436f, 0.460354f, 0.737967f},
{ -0.158068f, 0.075167f, -0.984563f},
{ 0.344730f, 0.190106f, -0.919250f},
{ 0.034283f, 0.520825f, 0.852975f},
{ 0.772693f, 0.384935f, 0.504748f},
{ -0.019706f, 0.827148f, -0.561638f},
{ 0.763492f, 0.492739f, -0.417478f},
{ 0.892925f, 0.347010f, 0.286825f},
{ 0.260113f, 0.288509f, -0.921468f},
{ 0.989787f, 0.104131f, 0.097353f},
{ 0.018258f, -0.177807f, -0.983896f},
{ -0.149513f, 0.386068f, -0.910273f},
{ 0.995404f, -0.017665f, 0.094124f},
{ 0.752990f, 0.185327f, 0.631395f},
{ 0.532719f, -0.145060f, 0.833767f},
{ 0.082894f, -0.480518f, 0.873058f},
{ 0.851680f, -0.357403f, 0.383282f},
{ -0.490388f, 0.242486f, -0.837091f},
{ -0.093709f, 0.186916f, -0.977896f},
{ 0.856972f, 0.030388f, -0.514467f},
{ 0.580701f, 0.386682f, 0.716424f},
{ -0.458641f, -0.812625f, 0.359567f},
{ 0.640009f, -0.320621f, 0.698277f},
{ -0.859464f, 0.260297f, -0.439962f},
{ 0.455920f, 0.889969f, -0.009587f},
{ -0.053967f, -0.826769f, 0.559947f},
{ 0.933590f, -0.356718f, -0.034088f},
{ 0.768086f, 0.529413f, -0.360231f},
{ -0.639527f, 0.615141f, -0.461094f},
{ -0.887459f, -0.204249f, -0.413158f},
{ 0.944476f, 0.057309f, -0.323545f},
{ 0.095279f, -0.510245f, -0.854735f},
{ -0.675761f, -0.114040f, -0.728246f},
{ -0.250118f, -0.842480f, -0.477146f},
{ 0.685001f, -0.226018f, 0.692597f},
{ -0.079282f, 0.626976f, -0.774994f},
{ -0.858849f, -0.119021f, 0.498208f},
{ 0.078217f, 0.399077f, -0.913575f},
{ -0.400154f, 0.063693f, 0.914232f},
{ -0.722310f, 0.376050f, 0.580392f},
{ -0.801620f, 0.497798f, -0.331064f},
{ -0.275579f, 0.275670f, 0.920903f},
{ 0.604079f, -0.120998f, 0.787685f},
{ -0.955708f, 0.032724f, -0.292491f},
{ -0.784142f, -0.511124f, 0.351958f},
{ -0.977997f, 0.081942f, -0.191851f},
{ 0.150584f, 0.220190f, 0.963764f},
{ -0.839266f, -0.320195f, 0.439440f},
{ -0.881077f, -0.061431f, -0.468966f},
{ 0.104315f, -0.883017f, -0.457602f},
{ -0.982165f, -0.046166f, -0.182267f},
{ 0.988481f, -0.059115f, -0.139324f},
{ 0.075486f, 0.981611f, 0.175331f},
{ 0.543465f, -0.756546f, -0.363709f},
{ 0.752393f, -0.044453f, 0.657212f},
{ 0.222984f, 0.671081f, 0.707057f},
{ -0.934586f, 0.347477f, -0.076214f},
{ -0.418214f, 0.113762f, 0.901196f},
{ -0.780472f, -0.623696f, 0.043201f},
{ 0.530778f, -0.843164f, 0.085722f},
{ 0.560975f, -0.362570f, 0.744211f},
{ -0.543699f, -0.834211f, 0.092101f},
{ -0.571540f, -0.350025f, 0.742176f},
{ 0.707503f, 0.605942f, 0.363695f},
{ -0.641535f, 0.737951f, 0.209429f},
{ 0.556778f, 0.468371f, 0.686022f},
{ -0.564871f, 0.512194f, 0.646977f},
{ 0.622736f, -0.750886f, 0.219933f},
{ 0.892167f, -0.398741f, -0.212236f},
{ -0.896471f, -0.207088f, -0.391734f},
{ -0.783387f, -0.621496f, 0.006895f},
{ 0.694409f, -0.139119f, -0.706005f},
{ -0.633564f, -0.089584f, -0.768486f},
{ -0.904268f, 0.309450f, 0.294177f},
{ 0.880088f, 0.318828f, 0.351844f},
{ 0.452486f, 0.889727f, 0.060354f},
{ 0.459546f, 0.886593f, 0.052640f},
{ 0.531661f, 0.846415f, -0.030300f},
{ 0.542980f, 0.838587f, -0.044092f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);

}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaattack2.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117