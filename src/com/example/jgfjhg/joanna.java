package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joanna {

static String TextureName = "joanna.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.350636f, 0.586082f, -0.296987f,
 0.939187f, 0.586127f, -0.295773f,
 0.944896f, 0.769338f, 0.299813f,
 0.356349f, 0.769383f, 0.296887f,
 0.358003f, 0.061373f, -0.452334f,
 0.946553f, 0.061373f, -0.451121f,
 0.941864f, 0.061372f, 1.673060f,
 0.353318f, 0.061373f, 1.670134f,
 0.173520f, 3.993900f, -0.537063f,
 0.927962f, 3.993437f, -0.374733f,
 0.926038f, 3.993107f, 0.497037f,
 0.171289f, 3.992589f, 0.465727f,
 0.402198f, 2.645804f, 0.450916f,
 0.913671f, 2.645943f, 0.461990f,
 0.915049f, 2.646048f, -0.162456f,
 0.403669f, 2.646167f, -0.213191f,
 0.629377f, 8.792535f, -0.351513f,
 -0.002818f, 7.341701f, 0.860326f,
 -0.002818f, 7.533861f, -0.843175f,
 -0.009586f, 8.689778f, -0.741993f,
 -0.002818f, 8.558121f, 0.774784f,
 1.022143f, 7.347756f, 0.441048f,
 1.022143f, 7.344725f, -0.486323f,
 -0.002818f, 5.908155f, -0.535998f,
 0.676493f, 5.837314f, -0.277914f,
 0.708520f, 5.643499f, 0.295529f,
 -0.002818f, 5.453662f, 0.524476f,
 -0.002818f, 9.835581f, 0.764347f,
 0.629289f, 9.573672f, 0.419027f,
 0.629289f, 8.714911f, 0.400765f,
 0.469653f, 8.302425f, 0.215500f,
 1.764600f, 7.345630f, 0.202603f,
 -0.002818f, 9.835862f, -0.665356f,
 0.629377f, 9.572934f, -0.341885f,
 0.469653f, 8.298172f, -0.390929f,
 1.772228f, 7.345541f, -0.260111f,
 1.552998f, 8.073987f, 0.217943f,
 1.553527f, 8.074902f, -0.257288f,
 1.931462f, 6.249428f, 0.028929f,
 2.292781f, 6.390113f, -0.029135f,
 2.288456f, 6.388605f, -0.467139f,
 1.944355f, 6.254624f, -0.464469f,
 -0.002818f, 8.208730f, 0.527701f,
 -0.002818f, 8.326937f, -0.679493f,
 2.898269f, 4.597275f, 0.469441f,
 3.249263f, 5.208674f, 0.319143f,
 3.249350f, 5.209205f, -0.199739f,
 2.913576f, 4.691244f, -0.346077f,
 -0.002818f, 3.022146f, -1.104733f,
 1.285786f, 3.766228f, 0.670489f,
 1.423553f, 3.607471f, -0.536687f,
 -0.002818f, 3.736131f, 0.986581f,
 -1.558633f, 8.073992f, 0.217917f,
 -1.770236f, 7.345632f, 0.202598f,
 -1.559163f, 8.074901f, -0.257311f,
 -1.777863f, 7.345541f, -0.260114f,
 -0.634925f, 9.573682f, 0.418961f,
 -0.635013f, 9.572929f, -0.341962f,
 -0.714156f, 5.643478f, 0.295518f,
 -0.682128f, 5.837317f, -0.277922f,
 -1.027778f, 7.347700f, 0.441173f,
 -1.027778f, 7.344754f, -0.486184f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.634925f, 8.714925f, 0.400699f,
 -0.635013f, 8.792525f, -0.351656f,
 -2.903905f, 4.597275f, 0.469441f,
 -2.919211f, 4.691244f, -0.346077f,
 -3.254898f, 5.208674f, 0.319143f,
 -3.254985f, 5.209205f, -0.199739f,
 -1.937098f, 6.249428f, 0.028929f,
 -1.949991f, 6.254624f, -0.464469f,
 -2.294092f, 6.388605f, -0.467139f,
 -2.298416f, 6.390113f, -0.029135f,
 -1.187511f, 3.766228f, 0.670489f,
 -1.429188f, 3.607471f, -0.536687f,
 -0.350636f, 0.586082f, -0.296987f,
 -0.939187f, 0.586127f, -0.295773f,
 -0.944896f, 0.769338f, 0.299813f,
 -0.356349f, 0.769383f, 0.296887f,
 -0.358003f, 0.061373f, -0.452334f,
 -0.946553f, 0.061373f, -0.451121f,
 -0.941864f, 0.061372f, 1.673060f,
 -0.353318f, 0.061373f, 1.670134f,
 -0.173520f, 3.993900f, -0.537063f,
 -0.927962f, 3.993437f, -0.374733f,
 -0.926038f, 3.993107f, 0.497037f,
 -0.171289f, 3.992589f, 0.465727f,
 -0.402198f, 2.645804f, 0.450916f,
 -0.913671f, 2.645943f, 0.461990f,
 -0.915049f, 2.646048f, -0.162456f,
 -0.403669f, 2.646167f, -0.213191f,
 2.659116f, 6.618233f, 5.949242f,
 3.373933f, 5.840883f, 6.063943f,
 2.446054f, 5.353162f, -1.296515f,
 3.160872f, 4.575812f, -1.181813f,
 0.403669f, 2.646167f, -0.213191f,
 0.403669f, 2.646167f, -0.213191f,
 0.173520f, 3.993900f, -0.537063f,
 0.350636f, 0.586082f, -0.296987f,
 0.358003f, 0.061373f, -0.452334f,
 0.358003f, 0.061373f, -0.452334f,
 0.350636f, 0.586082f, -0.296987f,
 0.358003f, 0.061373f, -0.452334f,
 0.356349f, 0.769383f, 0.296887f,
 0.356349f, 0.769383f, 0.296887f,
 0.358003f, 0.061373f, -0.452334f,
 0.353318f, 0.061373f, 1.670134f,
 0.356349f, 0.769383f, 0.296887f,
 0.353318f, 0.061373f, 1.670134f,
 0.353318f, 0.061373f, 1.670134f,
 0.944896f, 0.769338f, 0.299813f,
 0.944896f, 0.769338f, 0.299813f,
 0.944896f, 0.769338f, 0.299813f,
 0.944896f, 0.769338f, 0.299813f,
 0.939187f, 0.586127f, -0.295773f,
 0.939187f, 0.586127f, -0.295773f,
 0.403669f, 2.646167f, -0.213191f,
 0.403669f, 2.646167f, -0.213191f,
 0.939187f, 0.586127f, -0.295773f,
 0.350636f, 0.586082f, -0.296987f,
 0.469653f, 8.302425f, 0.215500f,
 0.469653f, 8.302425f, 0.215500f,
 1.022143f, 7.347756f, 0.441048f,
 1.022143f, 7.347756f, 0.441048f,
 0.469653f, 8.302425f, 0.215500f,
 0.469653f, 8.302425f, 0.215500f,
 0.469653f, 8.298172f, -0.390929f,
 0.469653f, 8.298172f, -0.390929f,
 0.469653f, 8.298172f, -0.390929f,
 0.469653f, 8.302425f, 0.215500f,
 0.469653f, 8.302425f, 0.215500f,
 1.022143f, 7.347756f, 0.441048f,
 1.022143f, 7.344725f, -0.486323f,
 1.931462f, 6.249428f, 0.028929f,
 1.931462f, 6.249428f, 0.028929f,
 1.022143f, 7.344725f, -0.486323f,
 1.022143f, 7.344725f, -0.486323f,
 1.022143f, 7.347756f, 0.441048f,
 2.898269f, 4.597275f, 0.469441f,
 2.898269f, 4.597275f, 0.469441f,
 1.931462f, 6.249428f, 0.028929f,
 2.913576f, 4.691244f, -0.346077f,
 2.913576f, 4.691244f, -0.346077f,
 1.931462f, 6.249428f, 0.028929f,
 1.022143f, 7.344725f, -0.486323f,
 1.022143f, 7.344725f, -0.486323f,
 0.469653f, 8.298172f, -0.390929f,
 0.469653f, 8.298172f, -0.390929f,
 2.913576f, 4.691244f, -0.346077f,
 -0.002818f, 3.022146f, -1.104733f,
 1.423553f, 3.607471f, -0.536687f,
 -0.002818f, 3.736131f, 0.986581f,
 -0.002818f, 3.736131f, 0.986581f,
 1.423553f, 3.607471f, -0.536687f,
 1.285786f, 3.766228f, 0.670489f,
 -0.002818f, 9.835581f, 0.764347f,
 -0.002818f, 9.835862f, -0.665356f,
 -0.002818f, 9.835862f, -0.665356f,
 -0.002818f, 7.341701f, 0.860326f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.002818f, 7.341701f, 0.860326f,
 -0.002818f, 8.208730f, 0.527701f,
 -0.475289f, 8.302356f, 0.215910f,
 -1.027778f, 7.347700f, 0.441173f,
 -1.027778f, 7.347700f, 0.441173f,
 -0.002818f, 8.208730f, 0.527701f,
 -0.002818f, 8.558121f, 0.774784f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.002818f, 8.558121f, 0.774784f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.002818f, 8.326937f, -0.679493f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.009586f, 8.689778f, -0.741993f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.009586f, 8.689778f, -0.741993f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.475289f, 8.302356f, 0.215910f,
 -0.002818f, 5.453662f, 0.524476f,
 -0.002818f, 7.341701f, 0.860326f,
 -0.002818f, 7.341701f, 0.860326f,
 -1.027778f, 7.347700f, 0.441173f,
 -1.937098f, 6.249428f, 0.028929f,
 -1.027778f, 7.344754f, -0.486184f,
 -1.937098f, 6.249428f, 0.028929f,
 -1.027778f, 7.344754f, -0.486184f,
 -1.027778f, 7.344754f, -0.486184f,
 -1.027778f, 7.347700f, 0.441173f,
 -2.903905f, 4.597275f, 0.469441f,
 -2.903905f, 4.597275f, 0.469441f,
 -2.919211f, 4.691244f, -0.346077f,
 -1.937098f, 6.249428f, 0.028929f,
 -2.919211f, 4.691244f, -0.346077f,
 -1.937098f, 6.249428f, 0.028929f,
 -1.027778f, 7.344754f, -0.486184f,
 -1.027778f, 7.344754f, -0.486184f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.002818f, 7.533861f, -0.843175f,
 -0.475289f, 8.298185f, -0.390778f,
 -0.002818f, 8.326937f, -0.679493f,
 -0.002818f, 7.533861f, -0.843175f,
 -2.919211f, 4.691244f, -0.346077f,
 -0.009586f, 8.689778f, -0.741993f,
 -0.002818f, 9.835862f, -0.665356f,
 -0.009586f, 8.689778f, -0.741993f,
 -0.002818f, 9.835581f, 0.764347f,
 -0.002818f, 8.558121f, 0.774784f,
 -0.002818f, 8.558121f, 0.774784f,
 -0.002818f, 5.908155f, -0.535998f,
 -0.002818f, 7.533861f, -0.843175f,
 -0.002818f, 5.908155f, -0.535998f,
 -0.002818f, 3.022146f, -1.104733f,
 -0.002818f, 5.908155f, -0.535998f,
 -0.002818f, 5.908155f, -0.535998f,
 -0.002818f, 3.736131f, 0.986581f,
 -0.002818f, 5.453662f, 0.524476f,
 -0.002818f, 5.453662f, 0.524476f,
 -0.002818f, 3.022146f, -1.104733f,
 -0.002818f, 3.736131f, 0.986581f,
 -1.429188f, 3.607471f, -0.536687f,
 -0.002818f, 3.736131f, 0.986581f,
 -1.187511f, 3.766228f, 0.670489f,
 -1.429188f, 3.607471f, -0.536687f,
 -0.403669f, 2.646167f, -0.213191f,
 -0.173520f, 3.993900f, -0.537063f,
 -0.403669f, 2.646167f, -0.213191f,
 -0.350636f, 0.586082f, -0.296987f,
 -0.358003f, 0.061373f, -0.452334f,
 -0.358003f, 0.061373f, -0.452334f,
 -0.350636f, 0.586082f, -0.296987f,
 -0.356349f, 0.769383f, 0.296887f,
 -0.358003f, 0.061373f, -0.452334f,
 -0.356349f, 0.769383f, 0.296887f,
 -0.353318f, 0.061373f, 1.670134f,
 -0.358003f, 0.061373f, -0.452334f,
 -0.356349f, 0.769383f, 0.296887f,
 -0.353318f, 0.061373f, 1.670134f,
 -0.353318f, 0.061373f, 1.670134f,
 -0.944896f, 0.769338f, 0.299813f,
 -0.944896f, 0.769338f, 0.299813f,
 -0.944896f, 0.769338f, 0.299813f,
 -0.939187f, 0.586127f, -0.295773f,
 -0.944896f, 0.769338f, 0.299813f,
 -0.403669f, 2.646167f, -0.213191f,
 -0.939187f, 0.586127f, -0.295773f,
 -0.403669f, 2.646167f, -0.213191f,
 -0.350636f, 0.586082f, -0.296987f,
 -0.939187f, 0.586127f, -0.295773f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.563473f, -0.797815f, -0.214452f},
{ 0.565135f, -0.797537f, -0.211089f},
{ -0.601402f, -0.582029f, 0.547319f},
{ 0.598661f, -0.582012f, 0.550334f},
{ -0.801532f, -0.143765f, 0.580412f},
{ -0.747464f, -0.081311f, 0.659307f},
{ 0.739312f, -0.020101f, 0.673063f},
{ 0.755867f, -0.035951f, 0.653738f},
{ -0.707478f, -0.277054f, -0.650167f},
{ -0.750170f, -0.088197f, -0.655337f},
{ 0.815355f, -0.009843f, -0.578877f},
{ 0.786925f, -0.124978f, -0.604259f},
{ -0.664239f, 0.077877f, -0.743452f},
{ 0.659921f, 0.080717f, -0.746987f},
{ 0.899309f, 0.196864f, 0.390496f},
{ -0.897754f, 0.197814f, 0.393584f},
{ 0.413949f, 0.596062f, 0.688009f},
{ 0.624143f, 0.122332f, 0.771674f},
{ 0.462202f, 0.566720f, -0.682054f},
{ 0.623312f, 0.322710f, -0.712279f},
{ -0.000025f, 0.712447f, 0.701726f},
{ 0.749648f, 0.500089f, 0.433519f},
{ 0.001682f, 0.681483f, -0.731832f},
{ 0.784280f, 0.396677f, -0.477024f},
{ 0.707411f, 0.076701f, 0.702628f},
{ 0.804650f, 0.079599f, -0.588389f},
{ 0.396441f, -0.174758f, 0.901274f},
{ 0.367374f, -0.231661f, -0.900761f},
{ 0.505089f, 0.374859f, -0.777410f},
{ 0.539251f, 0.403570f, 0.739148f},
{ 0.000070f, 0.033242f, 0.999447f},
{ 0.000468f, 0.090528f, 0.995894f},
{ 0.000023f, -0.176510f, 0.984299f},
{ 0.857172f, -0.157791f, 0.490263f},
{ 0.001630f, 0.083059f, -0.996543f},
{ -0.002751f, -0.013806f, -0.999901f},
{ 0.879654f, -0.076836f, -0.469367f},
{ 0.000642f, 0.103646f, 0.994614f},
{ -0.584611f, -0.580374f, 0.566918f},
{ -0.504092f, -0.636625f, -0.583610f},
{ 0.545323f, 0.295062f, 0.784577f},
{ 0.724018f, 0.244246f, -0.645091f},
{ -0.695240f, -0.501081f, 0.515325f},
{ -0.596034f, -0.436739f, -0.673797f},
{ 0.591533f, 0.369352f, -0.716706f},
{ 0.655136f, 0.505708f, 0.561298f},
{ -0.000075f, -0.015197f, -0.999885f},
{ 0.790797f, -0.166955f, 0.588868f},
{ 0.787633f, -0.279298f, -0.549206f},
{ -0.000012f, 0.061838f, -0.998086f},
{ -0.000000f, -0.557325f, -0.830294f},
{ 0.000573f, -0.493899f, 0.869519f},
{ -0.414116f, 0.596099f, 0.687877f},
{ -0.462126f, 0.566687f, -0.682134f},
{ -0.624213f, 0.122356f, 0.771613f},
{ -0.623242f, 0.322706f, -0.712342f},
{ -0.749670f, 0.500084f, 0.433487f},
{ -0.785095f, 0.399113f, -0.473639f},
{ -0.717565f, 0.052886f, 0.694481f},
{ -0.396468f, -0.174865f, 0.901241f},
{ -0.812608f, 0.072731f, -0.578255f},
{ -0.367364f, -0.231656f, -0.900766f},
{ -0.506319f, 0.375050f, -0.776517f},
{ -0.539118f, 0.403568f, 0.739246f},
{ -0.857253f, -0.157634f, 0.490172f},
{ -0.883643f, -0.077522f, -0.461699f},
{ 0.584611f, -0.580374f, 0.566918f},
{ -0.545322f, 0.295063f, 0.784577f},
{ 0.504092f, -0.636624f, -0.583610f},
{ -0.724017f, 0.244246f, -0.645091f},
{ 0.695233f, -0.501089f, 0.515326f},
{ 0.596057f, -0.436732f, -0.673781f},
{ -0.591534f, 0.369352f, -0.716706f},
{ -0.655136f, 0.505709f, 0.561298f},
{ -0.779765f, -0.144835f, 0.609089f},
{ -0.802737f, -0.268053f, -0.532692f},
{ 0.563473f, -0.797815f, -0.214452f},
{ 0.601402f, -0.582029f, 0.547319f},
{ -0.565135f, -0.797537f, -0.211089f},
{ -0.598661f, -0.582012f, 0.550334f},
{ 0.801532f, -0.143765f, 0.580412f},
{ -0.739312f, -0.020101f, 0.673063f},
{ 0.747464f, -0.081311f, 0.659307f},
{ -0.755867f, -0.035951f, 0.653738f},
{ 0.707478f, -0.277054f, -0.650167f},
{ 0.750170f, -0.088197f, -0.655337f},
{ -0.815355f, -0.009843f, -0.578877f},
{ -0.786925f, -0.124978f, -0.604259f},
{ 0.664239f, 0.077877f, -0.743452f},
{ -0.659921f, 0.080717f, -0.746987f},
{ -0.899310f, 0.196864f, 0.390496f},
{ 0.897754f, 0.197814f, 0.393584f},
{ 0.739147f, 0.659490f, -0.136878f},
{ 0.739147f, 0.659490f, -0.136878f},
{ 0.739146f, 0.659490f, -0.136878f},
{ 0.739146f, 0.659490f, -0.136878f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joanna.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117