package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class ragnarwalkd {

static String TextureName = "RagWalk4.mtl";

static int Vertices = 238;

static int VertTexts = 170;

static int Normals = 123;

static int Faces = 168;

static int FacesB = 0;

static int SmoothGroups = 16;

static float VertArray[] = new float[]{
 -1.082893f, 9.507995f, 4.411919f,
 0.273521f, 10.398330f, 5.634700f,
 -1.143906f, 14.364676f, 6.188999f,
 -2.424530f, 12.060914f, 3.881018f,
 2.489354f, 9.503069f, 4.799480f,
 0.895066f, 10.397302f, 5.703217f,
 2.152174f, 14.361547f, 6.551374f,
 3.896828f, 12.079245f, 4.537749f,
 -0.911317f, 10.563270f, 5.307005f,
 -0.965252f, 9.329660f, 5.782312f,
 -0.562530f, 7.206746f, 5.146287f,
 -0.028818f, 5.620751f, 4.616332f,
 0.491595f, 9.135231f, 6.501295f,
 0.573914f, 11.386570f, 5.750203f,
 -0.808924f, 9.020868f, 4.408733f,
 -1.024261f, 10.335757f, 3.656194f,
 0.657752f, 11.487529f, 3.414424f,
 0.310768f, 5.434553f, 1.197373f,
 -0.627916f, 6.888991f, 2.676481f,
 -1.974428f, 3.935922f, 1.085325f,
 -1.154149f, 5.146620f, -1.476163f,
 -1.562514f, 8.838546f, 4.877310f,
 -3.762523f, 7.526354f, 1.178930f,
 1.170514f, 9.424760f, 5.576372f,
 0.617866f, 10.288833f, -0.362719f,
 0.607534f, 3.246103f, -1.273152f,
 -0.014175f, 2.583671f, 2.996338f,
 -3.947309f, 9.287232f, 3.754050f,
 0.509168f, 12.319470f, 3.134200f,
 -1.346841f, 5.982398f, 1.132926f,
 0.000923f, 5.439599f, 2.036246f,
 1.153311f, 6.682231f, -0.499247f,
 -0.563927f, 6.770005f, -0.559743f,
 -1.408296f, 6.576488f, 0.257857f,
 -2.301349f, 3.975078f, -0.553996f,
 0.131994f, 2.206676f, 0.179131f,
 -3.038377f, 7.225044f, 4.266809f,
 -1.499335f, 5.695100f, 3.855548f,
 -2.732465f, 4.717680f, 2.885358f,
 -4.134937f, 5.719133f, 2.983203f,
 -2.327574f, 4.136892f, 6.222481f,
 -1.337130f, 3.384961f, 5.712656f,
 -2.136839f, 2.747645f, 5.079004f,
 -3.134353f, 3.493762f, 5.590397f,
 -2.371925f, 9.446127f, 1.687369f,
 -2.142201f, 9.590112f, 3.967131f,
 -1.850834f, 7.927252f, 1.608687f,
 -1.659791f, 7.478380f, 3.391357f,
 -0.927389f, 2.000336f, -0.802324f,
 -1.218048f, 1.139756f, 0.977097f,
 -2.057099f, 2.076241f, -0.544505f,
 -2.278684f, 1.462535f, 0.798991f,
 -1.029510f, 0.002178f, -2.679308f,
 -0.889388f, -0.006621f, 1.605674f,
 -2.383549f, 0.003874f, -2.519898f,
 -2.384549f, -0.006857f, 1.550861f,
 0.167893f, 4.284365f, -0.257057f,
 -0.789962f, 4.626645f, -0.478010f,
 -1.165429f, 4.397452f, 0.559464f,
 -0.207564f, 3.986202f, 0.837801f,
 -2.208300f, 1.033965f, -0.825935f,
 -2.196786f, 0.825543f, -2.055837f,
 -1.103121f, 0.827750f, -2.292446f,
 -1.135978f, 0.898913f, -0.694272f,
 2.124964f, 10.561512f, 5.637331f,
 2.071933f, 9.328294f, 6.114335f,
 1.810531f, 7.206407f, 5.406102f,
 2.928911f, 9.565889f, 4.023510f,
 2.608993f, 10.864315f, 3.283457f,
 2.023166f, 6.868866f, 2.984961f,
 2.281839f, 3.927216f, 2.397186f,
 2.662810f, 4.065248f, -0.276572f,
 4.670682f, 9.090582f, 4.277167f,
 5.266197f, 9.628890f, -0.459162f,
 5.762591f, 11.114963f, 2.239830f,
 1.698810f, 5.446161f, 2.255574f,
 2.437330f, 6.223011f, 0.518170f,
 2.475093f, 5.891566f, 1.691154f,
 3.029367f, 3.220095f, 1.206735f,
 6.314844f, 9.488190f, 1.639767f,
 6.059506f, 7.342269f, 1.244124f,
 6.742376f, 7.569930f, -0.454442f,
 7.008186f, 9.277380f, -0.494180f,
 8.817484f, 6.816188f, 2.143399f,
 8.380477f, 5.588830f, 1.804598f,
 8.831072f, 5.734144f, 0.692737f,
 9.271452f, 6.960642f, 1.031922f,
 3.731076f, 10.336410f, 1.058197f,
 3.951667f, 10.437395f, 3.372420f,
 3.656115f, 8.730350f, 1.040997f,
 3.967537f, 8.290722f, 2.814533f,
 1.146447f, 2.072327f, 1.834657f,
 1.064944f, 1.976040f, 3.744987f,
 2.247124f, 2.014402f, 2.246155f,
 2.186487f, 1.980321f, 3.663344f,
 1.030286f, -0.001379f, 0.319163f,
 0.889382f, -0.006646f, 4.605591f,
 2.384117f, -0.003802f, 0.482966f,
 2.384351f, -0.006648f, 4.550790f,
 0.946050f, 4.133394f, 0.083610f,
 1.883627f, 4.098180f, 0.499298f,
 1.747057f, 4.172825f, 1.492102f,
 0.582678f, 3.976518f, 1.227244f,
 2.145065f, 1.050707f, 2.242114f,
 2.197392f, 0.823414f, 0.944405f,
 1.105065f, 0.826351f, 0.704273f,
 1.052496f, 1.097518f, 2.287058f,
 9.594609f, 8.349152f, -4.286618f,
 12.536714f, 5.237675f, -3.716068f,
 6.104419f, 7.054153f, 4.777683f,
 9.202234f, 3.880029f, 5.392021f,
 -1.024828f, 8.418481f, 6.088128f,
 -0.101267f, 3.635203f, 9.611305f,
 -4.413498f, 0.273063f, 6.091097f,
 -5.396568f, 4.985027f, 2.619896f,
 -3.947309f, 9.287232f, 3.754050f,
 0.509168f, 12.319470f, 3.134200f,
 0.509168f, 12.319470f, 3.134200f,
 -1.408296f, 6.576488f, 0.257857f,
 -1.408296f, 6.576488f, 0.257857f,
 -3.947309f, 9.287232f, 3.754050f,
 -2.301349f, 3.975078f, -0.553996f,
 -1.408296f, 6.576488f, 0.257857f,
 -1.408296f, 6.576488f, 0.257857f,
 -2.301349f, 3.975078f, -0.553996f,
 0.131994f, 2.206676f, 0.179131f,
 -2.136839f, 2.747645f, 5.079004f,
 -3.134353f, 3.493762f, 5.590397f,
 -3.134353f, 3.493762f, 5.590397f,
 -2.136839f, 2.747645f, 5.079004f,
 -2.136839f, 2.747645f, 5.079004f,
 -2.732465f, 4.717680f, 2.885358f,
 -3.134353f, 3.493762f, 5.590397f,
 -3.134353f, 3.493762f, 5.590397f,
 -2.732465f, 4.717680f, 2.885358f,
 -1.850834f, 7.927252f, 1.608687f,
 -1.850834f, 7.927252f, 1.608687f,
 -0.927389f, 2.000336f, -0.802324f,
 -0.927389f, 2.000336f, -0.802324f,
 -1.103121f, 0.827750f, -2.292446f,
 0.167893f, 4.284365f, -0.257057f,
 -0.927389f, 2.000336f, -0.802324f,
 -0.927389f, 2.000336f, -0.802324f,
 -2.196786f, 0.825543f, -2.055837f,
 -2.208300f, 1.033965f, -0.825935f,
 -2.208300f, 1.033965f, -0.825935f,
 -1.029510f, 0.002178f, -2.679308f,
 -1.103121f, 0.827750f, -2.292446f,
 -1.103121f, 0.827750f, -2.292446f,
 -2.196786f, 0.825543f, -2.055837f,
 -0.889388f, -0.006621f, 1.605674f,
 -1.029510f, 0.002178f, -2.679308f,
 -1.135978f, 0.898913f, -0.694272f,
 -1.135978f, 0.898913f, -0.694272f,
 -1.029510f, 0.002178f, -2.679308f,
 -1.103121f, 0.827750f, -2.292446f,
 -2.208300f, 1.033965f, -0.825935f,
 -1.135978f, 0.898913f, -0.694272f,
 -1.135978f, 0.898913f, -0.694272f,
 -0.889388f, -0.006621f, 1.605674f,
 -0.028818f, 5.620751f, 4.616332f,
 0.491595f, 9.135231f, 6.501295f,
 0.491595f, 9.135231f, 6.501295f,
 0.491595f, 9.135231f, 6.501295f,
 0.491595f, 9.135231f, 6.501295f,
 0.573914f, 11.386570f, 5.750203f,
 0.657752f, 11.487529f, 3.414424f,
 0.657752f, 11.487529f, 3.414424f,
 0.573914f, 11.386570f, 5.750203f,
 -0.028818f, 5.620751f, 4.616332f,
 -0.028818f, 5.620751f, 4.616332f,
 0.310768f, 5.434553f, 1.197373f,
 0.509168f, 12.319470f, 3.134200f,
 0.617866f, 10.288833f, -0.362719f,
 0.617866f, 10.288833f, -0.362719f,
 5.762591f, 11.114963f, 2.239830f,
 0.509168f, 12.319470f, 3.134200f,
 0.509168f, 12.319470f, 3.134200f,
 1.170514f, 9.424760f, 5.576372f,
 1.153311f, 6.682231f, -0.499247f,
 0.617866f, 10.288833f, -0.362719f,
 0.617866f, 10.288833f, -0.362719f,
 0.000923f, 5.439599f, 2.036246f,
 0.000923f, 5.439599f, 2.036246f,
 -0.014175f, 2.583671f, 2.996338f,
 5.762591f, 11.114963f, 2.239830f,
 2.475093f, 5.891566f, 1.691154f,
 2.475093f, 5.891566f, 1.691154f,
 1.153311f, 6.682231f, -0.499247f,
 1.153311f, 6.682231f, -0.499247f,
 0.607534f, 3.246103f, -1.273152f,
 1.170514f, 9.424760f, 5.576372f,
 0.000923f, 5.439599f, 2.036246f,
 0.000923f, 5.439599f, 2.036246f,
 3.029367f, 3.220095f, 1.206735f,
 2.475093f, 5.891566f, 1.691154f,
 2.475093f, 5.891566f, 1.691154f,
 -0.014175f, 2.583671f, 2.996338f,
 0.131994f, 2.206676f, 0.179131f,
 0.131994f, 2.206676f, 0.179131f,
 3.029367f, 3.220095f, 1.206735f,
 0.131994f, 2.206676f, 0.179131f,
 0.607534f, 3.246103f, -1.273152f,
 0.607534f, 3.246103f, -1.273152f,
 9.271452f, 6.960642f, 1.031922f,
 9.271452f, 6.960642f, 1.031922f,
 8.831072f, 5.734144f, 0.692737f,
 8.831072f, 5.734144f, 0.692737f,
 8.831072f, 5.734144f, 0.692737f,
 6.742376f, 7.569930f, -0.454442f,
 9.271452f, 6.960642f, 1.031922f,
 9.271452f, 6.960642f, 1.031922f,
 3.656115f, 8.730350f, 1.040997f,
 3.656115f, 8.730350f, 1.040997f,
 6.742376f, 7.569930f, -0.454442f,
 1.105065f, 0.826351f, 0.704273f,
 1.146447f, 2.072327f, 1.834657f,
 1.146447f, 2.072327f, 1.834657f,
 1.146447f, 2.072327f, 1.834657f,
 1.146447f, 2.072327f, 1.834657f,
 0.946050f, 4.133394f, 0.083610f,
 2.145065f, 1.050707f, 2.242114f,
 2.145065f, 1.050707f, 2.242114f,
 2.197392f, 0.823414f, 0.944405f,
 2.197392f, 0.823414f, 0.944405f,
 1.105065f, 0.826351f, 0.704273f,
 1.105065f, 0.826351f, 0.704273f,
 1.030286f, -0.001379f, 0.319163f,
 1.105065f, 0.826351f, 0.704273f,
 1.030286f, -0.001379f, 0.319163f,
 1.052496f, 1.097518f, 2.287058f,
 1.052496f, 1.097518f, 2.287058f,
 1.030286f, -0.001379f, 0.319163f,
 0.889382f, -0.006646f, 4.605591f,
 2.145065f, 1.050707f, 2.242114f,
 1.052496f, 1.097518f, 2.287058f,
 1.052496f, 1.097518f, 2.287058f,
 0.889382f, -0.006646f, 4.605591f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.210839f, -0.041423f,
 0.285887f, 0.101580f,
 0.176571f, 0.484642f,
 0.021531f, 0.163306f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.013347f, 0.989437f,
 0.013347f, 0.412760f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.508256f, 0.857141f,
 0.999194f, 0.825257f,
 0.975622f, 0.556485f,
 0.551829f, 0.529642f,
 0.762511f, 0.879742f,
 0.968799f, 0.979409f,
 0.592427f, 0.672403f,
 0.542608f, 0.666950f,
 0.971098f, 0.678132f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.639777f, 0.472055f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.092566f, 0.905169f,
 0.103424f, 0.808166f,
 0.093844f, 0.625832f,
 0.192207f, 0.808166f,
 0.164310f, 0.929344f,
 0.165447f, 0.558111f,
 0.620875f, 0.595240f,
 0.893289f, 0.616672f,
 0.633892f, 0.833904f,
 0.846020f, 0.811014f,
 0.762511f, 0.879742f,
 0.592427f, 0.672403f,
 0.889854f, 0.680554f,
 0.843077f, 0.676027f,
 0.846481f, 0.575682f,
 0.356757f, 0.879728f,
 0.286059f, 0.832288f,
 0.480386f, 0.813107f,
 0.433271f, 0.853567f,
 0.350836f, 0.738776f,
 0.303186f, 0.720185f,
 0.320873f, 0.678150f,
 0.368114f, 0.697246f,
 0.443448f, 0.971941f,
 0.356050f, 0.998934f,
 0.503720f, 0.952628f,
 0.274924f, 0.967028f,
 0.230404f, 0.625207f,
 0.363360f, 0.611016f,
 0.276621f, 0.620714f,
 0.326923f, 0.611250f,
 0.843016f, 0.589495f,
 0.732209f, 0.478687f,
 0.806926f, 0.616705f,
 0.702961f, 0.512947f,
 0.171796f, 0.511290f,
 0.236933f, 0.493612f,
 0.323008f, 0.501337f,
 0.400130f, 0.507294f,
 0.314087f, 0.670139f,
 0.271059f, 0.699000f,
 0.224680f, 0.698634f,
 0.365599f, 0.674181f,
 0.276795f, 0.002094f,
 0.555656f, 0.002094f,
 0.276795f, 0.471994f,
 0.555656f, 0.471994f,
 0.569079f, 0.470162f,
 0.997072f, 0.470162f,
 0.997072f, 0.002210f,
 0.569079f, 0.002210f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.746989f, 0.877263f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.440542f, 0.704543f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.218498f, 0.814911f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.420018f, 0.712424f,
 0.489396f, 0.525040f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.775316f, 0.625800f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.775316f, 0.625800f,
 0.773592f, 0.809902f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,
 0.013347f, 0.528962f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.808166f,
 0.013347f, 0.941674f,
 0.013347f, 0.989437f,
 0.013347f, 0.989437f,
 0.013347f, 0.941674f,
 0.013347f, 0.528962f,
 0.013347f, 0.528962f,
 0.013347f, 0.412760f,
 0.968799f, 0.979409f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.746989f, 0.877263f,
 0.555582f, 0.992492f,
 0.555582f, 0.992492f,
 0.508256f, 0.857141f,
 0.971098f, 0.678132f,
 0.999194f, 0.825257f,
 0.999194f, 0.825257f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.551829f, 0.529642f,
 0.746989f, 0.877263f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.971098f, 0.678132f,
 0.971098f, 0.678132f,
 0.975622f, 0.556485f,
 0.508256f, 0.857141f,
 0.542608f, 0.666950f,
 0.542608f, 0.666950f,
 0.671984f, 0.579828f,
 0.661126f, 0.677823f,
 0.661126f, 0.677823f,
 0.551829f, 0.529642f,
 0.639777f, 0.472055f,
 0.639777f, 0.472055f,
 0.671984f, 0.579828f,
 0.912281f, 0.487364f,
 0.975622f, 0.556485f,
 0.975622f, 0.556485f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.440542f, 0.704543f,
 0.258556f, 0.708240f,
 0.258556f, 0.708240f,
 0.218498f, 0.814911f,
 0.397521f, 0.732265f,
 0.397521f, 0.732265f,
 0.206379f, 0.950997f,
 0.206379f, 0.950997f,
 0.218498f, 0.814911f,
 0.420018f, 0.712424f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.424695f, 0.637310f,
 0.489396f, 0.525040f,
 0.731916f, 0.600795f,
 0.731916f, 0.600795f,
 0.775316f, 0.625800f,
 0.775316f, 0.625800f,
 0.785650f, 0.664322f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.785650f, 0.664322f,
 0.817299f, 0.659726f,
 0.756028f, 0.715566f,
 0.756028f, 0.715566f,
 0.817299f, 0.659726f,
 0.773592f, 0.809902f,
 0.731916f, 0.600795f,
 0.692441f, 0.608961f,
 0.692441f, 0.608961f,
 0.661792f, 0.529129f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.603626f, -0.154571f, 0.782140f},
{ -0.636323f, -0.270668f, 0.722379f},
{ -0.642172f, -0.296484f, 0.706903f},
{ -0.648522f, -0.327769f, 0.687013f},
{ 0.426523f, -0.142280f, 0.893216f},
{ 0.485039f, -0.295274f, 0.823135f},
{ 0.475271f, -0.267385f, 0.838226f},
{ 0.496362f, -0.329259f, 0.803252f},
{ -0.053561f, -0.923219f, 0.380524f},
{ -0.092196f, -0.124984f, 0.987866f},
{ -0.827008f, -0.331022f, 0.454403f},
{ -0.793495f, -0.076066f, 0.603804f},
{ -0.732613f, 0.569879f, 0.372177f},
{ -0.042662f, 0.836485f, 0.546326f},
{ -0.993022f, -0.117859f, -0.003953f},
{ -0.820828f, 0.570732f, -0.022498f},
{ 0.004409f, 0.996706f, 0.080978f},
{ -0.922716f, -0.385307f, -0.011551f},
{ 0.085841f, -0.994335f, 0.062678f},
{ -0.174595f, 0.984274f, -0.026864f},
{ -0.224053f, 0.594058f, -0.772590f},
{ -0.929086f, 0.361231f, 0.079448f},
{ -0.819149f, 0.242625f, -0.519739f},
{ -0.348129f, -0.239631f, 0.906302f},
{ 0.125908f, -0.103431f, 0.986635f},
{ 0.389847f, 0.162070f, -0.906506f},
{ -0.307678f, 0.233214f, -0.922467f},
{ -0.900011f, -0.435846f, 0.004329f},
{ -0.139144f, -0.612336f, 0.778257f},
{ -0.239125f, -0.389091f, 0.889622f},
{ -0.848112f, -0.284103f, 0.447204f},
{ -0.867924f, -0.241966f, 0.433775f},
{ -0.225952f, 0.145764f, -0.963171f},
{ -0.862807f, -0.329348f, -0.383529f},
{ 0.203437f, -0.395837f, -0.895504f},
{ -0.062246f, -0.983664f, -0.168911f},
{ 0.061152f, 0.377870f, 0.923837f},
{ -0.894250f, -0.308615f, 0.324152f},
{ 0.961569f, -0.169602f, 0.215917f},
{ 0.186940f, -0.868828f, -0.458467f},
{ 0.108266f, -0.626826f, -0.771601f},
{ -0.981722f, -0.026858f, -0.188414f},
{ -0.605235f, 0.488730f, 0.628358f},
{ -0.919519f, 0.302187f, -0.251333f},
{ -0.868251f, 0.370770f, 0.329652f},
{ 0.999916f, 0.012356f, -0.003949f},
{ -0.089514f, -0.223323f, -0.970626f},
{ 0.836762f, 0.072949f, 0.542686f},
{ -0.788559f, 0.444988f, -0.424452f},
{ -0.417596f, 0.342394f, -0.841653f},
{ 0.814484f, -0.007588f, -0.580136f},
{ 0.820110f, -0.273254f, -0.502745f},
{ -0.799532f, 0.390762f, 0.456130f},
{ -0.749439f, -0.058083f, 0.659521f},
{ 0.546170f, -0.473669f, 0.690896f},
{ 0.671172f, -0.277605f, 0.687359f},
{ 0.961841f, 0.200627f, 0.186040f},
{ 0.524048f, 0.583658f, -0.620256f},
{ -0.509548f, 0.646204f, -0.568138f},
{ -0.959669f, 0.239104f, 0.147870f},
{ -0.001489f, -0.999997f, -0.002005f},
{ -0.000098f, -0.999997f, -0.002508f},
{ -0.001117f, -0.999997f, -0.002139f},
{ 0.000255f, -0.999996f, -0.002636f},
{ -0.843435f, 0.355940f, -0.402397f},
{ -0.296013f, 0.892142f, 0.341262f},
{ 0.768518f, 0.361877f, -0.527660f},
{ 0.243036f, 0.911180f, 0.332692f},
{ 0.593668f, -0.564551f, 0.573446f},
{ 0.687676f, -0.104284f, 0.718489f},
{ 0.591909f, 0.615144f, 0.520809f},
{ 0.545748f, 0.809535f, 0.216361f},
{ 0.963243f, -0.079561f, 0.256581f},
{ 0.717925f, -0.683802f, 0.130376f},
{ 0.802966f, 0.593640f, 0.053263f},
{ 0.674571f, 0.040266f, -0.737111f},
{ 0.668841f, -0.165338f, 0.724786f},
{ 0.511940f, -0.225587f, -0.828872f},
{ 0.874874f, -0.466521f, 0.130207f},
{ 0.081900f, -0.350166f, 0.933100f},
{ 0.466870f, -0.352119f, 0.811200f},
{ 0.756549f, -0.637315f, 0.146506f},
{ 0.724350f, -0.069440f, -0.685926f},
{ 0.294609f, 0.199447f, 0.934573f},
{ -0.323017f, -0.813102f, 0.484277f},
{ 0.876025f, 0.421995f, -0.233453f},
{ 0.122353f, -0.728925f, -0.673571f},
{ 0.371214f, 0.681194f, -0.631011f},
{ -0.195281f, -0.432223f, -0.880368f},
{ 0.630492f, 0.523351f, 0.573223f},
{ 0.526594f, 0.647423f, 0.550947f},
{ 0.039403f, 0.832727f, -0.552280f},
{ -0.404749f, -0.786840f, 0.465898f},
{ -0.544278f, -0.433954f, -0.717945f},
{ 0.276550f, -0.612012f, 0.740919f},
{ -0.183780f, -0.646753f, -0.740227f},
{ 0.633585f, -0.443034f, -0.634264f},
{ -0.754325f, -0.250694f, -0.606750f},
{ 0.942559f, 0.091208f, -0.321348f},
{ 0.444126f, 0.709149f, 0.547594f},
{ 0.531223f, 0.239244f, 0.812751f},
{ -0.956714f, 0.193437f, 0.217440f},
{ -0.527225f, 0.175190f, 0.831470f},
{ -0.521839f, 0.521363f, -0.675177f},
{ -0.956709f, 0.209542f, 0.201989f},
{ 0.598781f, 0.549734f, -0.582455f},
{ 0.934206f, 0.250384f, 0.254102f},
{ -0.000027f, -1.000000f, -0.000699f},
{ -0.000353f, -1.000000f, -0.000818f},
{ -0.001293f, -0.999999f, -0.001158f},
{ -0.001635f, -0.999998f, -0.001282f},
{ 0.329552f, 0.866053f, 0.375963f},
{ 0.840137f, 0.380744f, -0.386270f},
{ -0.829405f, 0.281483f, -0.482551f},
{ -0.328356f, 0.861546f, 0.387197f},
{ -0.651531f, -0.678345f, -0.339640f},
{ -0.641362f, -0.686340f, -0.342919f},
{ -0.647734f, -0.681355f, -0.340876f},
{ -0.637820f, -0.689074f, -0.344038f},
{ -0.728237f, 0.309695f, 0.611360f},
{ -0.730358f, 0.303740f, 0.611817f},
{ -0.730129f, 0.304386f, 0.611768f},
{ -0.732292f, 0.298227f, 0.612217f}};

static int[] FaceArray = new int[]{
0, 1, 3,
3, 1, 2,
4, 7, 5,
5, 7, 6,
11, 12, 10,
10, 12, 9,
9, 12, 8,
8, 12, 13,
9, 8, 14,
14, 8, 15,
13, 16, 8,
8, 16, 15,
10, 18, 11,
11, 18, 17,
9, 14, 10,
10, 14, 18,
28, 24, 27,
27, 24, 22,
115, 21, 116,
117, 21, 23,
31, 32, 24,
24, 32, 22,
27, 22, 33,
33, 22, 32,
26, 30, 19,
19, 30, 29,
29, 21, 118,
119, 21, 120,
32, 20, 33,
33, 20, 34,
25, 20, 31,
31, 20, 32,
23, 21, 30,
30, 21, 29,
121, 19, 122,
123, 19, 29,
124, 35, 19,
19, 35, 26,
20, 25, 34,
34, 25, 125,
40, 43, 41,
41, 43, 42,
126, 127, 38,
38, 128, 39,
39, 36, 44,
44, 36, 45,
41, 37, 40,
40, 37, 36,
41, 129, 37,
37, 130, 131,
39, 132, 36,
36, 133, 40,
38, 39, 46,
46, 39, 44,
37, 47, 36,
36, 47, 45,
134, 135, 37,
37, 136, 47,
50, 57, 48,
48, 57, 56,
57, 50, 58,
58, 50, 51,
51, 49, 58,
58, 49, 59,
49, 63, 137,
138, 63, 139,
62, 61, 48,
48, 61, 50,
60, 63, 51,
51, 63, 49,
51, 50, 60,
60, 50, 61,
52, 53, 54,
54, 53, 55,
140, 59, 141,
142, 59, 49,
143, 54, 144,
145, 54, 55,
146, 54, 147,
148, 54, 149,
150, 151, 152,
153, 154, 155,
156, 55, 157,
158, 55, 159,
160, 66, 161,
162, 66, 65,
65, 64, 163,
164, 64, 165,
68, 64, 67,
67, 64, 65,
68, 166, 64,
64, 167, 168,
66, 169, 69,
69, 170, 171,
69, 67, 66,
66, 67, 65,
172, 74, 173,
174, 74, 73,
175, 176, 72,
72, 177, 178,
179, 180, 76,
76, 181, 73,
76, 73, 77,
77, 73, 74,
75, 182, 70,
70, 183, 184,
185, 72, 186,
187, 72, 75,
78, 71, 77,
77, 71, 76,
76, 71, 188,
189, 71, 190,
191, 192, 72,
72, 193, 75,
194, 195, 70,
70, 196, 75,
197, 198, 70,
70, 199, 200,
201, 202, 78,
78, 203, 71,
83, 84, 86,
86, 84, 85,
82, 204, 81,
81, 205, 206,
88, 79, 87,
87, 79, 82,
79, 80, 83,
83, 80, 84,
84, 80, 207,
208, 80, 209,
82, 79, 210,
211, 79, 83,
87, 82, 89,
89, 82, 81,
88, 90, 79,
79, 90, 80,
90, 212, 80,
80, 213, 214,
99, 100, 91,
91, 100, 93,
100, 101, 93,
93, 101, 94,
102, 92, 101,
101, 92, 94,
215, 106, 216,
217, 106, 92,
93, 104, 91,
91, 104, 105,
92, 106, 94,
94, 106, 103,
94, 103, 93,
93, 103, 104,
98, 96, 97,
97, 96, 95,
92, 102, 218,
219, 102, 220,
98, 97, 221,
222, 97, 223,
224, 97, 225,
226, 97, 227,
228, 229, 230,
231, 232, 233,
234, 235, 98,
98, 236, 237,
108, 110, 107,
107, 110, 109,
111, 114, 112,
112, 114, 113, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 238  Texture Co-ords: 170  Normals: 123  Texture: RagWalk4.mtl Faces: 168 Smooth Groups: 16 sucess: 92 Doubles: 76 Redos needed: 123 Correct: 105