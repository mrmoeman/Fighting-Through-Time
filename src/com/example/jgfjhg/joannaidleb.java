package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannaidleb {

static String TextureName = "joannaidile2.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.254836f, 0.724676f, -1.175620f,
 0.785924f, 0.860543f, -1.400648f,
 1.040745f, 0.635466f, -0.878356f,
 0.500346f, 0.522802f, -0.673396f,
 0.283122f, 0.065477f, -1.383945f,
 0.863753f, 0.061374f, -1.495291f,
 1.227995f, 0.061373f, 0.597434f,
 0.647720f, 0.061362f, 0.697604f,
 -0.113866f, 3.091687f, -0.310825f,
 0.621263f, 3.269643f, -0.448142f,
 0.893875f, 3.439377f, 0.364612f,
 0.192664f, 3.284860f, 0.598683f,
 0.743613f, 1.956236f, 0.654501f,
 1.218545f, 2.050502f, 0.472984f,
 0.998292f, 2.184599f, -0.017305f,
 0.507049f, 2.112475f, 0.177502f,
 0.868972f, 7.723553f, 1.117710f,
 0.189160f, 5.913997f, 1.078035f,
 -0.317288f, 6.891517f, 0.805396f,
 0.222725f, 7.646631f, 0.747064f,
 0.253930f, 7.432209f, 2.194285f,
 0.327018f, 6.462550f, 0.334552f,
 -0.287915f, 6.810438f, -0.030912f,
 -0.119761f, 5.282033f, 0.384224f,
 0.514753f, 5.127179f, 0.058224f,
 0.858373f, 4.753539f, 0.368716f,
 0.473616f, 4.492844f, 0.978188f,
 0.222759f, 8.729610f, 2.257344f,
 0.859256f, 8.478957f, 1.911912f,
 0.859062f, 7.621647f, 1.866724f,
 0.644204f, 7.200168f, 1.288989f,
 0.834547f, 6.410795f, -0.084836f,
 0.243474f, 8.776175f, 0.832135f,
 0.869261f, 8.502935f, 1.152295f,
 0.440644f, 7.376201f, 0.901435f,
 0.563067f, 6.408610f, -0.404776f,
 0.815479f, 7.156768f, 0.011590f,
 0.474471f, 7.245306f, -0.305484f,
 0.634540f, 5.445603f, -0.216282f,
 0.914589f, 5.491814f, -0.480262f,
 0.759494f, 5.288707f, -0.726413f,
 0.475518f, 5.217644f, -0.502461f,
 0.488344f, 6.996790f, 1.703034f,
 0.242489f, 7.268234f, 0.766987f,
 1.933485f, 5.418786f, 1.111817f,
 2.101419f, 5.537620f, 0.422704f,
 2.077501f, 5.057436f, 0.232542f,
 1.874370f, 4.705245f, 0.708539f,
 -0.912734f, 2.604597f, -0.457294f,
 1.338598f, 3.322796f, 0.443718f,
 0.822603f, 3.027708f, -0.888367f,
 0.287080f, 2.943059f, 1.136656f,
 0.044521f, 7.201248f, 2.017878f,
 0.543120f, 6.682837f, 1.890582f,
 0.097754f, 7.096291f, 2.462431f,
 0.634816f, 6.597823f, 2.289528f,
 -0.404106f, 8.478426f, 1.896078f,
 -0.393826f, 8.502252f, 1.137297f,
 -0.134398f, 4.749010f, 1.374902f,
 -0.444950f, 5.126499f, 1.018849f,
 -0.234152f, 6.213699f, 1.809128f,
 -0.535261f, 6.465278f, 2.187801f,
 -0.224367f, 7.261174f, 1.429622f,
 -0.035150f, 7.101333f, 1.735345f,
 -0.404446f, 7.621302f, 1.850089f,
 -0.393923f, 7.722940f, 1.102376f,
 1.458195f, 6.155254f, -0.012616f,
 2.089491f, 5.746547f, 0.319845f,
 1.772452f, 6.582766f, 0.475328f,
 2.170234f, 6.290385f, 0.636163f,
 1.198403f, 5.900220f, 1.813766f,
 1.427340f, 5.709658f, 2.124255f,
 1.651176f, 6.001117f, 2.156599f,
 1.460515f, 6.183238f, 1.880510f,
 -1.224348f, 3.676303f, 1.761074f,
 -1.508865f, 2.930540f, 0.916190f,
 -0.305756f, 0.605959f, 1.724030f,
 -0.887251f, 0.593094f, 1.658495f,
 -0.986665f, 0.746893f, 2.254121f,
 -0.404445f, 0.762836f, 2.338354f,
 -0.284558f, 0.062200f, 1.593059f,
 -0.863753f, 0.061375f, 1.504708f,
 -1.227995f, 0.061373f, 3.597430f,
 -0.647715f, 0.061373f, 3.695953f,
 -0.071771f, 3.053397f, 0.891717f,
 -0.832425f, 3.144660f, 0.908101f,
 -0.938919f, 3.754581f, 1.522110f,
 -0.188923f, 3.752563f, 1.610843f,
 -0.528707f, 2.694312f, 2.523223f,
 -1.038839f, 2.689779f, 2.466188f,
 -0.954362f, 2.484435f, 1.929965f,
 -0.436099f, 2.471978f, 1.914165f,
 1.856080f, 11.285313f, 0.769207f,
 2.087600f, 10.999144f, 1.861533f,
 1.502105f, 4.058694f, -0.315360f,
 1.659408f, 3.896562f, 0.730020f,
 0.507049f, 2.112475f, 0.177502f,
 0.507049f, 2.112475f, 0.177502f,
 -0.113866f, 3.091687f, -0.310825f,
 0.254836f, 0.724676f, -1.175620f,
 0.283122f, 0.065477f, -1.383945f,
 0.283122f, 0.065477f, -1.383945f,
 0.254836f, 0.724676f, -1.175620f,
 0.283122f, 0.065477f, -1.383945f,
 0.500346f, 0.522802f, -0.673396f,
 0.500346f, 0.522802f, -0.673396f,
 0.283122f, 0.065477f, -1.383945f,
 0.647720f, 0.061362f, 0.697604f,
 0.500346f, 0.522802f, -0.673396f,
 0.647720f, 0.061362f, 0.697604f,
 0.647720f, 0.061362f, 0.697604f,
 1.040745f, 0.635466f, -0.878356f,
 1.040745f, 0.635466f, -0.878356f,
 1.040745f, 0.635466f, -0.878356f,
 1.040745f, 0.635466f, -0.878356f,
 0.785924f, 0.860543f, -1.400648f,
 0.785924f, 0.860543f, -1.400648f,
 0.507049f, 2.112475f, 0.177502f,
 0.507049f, 2.112475f, 0.177502f,
 0.785924f, 0.860543f, -1.400648f,
 0.254836f, 0.724676f, -1.175620f,
 0.644204f, 7.200168f, 1.288989f,
 0.644204f, 7.200168f, 1.288989f,
 0.327018f, 6.462550f, 0.334552f,
 0.327018f, 6.462550f, 0.334552f,
 0.644204f, 7.200168f, 1.288989f,
 0.644204f, 7.200168f, 1.288989f,
 0.440644f, 7.376201f, 0.901435f,
 0.440644f, 7.376201f, 0.901435f,
 0.440644f, 7.376201f, 0.901435f,
 0.644204f, 7.200168f, 1.288989f,
 0.644204f, 7.200168f, 1.288989f,
 0.327018f, 6.462550f, 0.334552f,
 -0.287915f, 6.810438f, -0.030912f,
 0.634540f, 5.445603f, -0.216282f,
 0.634540f, 5.445603f, -0.216282f,
 -0.287915f, 6.810438f, -0.030912f,
 -0.287915f, 6.810438f, -0.030912f,
 0.327018f, 6.462550f, 0.334552f,
 1.933485f, 5.418786f, 1.111817f,
 1.933485f, 5.418786f, 1.111817f,
 0.634540f, 5.445603f, -0.216282f,
 1.874370f, 4.705245f, 0.708539f,
 1.874370f, 4.705245f, 0.708539f,
 0.634540f, 5.445603f, -0.216282f,
 -0.287915f, 6.810438f, -0.030912f,
 -0.287915f, 6.810438f, -0.030912f,
 0.440644f, 7.376201f, 0.901435f,
 0.440644f, 7.376201f, 0.901435f,
 1.874370f, 4.705245f, 0.708539f,
 -0.912734f, 2.604597f, -0.457294f,
 0.822603f, 3.027708f, -0.888367f,
 0.287080f, 2.943059f, 1.136656f,
 0.287080f, 2.943059f, 1.136656f,
 0.822603f, 3.027708f, -0.888367f,
 1.338598f, 3.322796f, 0.443718f,
 0.222759f, 8.729610f, 2.257344f,
 0.243474f, 8.776175f, 0.832135f,
 0.243474f, 8.776175f, 0.832135f,
 0.189160f, 5.913997f, 1.078035f,
 -0.035150f, 7.101333f, 1.735345f,
 0.189160f, 5.913997f, 1.078035f,
 0.488344f, 6.996790f, 1.703034f,
 -0.035150f, 7.101333f, 1.735345f,
 -0.234152f, 6.213699f, 1.809128f,
 -0.234152f, 6.213699f, 1.809128f,
 0.488344f, 6.996790f, 1.703034f,
 0.253930f, 7.432209f, 2.194285f,
 -0.035150f, 7.101333f, 1.735345f,
 0.253930f, 7.432209f, 2.194285f,
 -0.035150f, 7.101333f, 1.735345f,
 0.242489f, 7.268234f, 0.766987f,
 -0.224367f, 7.261174f, 1.429622f,
 0.222725f, 7.646631f, 0.747064f,
 -0.224367f, 7.261174f, 1.429622f,
 0.222725f, 7.646631f, 0.747064f,
 -0.224367f, 7.261174f, 1.429622f,
 -0.035150f, 7.101333f, 1.735345f,
 -0.035150f, 7.101333f, 1.735345f,
 0.473616f, 4.492844f, 0.978188f,
 0.189160f, 5.913997f, 1.078035f,
 0.189160f, 5.913997f, 1.078035f,
 -0.234152f, 6.213699f, 1.809128f,
 1.198403f, 5.900220f, 1.813766f,
 -0.535261f, 6.465278f, 2.187801f,
 1.198403f, 5.900220f, 1.813766f,
 -0.535261f, 6.465278f, 2.187801f,
 -0.535261f, 6.465278f, 2.187801f,
 -0.234152f, 6.213699f, 1.809128f,
 1.458195f, 6.155254f, -0.012616f,
 1.458195f, 6.155254f, -0.012616f,
 2.089491f, 5.746547f, 0.319845f,
 1.198403f, 5.900220f, 1.813766f,
 2.089491f, 5.746547f, 0.319845f,
 1.198403f, 5.900220f, 1.813766f,
 -0.535261f, 6.465278f, 2.187801f,
 -0.535261f, 6.465278f, 2.187801f,
 -0.224367f, 7.261174f, 1.429622f,
 -0.317288f, 6.891517f, 0.805396f,
 -0.224367f, 7.261174f, 1.429622f,
 0.242489f, 7.268234f, 0.766987f,
 -0.317288f, 6.891517f, 0.805396f,
 2.089491f, 5.746547f, 0.319845f,
 0.222725f, 7.646631f, 0.747064f,
 0.243474f, 8.776175f, 0.832135f,
 0.222725f, 7.646631f, 0.747064f,
 0.222759f, 8.729610f, 2.257344f,
 0.253930f, 7.432209f, 2.194285f,
 0.253930f, 7.432209f, 2.194285f,
 -0.119761f, 5.282033f, 0.384224f,
 -0.317288f, 6.891517f, 0.805396f,
 -0.119761f, 5.282033f, 0.384224f,
 -0.912734f, 2.604597f, -0.457294f,
 -0.119761f, 5.282033f, 0.384224f,
 -0.119761f, 5.282033f, 0.384224f,
 0.287080f, 2.943059f, 1.136656f,
 0.473616f, 4.492844f, 0.978188f,
 0.473616f, 4.492844f, 0.978188f,
 -0.912734f, 2.604597f, -0.457294f,
 0.287080f, 2.943059f, 1.136656f,
 -1.508865f, 2.930540f, 0.916190f,
 0.287080f, 2.943059f, 1.136656f,
 -1.224348f, 3.676303f, 1.761074f,
 -1.508865f, 2.930540f, 0.916190f,
 -0.436099f, 2.471978f, 1.914165f,
 -0.071771f, 3.053397f, 0.891717f,
 -0.436099f, 2.471978f, 1.914165f,
 -0.305756f, 0.605959f, 1.724030f,
 -0.284558f, 0.062200f, 1.593059f,
 -0.284558f, 0.062200f, 1.593059f,
 -0.305756f, 0.605959f, 1.724030f,
 -0.404445f, 0.762836f, 2.338354f,
 -0.284558f, 0.062200f, 1.593059f,
 -0.404445f, 0.762836f, 2.338354f,
 -0.647715f, 0.061373f, 3.695953f,
 -0.284558f, 0.062200f, 1.593059f,
 -0.404445f, 0.762836f, 2.338354f,
 -0.647715f, 0.061373f, 3.695953f,
 -0.647715f, 0.061373f, 3.695953f,
 -0.986665f, 0.746893f, 2.254121f,
 -0.986665f, 0.746893f, 2.254121f,
 -0.986665f, 0.746893f, 2.254121f,
 -0.887251f, 0.593094f, 1.658495f,
 -0.986665f, 0.746893f, 2.254121f,
 -0.436099f, 2.471978f, 1.914165f,
 -0.887251f, 0.593094f, 1.658495f,
 -0.436099f, 2.471978f, 1.914165f,
 -0.305756f, 0.605959f, 1.724030f,
 -0.887251f, 0.593094f, 1.658495f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.486715f, -0.841316f, -0.235152f},
{ 0.446769f, -0.799879f, -0.400738f},
{ -0.311274f, -0.716012f, 0.624848f},
{ 0.577877f, -0.650258f, 0.493176f},
{ -0.422613f, -0.150093f, 0.893795f},
{ -0.178196f, -0.396353f, 0.900639f},
{ 0.854382f, 0.242710f, 0.459482f},
{ 0.868817f, -0.165860f, 0.466527f},
{ -0.704356f, -0.619476f, -0.346600f},
{ -0.979218f, -0.137928f, -0.148688f},
{ 0.602357f, 0.338952f, -0.722688f},
{ 0.542935f, -0.192224f, -0.817478f},
{ -0.886243f, 0.336311f, -0.318542f},
{ 0.260323f, 0.557663f, -0.788190f},
{ 0.999527f, 0.017238f, 0.025472f},
{ -0.788921f, 0.047174f, 0.612682f},
{ 0.991707f, 0.127496f, -0.016163f},
{ 0.942476f, -0.034066f, 0.332533f},
{ -0.257976f, 0.754190f, -0.603859f},
{ -0.074092f, 0.161984f, -0.984008f},
{ -0.016337f, 0.676968f, 0.735832f},
{ 0.743634f, 0.483060f, 0.462236f},
{ 0.013610f, 0.703090f, -0.710971f},
{ 0.789365f, 0.405665f, -0.460801f},
{ 0.941810f, 0.268373f, 0.202412f},
{ 0.253570f, 0.293578f, -0.921691f},
{ 0.949234f, -0.267318f, 0.165818f},
{ -0.847294f, 0.248045f, -0.469644f},
{ 0.184568f, 0.910668f, -0.369620f},
{ 0.923168f, -0.378078f, 0.069410f},
{ 0.893661f, -0.019658f, 0.448311f},
{ 0.594632f, -0.464476f, 0.656258f},
{ 0.036748f, -0.320644f, 0.946487f},
{ 0.820113f, -0.313344f, 0.478781f},
{ -0.600666f, 0.147732f, -0.785732f},
{ -0.112899f, -0.052905f, -0.992197f},
{ 0.888011f, -0.109278f, -0.446649f},
{ 0.592859f, 0.073909f, 0.801907f},
{ -0.370588f, 0.303788f, 0.877712f},
{ -0.308247f, -0.853957f, 0.419216f},
{ 0.435108f, 0.894024f, -0.106780f},
{ 0.566134f, -0.504480f, -0.651914f},
{ -0.488712f, -0.142910f, 0.860661f},
{ -0.662755f, -0.683714f, -0.305435f},
{ 0.013166f, -0.516146f, -0.856399f},
{ 0.631620f, 0.661221f, -0.404775f},
{ -0.972460f, 0.176774f, -0.151897f},
{ 0.970695f, -0.223493f, 0.088325f},
{ 0.248517f, -0.170611f, -0.953484f},
{ -0.734758f, 0.217962f, -0.642357f},
{ -0.582679f, -0.282223f, -0.762125f},
{ 0.355391f, -0.696052f, 0.623866f},
{ 0.506047f, 0.645151f, -0.572448f},
{ -0.310596f, 0.402190f, 0.861263f},
{ 0.231006f, 0.436128f, -0.869729f},
{ 0.151197f, 0.037566f, 0.987790f},
{ -0.753244f, 0.474367f, 0.455631f},
{ -0.778636f, 0.414362f, -0.471201f},
{ 0.242741f, 0.060917f, 0.968177f},
{ 0.596384f, -0.620789f, 0.508869f},
{ -0.934867f, 0.348325f, -0.068506f},
{ -0.948077f, -0.071556f, 0.309888f},
{ -0.928007f, 0.369663f, -0.046403f},
{ 0.198692f, -0.671387f, 0.713975f},
{ -0.861112f, -0.244510f, 0.445759f},
{ -0.835048f, -0.223389f, -0.502785f},
{ -0.791507f, -0.319608f, -0.520930f},
{ -0.291637f, 0.948021f, -0.127299f},
{ 0.217760f, -0.950767f, -0.220504f},
{ 0.956251f, 0.200678f, 0.212866f},
{ -0.607015f, -0.609223f, -0.510275f},
{ 0.119462f, -0.873821f, 0.471345f},
{ 0.774632f, -0.033284f, 0.631536f},
{ 0.098693f, 0.994962f, 0.017637f},
{ -0.540200f, 0.005832f, 0.841517f},
{ -0.952816f, -0.297405f, -0.060761f},
{ 0.592014f, -0.797140f, -0.118689f},
{ 0.492132f, -0.596114f, 0.634392f},
{ -0.502267f, -0.808749f, -0.306028f},
{ -0.668459f, -0.602037f, 0.436709f},
{ 0.647846f, 0.349140f, 0.677050f},
{ -0.758145f, 0.470838f, 0.451141f},
{ 0.525728f, 0.189000f, 0.829391f},
{ -0.725864f, 0.173468f, 0.665605f},
{ 0.731524f, -0.671009f, -0.120909f},
{ 0.915790f, -0.229897f, -0.329357f},
{ -0.836566f, -0.133079f, -0.531457f},
{ -0.710066f, -0.560156f, -0.426652f},
{ 0.762393f, 0.129019f, -0.634122f},
{ -0.556815f, 0.104094f, -0.824089f},
{ -0.942718f, 0.198915f, 0.267799f},
{ 0.815725f, 0.194493f, 0.544762f},
{ 0.977274f, -0.016147f, -0.211365f},
{ 0.978248f, -0.017698f, -0.206682f},
{ 0.986522f, -0.032952f, -0.160276f},
{ 0.987449f, -0.034994f, -0.154013f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannaidile2.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117