package com.example.jgfjhg;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import android.graphics.Bitmap;
import android.opengl.GLUtils;

class joannablockc {

static String TextureName = "joannablock3.mtl";

static int Vertices = 249;

static int VertTexts = 156;

static int Normals = 96;

static int Faces = 170;

static int FacesB = 0;

static int SmoothGroups = 4;

static float VertArray[] = new float[]{
 0.217482f, 0.650212f, -1.907475f,
 0.512481f, 0.909718f, -2.379798f,
 1.051775f, 0.723536f, -2.129060f,
 0.751231f, 0.476332f, -1.687300f,
 0.113423f, 0.064560f, -2.022775f,
 0.468267f, 0.061373f, -2.505794f,
 2.164430f, 0.061372f, -1.227045f,
 1.808339f, 0.061363f, -0.756815f,
 -0.027809f, 2.718294f, -0.682868f,
 0.463322f, 3.081620f, -1.165563f,
 1.081645f, 3.332666f, -0.601831f,
 0.676114f, 3.002536f, -0.057506f,
 1.447214f, 1.864059f, -0.468709f,
 1.721683f, 2.075064f, -0.861899f,
 1.247575f, 2.157001f, -1.120425f,
 0.931175f, 1.968165f, -0.689095f,
 0.914630f, 7.427793f, 0.879991f,
 0.672382f, 5.695416f, 0.760511f,
 -0.164604f, 6.498771f, 0.393597f,
 0.267234f, 7.342296f, 0.499156f,
 0.304315f, 7.151547f, 1.951902f,
 0.863142f, 6.341049f, 0.134633f,
 0.785273f, 6.893712f, -0.172860f,
 -0.066677f, 5.011789f, -0.120572f,
 0.560453f, 4.842712f, -0.454197f,
 0.895900f, 4.440739f, -0.159277f,
 0.488189f, 4.167634f, 0.434484f,
 0.264807f, 8.450461f, 2.002815f,
 0.901992f, 8.194606f, 1.663012f,
 0.902303f, 7.336804f, 1.630303f,
 0.771702f, 6.919751f, 1.023668f,
 1.037507f, 6.935522f, 0.885447f,
 0.288638f, 8.475476f, 0.576898f,
 0.914432f, 8.207497f, 0.903213f,
 0.614566f, 7.079327f, 0.584820f,
 1.320437f, 7.233084f, 0.750417f,
 0.512469f, 7.209446f, 0.492815f,
 0.782726f, 7.492339f, 0.174494f,
 1.939342f, 6.576679f, 1.320557f,
 1.871276f, 6.868867f, 1.570439f,
 2.215509f, 7.088160f, 1.492488f,
 2.322761f, 6.834934f, 1.246950f,
 0.611984f, 6.704624f, 1.413762f,
 0.288863f, 6.967449f, 0.534339f,
 1.788178f, 5.415987f, 2.799737f,
 1.648818f, 6.119187f, 2.856909f,
 2.127288f, 6.309759f, 2.900876f,
 2.505016f, 5.815693f, 2.827630f,
 -0.933912f, 2.413753f, -1.004651f,
 1.511736f, 3.336471f, -0.780663f,
 0.604571f, 2.916887f, -1.721861f,
 0.338761f, 2.688103f, 0.476827f,
 -0.257066f, 6.356161f, 2.234786f,
 -0.041531f, 5.618347f, 2.312137f,
 -0.685840f, 6.178180f, 2.157459f,
 -0.417860f, 5.462505f, 2.253392f,
 -0.360651f, 8.194413f, 1.643709f,
 -0.348756f, 8.206854f, 0.884223f,
 -0.107842f, 4.433440f, 0.843463f,
 -0.399958f, 4.841686f, 0.505799f,
 0.042609f, 5.730206f, 1.541689f,
 -0.741721f, 5.840103f, 1.337569f,
 -0.189068f, 6.924665f, 1.016538f,
 0.043914f, 6.799239f, 1.430400f,
 -0.360845f, 7.336636f, 1.610187f,
 -0.348711f, 7.427028f, 0.860631f,
 0.886041f, 6.341491f, 2.502657f,
 1.370388f, 5.684701f, 2.604649f,
 0.630806f, 5.954989f, 3.055036f,
 0.979048f, 5.571486f, 3.090036f,
 0.040493f, 4.654312f, 2.246463f,
 -0.008591f, 4.374683f, 2.237976f,
 -0.060813f, 4.404592f, 2.600265f,
 -0.015236f, 4.653052f, 2.625319f,
 -1.182536f, 3.570934f, 1.202906f,
 -1.539363f, 2.711963f, 0.429650f,
 -0.307640f, 0.561524f, 1.743641f,
 -0.892873f, 0.528445f, 1.698532f,
 -0.982498f, 0.799067f, 2.252621f,
 -0.398939f, 0.828963f, 2.322790f,
 -0.284259f, 0.060908f, 1.593260f,
 -0.863753f, 0.061376f, 1.504707f,
 -1.227994f, 0.061373f, 3.597429f,
 -0.647318f, 0.061378f, 3.695674f,
 -0.084179f, 2.802708f, 0.444556f,
 -0.849461f, 2.897186f, 0.453533f,
 -0.945415f, 3.611380f, 0.943913f,
 -0.194576f, 3.624695f, 1.018955f,
 -0.510566f, 2.758026f, 2.114291f,
 -1.027183f, 2.744040f, 2.071267f,
 -0.945827f, 2.436503f, 1.581862f,
 -0.407113f, 2.420835f, 1.549400f,
 -3.960485f, 5.673198f, 1.557636f,
 -3.816839f, 4.627890f, 1.952020f,
 3.226710f, 6.788062f, 2.467713f,
 3.339619f, 5.776836f, 2.772724f,
 0.931175f, 1.968165f, -0.689095f,
 0.931175f, 1.968165f, -0.689095f,
 -0.027809f, 2.718294f, -0.682868f,
 0.217482f, 0.650212f, -1.907475f,
 0.113423f, 0.064560f, -2.022775f,
 0.113423f, 0.064560f, -2.022775f,
 0.217482f, 0.650212f, -1.907475f,
 0.113423f, 0.064560f, -2.022775f,
 0.751231f, 0.476332f, -1.687300f,
 0.751231f, 0.476332f, -1.687300f,
 0.113423f, 0.064560f, -2.022775f,
 1.808339f, 0.061363f, -0.756815f,
 0.751231f, 0.476332f, -1.687300f,
 1.808339f, 0.061363f, -0.756815f,
 1.808339f, 0.061363f, -0.756815f,
 1.051775f, 0.723536f, -2.129060f,
 1.051775f, 0.723536f, -2.129060f,
 1.051775f, 0.723536f, -2.129060f,
 1.051775f, 0.723536f, -2.129060f,
 0.512481f, 0.909718f, -2.379798f,
 0.512481f, 0.909718f, -2.379798f,
 0.931175f, 1.968165f, -0.689095f,
 0.931175f, 1.968165f, -0.689095f,
 0.512481f, 0.909718f, -2.379798f,
 0.217482f, 0.650212f, -1.907475f,
 0.771702f, 6.919751f, 1.023668f,
 0.771702f, 6.919751f, 1.023668f,
 0.863142f, 6.341049f, 0.134633f,
 0.863142f, 6.341049f, 0.134633f,
 0.771702f, 6.919751f, 1.023668f,
 0.771702f, 6.919751f, 1.023668f,
 0.614566f, 7.079327f, 0.584820f,
 0.614566f, 7.079327f, 0.584820f,
 0.614566f, 7.079327f, 0.584820f,
 0.771702f, 6.919751f, 1.023668f,
 0.771702f, 6.919751f, 1.023668f,
 0.863142f, 6.341049f, 0.134633f,
 0.785273f, 6.893712f, -0.172860f,
 1.939342f, 6.576679f, 1.320557f,
 1.939342f, 6.576679f, 1.320557f,
 0.785273f, 6.893712f, -0.172860f,
 0.785273f, 6.893712f, -0.172860f,
 0.863142f, 6.341049f, 0.134633f,
 1.788178f, 5.415987f, 2.799737f,
 1.788178f, 5.415987f, 2.799737f,
 1.939342f, 6.576679f, 1.320557f,
 2.505016f, 5.815693f, 2.827630f,
 2.505016f, 5.815693f, 2.827630f,
 1.939342f, 6.576679f, 1.320557f,
 0.785273f, 6.893712f, -0.172860f,
 0.785273f, 6.893712f, -0.172860f,
 0.614566f, 7.079327f, 0.584820f,
 0.614566f, 7.079327f, 0.584820f,
 2.505016f, 5.815693f, 2.827630f,
 -0.933912f, 2.413753f, -1.004651f,
 0.604571f, 2.916887f, -1.721861f,
 0.338761f, 2.688103f, 0.476827f,
 0.338761f, 2.688103f, 0.476827f,
 0.604571f, 2.916887f, -1.721861f,
 1.511736f, 3.336471f, -0.780663f,
 0.264807f, 8.450461f, 2.002815f,
 0.288638f, 8.475476f, 0.576898f,
 0.288638f, 8.475476f, 0.576898f,
 0.672382f, 5.695416f, 0.760511f,
 0.043914f, 6.799239f, 1.430400f,
 0.672382f, 5.695416f, 0.760511f,
 0.611984f, 6.704624f, 1.413762f,
 0.043914f, 6.799239f, 1.430400f,
 0.042609f, 5.730206f, 1.541689f,
 0.042609f, 5.730206f, 1.541689f,
 0.611984f, 6.704624f, 1.413762f,
 0.304315f, 7.151547f, 1.951902f,
 0.043914f, 6.799239f, 1.430400f,
 0.304315f, 7.151547f, 1.951902f,
 0.043914f, 6.799239f, 1.430400f,
 0.288863f, 6.967449f, 0.534339f,
 -0.189068f, 6.924665f, 1.016538f,
 0.267234f, 7.342296f, 0.499156f,
 -0.189068f, 6.924665f, 1.016538f,
 0.267234f, 7.342296f, 0.499156f,
 -0.189068f, 6.924665f, 1.016538f,
 0.043914f, 6.799239f, 1.430400f,
 0.043914f, 6.799239f, 1.430400f,
 0.488189f, 4.167634f, 0.434484f,
 0.672382f, 5.695416f, 0.760511f,
 0.672382f, 5.695416f, 0.760511f,
 0.042609f, 5.730206f, 1.541689f,
 0.040493f, 4.654312f, 2.246463f,
 -0.741721f, 5.840103f, 1.337569f,
 0.040493f, 4.654312f, 2.246463f,
 -0.741721f, 5.840103f, 1.337569f,
 -0.741721f, 5.840103f, 1.337569f,
 0.042609f, 5.730206f, 1.541689f,
 0.886041f, 6.341491f, 2.502657f,
 0.886041f, 6.341491f, 2.502657f,
 1.370388f, 5.684701f, 2.604649f,
 0.040493f, 4.654312f, 2.246463f,
 1.370388f, 5.684701f, 2.604649f,
 0.040493f, 4.654312f, 2.246463f,
 -0.741721f, 5.840103f, 1.337569f,
 -0.741721f, 5.840103f, 1.337569f,
 -0.189068f, 6.924665f, 1.016538f,
 -0.164604f, 6.498771f, 0.393597f,
 -0.189068f, 6.924665f, 1.016538f,
 0.288863f, 6.967449f, 0.534339f,
 -0.164604f, 6.498771f, 0.393597f,
 1.370388f, 5.684701f, 2.604649f,
 0.267234f, 7.342296f, 0.499156f,
 0.288638f, 8.475476f, 0.576898f,
 0.267234f, 7.342296f, 0.499156f,
 0.264807f, 8.450461f, 2.002815f,
 0.304315f, 7.151547f, 1.951902f,
 0.304315f, 7.151547f, 1.951902f,
 -0.066677f, 5.011789f, -0.120572f,
 -0.164604f, 6.498771f, 0.393597f,
 -0.066677f, 5.011789f, -0.120572f,
 -0.933912f, 2.413753f, -1.004651f,
 -0.066677f, 5.011789f, -0.120572f,
 -0.066677f, 5.011789f, -0.120572f,
 0.338761f, 2.688103f, 0.476827f,
 0.488189f, 4.167634f, 0.434484f,
 0.488189f, 4.167634f, 0.434484f,
 -0.933912f, 2.413753f, -1.004651f,
 0.338761f, 2.688103f, 0.476827f,
 -1.539363f, 2.711963f, 0.429650f,
 0.338761f, 2.688103f, 0.476827f,
 -1.182536f, 3.570934f, 1.202906f,
 -1.539363f, 2.711963f, 0.429650f,
 -0.407113f, 2.420835f, 1.549400f,
 -0.084179f, 2.802708f, 0.444556f,
 -0.407113f, 2.420835f, 1.549400f,
 -0.307640f, 0.561524f, 1.743641f,
 -0.284259f, 0.060908f, 1.593260f,
 -0.284259f, 0.060908f, 1.593260f,
 -0.307640f, 0.561524f, 1.743641f,
 -0.398939f, 0.828963f, 2.322790f,
 -0.284259f, 0.060908f, 1.593260f,
 -0.398939f, 0.828963f, 2.322790f,
 -0.647318f, 0.061378f, 3.695674f,
 -0.284259f, 0.060908f, 1.593260f,
 -0.398939f, 0.828963f, 2.322790f,
 -0.647318f, 0.061378f, 3.695674f,
 -0.647318f, 0.061378f, 3.695674f,
 -0.982498f, 0.799067f, 2.252621f,
 -0.982498f, 0.799067f, 2.252621f,
 -0.982498f, 0.799067f, 2.252621f,
 -0.892873f, 0.528445f, 1.698532f,
 -0.982498f, 0.799067f, 2.252621f,
 -0.407113f, 2.420835f, 1.549400f,
 -0.892873f, 0.528445f, 1.698532f,
 -0.407113f, 2.420835f, 1.549400f,
 -0.307640f, 0.561524f, 1.743641f,
 -0.892873f, 0.528445f, 1.698532f,};

static float VertArrayB[] = new float[]{};

static float[] TextArray = new float[]{
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.453876f, 0.791903f,
 0.201824f, 0.532079f,
 0.590263f, 0.596995f,
 0.556897f, 0.779659f,
 0.235400f, 0.777966f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.566387f, 0.397259f,
 0.470805f, 0.365178f,
 0.365778f, 0.346308f,
 0.249833f, 0.335338f,
 0.289739f, 0.984705f,
 0.362886f, 0.905310f,
 0.354538f, 0.788048f,
 0.662213f, 0.973243f,
 0.649436f, 0.842323f,
 0.523433f, 0.983917f,
 0.451956f, 0.900429f,
 0.700374f, 0.973112f,
 0.714202f, 0.842324f,
 0.662213f, 0.871337f,
 0.700374f, 0.871169f,
 0.611238f, 0.659338f,
 0.649436f, 0.659338f,
 0.714202f, 0.659338f,
 0.749335f, 0.659338f,
 0.262276f, 0.714547f,
 0.539459f, 0.732725f,
 0.635368f, 0.320085f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.727698f, 0.329948f,
 0.754615f, 0.048462f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.147427f, 0.097935f,
 0.662213f, 0.871337f,
 0.649436f, 0.842323f,
 0.700374f, 0.871169f,
 0.714202f, 0.842324f,
 0.362886f, 0.905310f,
 0.451956f, 0.900429f,
 0.365778f, 0.346308f,
 0.470805f, 0.365178f,
 0.367224f, 0.573251f,
 0.453040f, 0.577674f,
 0.700374f, 0.973112f,
 0.662213f, 0.973243f,
 0.354538f, 0.788048f,
 0.453876f, 0.791903f,
 0.635368f, 0.320085f,
 0.727698f, 0.329948f,
 0.647458f, 0.410463f,
 0.714202f, 0.410460f,
 0.611238f, 0.659338f,
 0.749335f, 0.659338f,
 0.714202f, 0.659338f,
 0.649436f, 0.659338f,
 0.320425f, 0.069876f,
 0.504948f, 0.016928f,
 0.006939f, 0.326299f,
 0.090499f, 0.173168f,
 0.105659f, 0.212267f,
 0.055390f, 0.326300f,
 0.015021f, 0.168109f,
 0.054525f, 0.165271f,
 0.064749f, 0.307849f,
 0.025236f, 0.310573f,
 0.006936f, 0.973168f,
 0.148951f, 0.973168f,
 0.102753f, 0.881533f,
 0.055389f, 0.881533f,
 0.055390f, 0.579866f,
 0.102750f, 0.579866f,
 0.148951f, 0.621715f,
 0.006938f, 0.621714f,
 0.829311f, 0.001810f,
 0.999173f, 0.001810f,
 0.829311f, 0.998093f,
 0.999173f, 0.998093f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.132466f, 0.001616f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.326300f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.806916f, 0.873085f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.452577f, 0.721572f,
 0.749335f, 0.410462f,
 0.747690f, 0.223911f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.737676f, 0.256798f,
 0.289739f, 0.984705f,
 0.523433f, 0.983917f,
 0.523433f, 0.983917f,
 0.201824f, 0.532079f,
 0.353637f, 0.718421f,
 0.201824f, 0.532079f,
 0.262276f, 0.714547f,
 0.353637f, 0.718421f,
 0.611238f, 0.872595f,
 0.611238f, 0.872595f,
 0.262276f, 0.714547f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.235400f, 0.777966f,
 0.353637f, 0.718421f,
 0.539459f, 0.732725f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.556897f, 0.779659f,
 0.452577f, 0.721572f,
 0.353637f, 0.718421f,
 0.353637f, 0.718421f,
 0.249833f, 0.335338f,
 0.201824f, 0.532079f,
 0.201824f, 0.532079f,
 0.806916f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.611238f, 0.872595f,
 0.611238f, 0.410462f,
 0.806916f, 0.410462f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.410462f,
 0.806916f, 0.659338f,
 0.749335f, 0.873085f,
 0.749335f, 0.873085f,
 0.452577f, 0.721572f,
 0.590263f, 0.596995f,
 0.452577f, 0.721572f,
 0.539459f, 0.732725f,
 0.590263f, 0.596995f,
 0.749335f, 0.410462f,
 0.556897f, 0.779659f,
 0.523433f, 0.983917f,
 0.556897f, 0.779659f,
 0.289739f, 0.984705f,
 0.235400f, 0.777966f,
 0.235400f, 0.777966f,
 0.566387f, 0.397259f,
 0.590263f, 0.596995f,
 0.566387f, 0.397259f,
 0.754615f, 0.048462f,
 0.566387f, 0.397259f,
 0.566387f, 0.397259f,
 0.147427f, 0.097935f,
 0.249833f, 0.335338f,
 0.249833f, 0.335338f,
 0.747690f, 0.223911f,
 0.724061f, 0.244264f,
 0.756142f, 0.248493f,
 0.724061f, 0.244264f,
 0.737676f, 0.256798f,
 0.756142f, 0.248493f,
 0.196341f, 0.621715f,
 0.196341f, 0.973168f,
 0.196341f, 0.621715f,
 0.099486f, 0.134595f,
 0.063514f, 0.126699f,
 0.063514f, 0.126699f,
 0.099486f, 0.134595f,
 0.129579f, 0.105546f,
 0.063514f, 0.126699f,
 0.129579f, 0.105546f,
 0.132466f, 0.001616f,
 0.063514f, 0.126699f,
 0.142109f, 0.227760f,
 0.101198f, 0.323344f,
 0.101198f, 0.323344f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.102748f, 0.326300f,
 0.148951f, 0.326300f,
 0.102748f, 0.326300f,
 0.196341f, 0.621715f,
 0.148951f, 0.326300f,
 0.196341f, 0.621715f,
 0.196341f, 0.326300f,
 0.148951f, 0.326300f,};

static float[] TextArrayB = new float[]{};

static float[][] NormArray = new float[][]{
{ -0.492598f, -0.861434f, 0.123604f},
{ 0.078771f, -0.761425f, -0.643449f},
{ 0.214376f, -0.706876f, 0.674070f},
{ 0.791278f, -0.603083f, -0.100846f},
{ 0.189627f, -0.216638f, 0.957658f},
{ 0.446419f, -0.442330f, 0.777852f},
{ 0.888690f, 0.457968f, -0.022271f},
{ 0.996784f, 0.025454f, -0.075989f},
{ -0.616093f, -0.787487f, -0.017131f},
{ -0.829034f, -0.390201f, 0.400556f},
{ 0.019561f, 0.503067f, -0.864026f},
{ 0.047526f, -0.074093f, -0.996118f},
{ -0.937182f, 0.198405f, 0.286925f},
{ -0.294604f, 0.610091f, -0.735526f},
{ 0.784533f, 0.144080f, -0.603117f},
{ -0.199761f, -0.027229f, 0.979466f},
{ 0.240704f, 0.536649f, 0.808746f},
{ -0.628145f, -0.248254f, 0.737430f},
{ 0.138099f, 0.872500f, -0.468692f},
{ 0.351946f, 0.905046f, -0.238803f},
{ -0.019720f, 0.686278f, 0.727072f},
{ 0.742252f, 0.490422f, 0.456672f},
{ 0.016324f, 0.693339f, -0.720427f},
{ 0.790344f, 0.400510f, -0.463625f},
{ 0.963886f, 0.144688f, 0.223581f},
{ 0.127824f, 0.421943f, -0.897566f},
{ 0.969204f, -0.205468f, -0.135747f},
{ 0.014404f, 0.325894f, -0.945297f},
{ -0.424041f, 0.552923f, -0.717262f},
{ 0.987159f, -0.115002f, 0.110866f},
{ 0.858237f, -0.171975f, 0.483584f},
{ 0.524093f, -0.422935f, 0.739224f},
{ 0.015573f, -0.331328f, 0.943387f},
{ 0.815602f, -0.295426f, 0.497512f},
{ -0.449836f, 0.295150f, -0.842932f},
{ -0.083913f, 0.000522f, -0.996473f},
{ 0.900090f, -0.053313f, -0.432431f},
{ 0.638985f, -0.091521f, 0.763756f},
{ -0.215978f, -0.927535f, -0.305013f},
{ 0.876648f, -0.469291f, -0.106081f},
{ -0.946530f, 0.152701f, 0.284188f},
{ 0.373365f, 0.720653f, 0.584172f},
{ 0.010974f, -0.918320f, -0.395687f},
{ 0.853039f, -0.161848f, -0.496115f},
{ 0.485847f, 0.842370f, 0.233165f},
{ -0.768845f, 0.478648f, 0.423997f},
{ -0.754310f, 0.289378f, -0.589302f},
{ 0.946654f, -0.234233f, -0.221319f},
{ 0.003487f, -0.208959f, -0.977918f},
{ -0.659916f, 0.346364f, -0.666741f},
{ -0.661304f, -0.287818f, -0.692703f},
{ 0.447846f, -0.707482f, 0.546721f},
{ 0.443621f, 0.573789f, 0.688452f},
{ -0.883791f, 0.329132f, 0.332544f},
{ 0.804977f, 0.220955f, 0.550628f},
{ -0.864198f, -0.235792f, 0.444482f},
{ -0.753990f, 0.478924f, 0.449590f},
{ -0.777919f, 0.408696f, -0.477294f},
{ 0.217129f, -0.111163f, 0.969793f},
{ 0.799035f, -0.448477f, 0.400513f},
{ -0.961070f, 0.275329f, -0.023206f},
{ -0.976748f, -0.135873f, -0.165836f},
{ -0.905521f, 0.367751f, -0.211640f},
{ 0.176819f, -0.220323f, 0.959267f},
{ -0.851805f, -0.262805f, 0.453170f},
{ -0.859548f, -0.173542f, -0.480687f},
{ -0.164729f, 0.609357f, -0.775595f},
{ -0.700197f, 0.524602f, 0.484270f},
{ 0.759917f, -0.228339f, -0.608595f},
{ 0.441926f, -0.479054f, 0.758425f},
{ 0.420448f, 0.087536f, -0.903084f},
{ -0.119446f, -0.981823f, -0.147501f},
{ 0.075902f, -0.946562f, 0.313464f},
{ -0.628211f, 0.319905f, 0.709233f},
{ -0.491573f, 0.001591f, 0.870835f},
{ -0.953770f, -0.300509f, -0.004183f},
{ 0.627434f, -0.773782f, -0.087105f},
{ 0.537431f, -0.548402f, 0.640643f},
{ -0.536858f, -0.793601f, -0.286323f},
{ -0.708070f, -0.558640f, 0.431924f},
{ 0.653153f, 0.481463f, 0.584452f},
{ -0.753108f, 0.544321f, 0.369518f},
{ 0.539253f, 0.345565f, 0.767979f},
{ -0.714980f, 0.301796f, 0.630652f},
{ 0.732114f, -0.680848f, -0.021337f},
{ 0.911316f, -0.293071f, -0.289159f},
{ -0.836007f, -0.236817f, -0.494984f},
{ -0.718399f, -0.627317f, -0.300626f},
{ 0.748623f, 0.020647f, -0.662674f},
{ -0.564652f, -0.012442f, -0.825235f},
{ -0.925580f, 0.254874f, 0.279893f},
{ 0.806973f, 0.250097f, 0.535019f},
{ -0.168534f, 0.327593f, 0.929666f},
{ -0.167174f, 0.322688f, 0.931625f},
{ -0.154052f, 0.275806f, 0.948788f},
{ -0.152349f, 0.269773f, 0.950796f}};

static int[] FaceArray = new int[]{
4, 5, 7,
7, 5, 6,
11, 12, 10,
10, 12, 13,
8, 15, 11,
11, 15, 12,
14, 96, 9,
9, 97, 98,
13, 14, 10,
10, 14, 9,
99, 1, 100,
101, 1, 5,
1, 2, 5,
5, 2, 6,
102, 103, 104,
105, 106, 107,
108, 109, 2,
2, 110, 6,
13, 12, 111,
112, 12, 3,
13, 113, 14,
14, 114, 115,
14, 116, 117,
118, 119, 120,
12, 15, 3,
3, 15, 0,
36, 31, 37,
37, 31, 35,
27, 28, 32,
32, 28, 33,
25, 24, 21,
21, 24, 22,
37, 34, 36,
36, 34, 30,
21, 121, 17,
17, 122, 42,
31, 36, 123,
124, 36, 30,
42, 125, 20,
20, 126, 29,
43, 19, 127,
128, 19, 16,
129, 16, 130,
131, 16, 29,
29, 16, 28,
28, 16, 33,
26, 25, 17,
17, 25, 21,
44, 47, 45,
45, 47, 46,
132, 133, 134,
135, 136, 41,
137, 35, 41,
41, 35, 40,
138, 38, 31,
31, 38, 39,
31, 39, 35,
35, 39, 40,
39, 38, 45,
45, 38, 139,
140, 141, 142,
143, 144, 41,
40, 39, 46,
46, 39, 45,
35, 145, 37,
37, 146, 34,
22, 18, 147,
148, 18, 43,
149, 41, 46,
46, 41, 40,
16, 19, 33,
33, 19, 32,
27, 20, 28,
28, 20, 29,
25, 49, 24,
24, 49, 50,
24, 23, 22,
22, 23, 18,
48, 23, 50,
50, 23, 24,
51, 49, 26,
26, 49, 25,
150, 151, 152,
153, 154, 155,
52, 54, 53,
54, 55, 53,
156, 157, 56,
158, 57, 56,
58, 60, 59,
60, 61, 59,
54, 52, 62,
52, 63, 62,
60, 159, 160,
161, 162, 163,
53, 164, 52,
165, 63, 52,
166, 167, 168,
169, 64, 170,
171, 172, 173,
174, 65, 175,
176, 177, 65,
178, 64, 65,
64, 56, 65,
56, 57, 65,
179, 180, 58,
181, 60, 58,
66, 68, 67,
68, 69, 67,
182, 183, 184,
185, 71, 186,
187, 71, 55,
71, 72, 55,
188, 53, 70,
53, 73, 70,
53, 55, 73,
55, 72, 73,
73, 68, 70,
68, 189, 70,
190, 191, 192,
193, 71, 194,
72, 69, 73,
69, 68, 73,
55, 54, 195,
54, 62, 196,
61, 197, 198,
199, 200, 201,
202, 69, 71,
69, 72, 71,
65, 57, 203,
57, 204, 205,
206, 56, 207,
56, 64, 208,
58, 59, 74,
59, 75, 74,
59, 61, 209,
61, 210, 211,
212, 75, 213,
75, 59, 214,
215, 216, 74,
217, 58, 74,
218, 219, 220,
221, 222, 223,
80, 83, 81,
83, 82, 81,
87, 86, 88,
86, 89, 88,
84, 87, 91,
87, 88, 91,
90, 85, 224,
85, 225, 226,
89, 86, 90,
86, 85, 90,
227, 228, 77,
229, 81, 77,
77, 81, 78,
81, 82, 78,
230, 231, 232,
233, 234, 235,
236, 78, 237,
78, 82, 238,
89, 239, 88,
240, 79, 88,
89, 90, 241,
90, 242, 243,
90, 244, 245,
246, 247, 248,
88, 79, 91,
79, 76, 91,
92, 93, 94,
94, 93, 95, };

static int[] FaceArrayB = new int[]{};

static int[] textures = new int[1];
static Bitmap ModelTexture;
private static FloatBuffer mFVertexBuffer;
private static FloatBuffer mFTextureBuffer;
private static ByteBuffer  mModel;

private static FloatBuffer mFVertexBufferB;
private static FloatBuffer mFTextureBufferB;
private static ByteBuffer  mModelB;

public static void SetupBuffers(){
byte tModel[] = new byte[FaceArray.length]; 	
for (int i = 0; i < FaceArray.length; i++){
tModel[i] = (byte) (FaceArray[i]);
}
 for (int i = 0; i < TextArray.length; i+= 2){
TextArray[i+1] = TextArray[i+1] * -1;
}
byte tModelB[] = new byte[FaceArrayB.length]; 	
for (int i = 0; i < FaceArrayB.length; i++){
tModelB[i] = (byte) (FaceArrayB[i]);
}
 for (int i = 0; i < TextArrayB.length; i+= 2){
TextArrayB[i+1] = TextArrayB[i+1] * -1;
}
ByteBuffer vbb = ByteBuffer.allocateDirect(VertArray.length * 4);
vbb.order(ByteOrder.nativeOrder());
mFVertexBuffer = vbb.asFloatBuffer();
mFVertexBuffer.put(VertArray);
mFVertexBuffer.position(0);
ByteBuffer tbb = ByteBuffer.allocateDirect(TextArray.length * 4);
tbb.order(ByteOrder.nativeOrder());
mFTextureBuffer = tbb.asFloatBuffer();
mFTextureBuffer.put(TextArray);
mFTextureBuffer.position(0);
mModel = ByteBuffer.allocateDirect(FaceArray.length);
mModel.put(tModel);
mModel.position(0);
Faces = FaceArray.length;
VertArray = null;
TextArray = null;
FaceArray = null;
ByteBuffer vBbb = ByteBuffer.allocateDirect(VertArrayB.length * 4);
vBbb.order(ByteOrder.nativeOrder());
mFVertexBufferB = vBbb.asFloatBuffer();
mFVertexBufferB.put(VertArrayB);
mFVertexBufferB.position(0);
ByteBuffer tBbb = ByteBuffer.allocateDirect(TextArrayB.length * 4);
tBbb.order(ByteOrder.nativeOrder());
mFTextureBufferB = tBbb.asFloatBuffer();
mFTextureBufferB.put(TextArrayB);
mFTextureBufferB.position(0);
mModelB = ByteBuffer.allocateDirect(FaceArrayB.length);
mModelB.put(tModelB);
mModelB.position(0);
FacesB = FaceArrayB.length;
VertArrayB = null;
TextArrayB = null;
FaceArrayB = null;
}

public static void TextureSetup(GL10 gl, Bitmap Texture){
ModelTexture = Texture;
gl.glGenTextures(1, textures, 0);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, ModelTexture, 0);
}

public static void draw(GL10 gl){
gl.glAlphaFunc(gl.GL_GREATER, 0.1f);
gl.glEnable(gl.GL_ALPHA_TEST);
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBuffer);
gl.glDrawElements( gl.GL_TRIANGLES, Faces, gl.GL_UNSIGNED_BYTE, mModel);
gl.glVertexPointer(3, GL11.GL_FLOAT, 0, mFVertexBufferB);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mFTextureBufferB);
gl.glDrawElements( gl.GL_TRIANGLES, FacesB, gl.GL_UNSIGNED_BYTE, mModelB);
}

}


//Vertices: 249  Texture Co-ords: 156  Normals: 96  Texture: joannablock3.mtl Faces: 170 Smooth Groups: 4 sucess: 80 Doubles: 90 Redos needed: 153 Correct: 117